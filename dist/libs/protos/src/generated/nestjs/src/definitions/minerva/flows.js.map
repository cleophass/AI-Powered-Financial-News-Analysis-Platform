{"version":3,"sources":["../../../../../../../../../libs/protos/src/generated/nestjs/src/definitions/minerva/flows.ts"],"sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.5.0\n//   protoc               v5.29.1\n// source: src/definitions/minerva/flows.proto\n\n/* eslint-disable */\nimport { GrpcMethod, GrpcStreamMethod } from \"@nestjs/microservices\";\nimport { wrappers } from \"protobufjs\";\nimport { Observable } from \"rxjs\";\nimport { Struct } from \"../../../google/protobuf/struct\";\n\nexport interface FlowResponse {\n  id: string;\n  userId: string;\n  strategyId: string;\n  graph: { [key: string]: any } | undefined;\n  ast: { [key: string]: any } | undefined;\n  status: string;\n  isArchived: boolean;\n  backtestsCount: number;\n  executionsCount: number;\n  createdAt: Date | undefined;\n  updatedAt: Date | undefined;\n}\n\nexport interface FlowsListResponse {\n  flows: FlowResponse[];\n}\n\nexport interface CreateDraftFlowRequest {\n  userId: string;\n  strategyId: string;\n  graph: { [key: string]: any } | undefined;\n}\n\nexport interface PromoteDraftFlowRequest {\n  strategyId: string;\n  userId: string;\n}\n\nexport interface ArchivedFlowsByStrategyIdRequest {\n  userId: string;\n  strategyId: string;\n  status: string;\n}\n\nexport interface FlowByStrategyIdRequest {\n  userId: string;\n  strategyId: string;\n  status: string;\n}\n\nexport interface FlowsByStrategyIdRequest {\n  userId: string;\n  strategyId: string;\n}\n\nexport interface FlowByIdRequest {\n  id: string;\n  userId: string;\n}\n\nexport interface ListFlowsByStrategyIdsRequest {\n  ids: string[];\n}\n\nwrappers[\".google.protobuf.Timestamp\"] = {\n  fromObject(value: Date) {\n    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };\n  },\n  toObject(message: { seconds: number; nanos: number }) {\n    return new Date(message.seconds * 1000 + message.nanos / 1e6);\n  },\n} as any;\n\nwrappers[\".google.protobuf.Struct\"] = { fromObject: Struct.wrap, toObject: Struct.unwrap } as any;\n\nexport interface FlowsClient {\n  createDraftFlow(request: CreateDraftFlowRequest): Observable<FlowResponse>;\n\n  promoteDraftFlow(request: PromoteDraftFlowRequest): Observable<FlowResponse>;\n\n  listArchivedFlowsByStrategyId(request: ArchivedFlowsByStrategyIdRequest): Observable<FlowsListResponse>;\n\n  getFlowByStrategyId(request: FlowByStrategyIdRequest): Observable<FlowResponse>;\n\n  listFlowsByStrategyId(request: FlowsByStrategyIdRequest): Observable<FlowsListResponse>;\n\n  getFlowById(request: FlowByIdRequest): Observable<FlowResponse>;\n\n  listFlowsByStrategyIds(request: ListFlowsByStrategyIdsRequest): Observable<FlowsListResponse>;\n}\n\nexport interface FlowsController {\n  createDraftFlow(request: CreateDraftFlowRequest): Promise<FlowResponse> | Observable<FlowResponse> | FlowResponse;\n\n  promoteDraftFlow(request: PromoteDraftFlowRequest): Promise<FlowResponse> | Observable<FlowResponse> | FlowResponse;\n\n  listArchivedFlowsByStrategyId(\n    request: ArchivedFlowsByStrategyIdRequest,\n  ): Promise<FlowsListResponse> | Observable<FlowsListResponse> | FlowsListResponse;\n\n  getFlowByStrategyId(\n    request: FlowByStrategyIdRequest,\n  ): Promise<FlowResponse> | Observable<FlowResponse> | FlowResponse;\n\n  listFlowsByStrategyId(\n    request: FlowsByStrategyIdRequest,\n  ): Promise<FlowsListResponse> | Observable<FlowsListResponse> | FlowsListResponse;\n\n  getFlowById(request: FlowByIdRequest): Promise<FlowResponse> | Observable<FlowResponse> | FlowResponse;\n\n  listFlowsByStrategyIds(\n    request: ListFlowsByStrategyIdsRequest,\n  ): Promise<FlowsListResponse> | Observable<FlowsListResponse> | FlowsListResponse;\n}\n\nexport function FlowsControllerMethods() {\n  return function (constructor: Function) {\n    const grpcMethods: string[] = [\n      \"createDraftFlow\",\n      \"promoteDraftFlow\",\n      \"listArchivedFlowsByStrategyId\",\n      \"getFlowByStrategyId\",\n      \"listFlowsByStrategyId\",\n      \"getFlowById\",\n      \"listFlowsByStrategyIds\",\n    ];\n    for (const method of grpcMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcMethod(\"Flows\", method)(constructor.prototype[method], method, descriptor);\n    }\n    const grpcStreamMethods: string[] = [];\n    for (const method of grpcStreamMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcStreamMethod(\"Flows\", method)(constructor.prototype[method], method, descriptor);\n    }\n  };\n}\n\nexport const FLOWS_SERVICE_NAME = \"Flows\";\n"],"names":["FLOWS_SERVICE_NAME","FlowsControllerMethods","wrappers","fromObject","value","seconds","getTime","nanos","toObject","message","Date","Struct","wrap","unwrap","constructor","grpcMethods","method","descriptor","Reflect","getOwnPropertyDescriptor","prototype","GrpcMethod","grpcStreamMethods","GrpcStreamMethod"],"mappings":"AAAA,sDAAsD;AACtD,YAAY;AACZ,gCAAgC;AAChC,iCAAiC;AACjC,8CAA8C;AAE9C,kBAAkB;;;;;;;;;;;IAuILA,kBAAkB;eAAlBA;;IAvBGC,sBAAsB;eAAtBA;;;+BA/G6B;4BACpB;wBAEF;AAyDvBC,oBAAQ,CAAC,6BAA6B,GAAG;IACvCC,YAAWC,KAAW;QACpB,OAAO;YAAEC,SAASD,MAAME,OAAO,KAAK;YAAMC,OAAO,AAACH,MAAME,OAAO,KAAK,OAAQ;QAAI;IAClF;IACAE,UAASC,OAA2C;QAClD,OAAO,IAAIC,KAAKD,QAAQJ,OAAO,GAAG,OAAOI,QAAQF,KAAK,GAAG;IAC3D;AACF;AAEAL,oBAAQ,CAAC,0BAA0B,GAAG;IAAEC,YAAYQ,cAAM,CAACC,IAAI;IAAEJ,UAAUG,cAAM,CAACE,MAAM;AAAC;AA0ClF,SAASZ;IACd,OAAO,SAAUa,WAAqB;QACpC,MAAMC,cAAwB;YAC5B;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACD,KAAK,MAAMC,UAAUD,YAAa;YAChC,MAAME,aAAkBC,QAAQC,wBAAwB,CAACL,YAAYM,SAAS,EAAEJ;YAChFK,IAAAA,yBAAU,EAAC,SAASL,QAAQF,YAAYM,SAAS,CAACJ,OAAO,EAAEA,QAAQC;QACrE;QACA,MAAMK,oBAA8B,EAAE;QACtC,KAAK,MAAMN,UAAUM,kBAAmB;YACtC,MAAML,aAAkBC,QAAQC,wBAAwB,CAACL,YAAYM,SAAS,EAAEJ;YAChFO,IAAAA,+BAAgB,EAAC,SAASP,QAAQF,YAAYM,SAAS,CAACJ,OAAO,EAAEA,QAAQC;QAC3E;IACF;AACF;AAEO,MAAMjB,qBAAqB"}