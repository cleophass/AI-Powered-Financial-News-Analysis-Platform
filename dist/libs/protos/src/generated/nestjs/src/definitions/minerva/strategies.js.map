{"version":3,"sources":["../../../../../../../../../libs/protos/src/generated/nestjs/src/definitions/minerva/strategies.ts"],"sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.5.0\n//   protoc               v5.29.1\n// source: src/definitions/minerva/strategies.proto\n\n/* eslint-disable */\nimport { GrpcMethod, GrpcStreamMethod } from \"@nestjs/microservices\";\nimport { wrappers } from \"protobufjs\";\nimport { Observable } from \"rxjs\";\nimport { Empty } from \"../../../google/protobuf/empty\";\nimport { Struct } from \"../../../google/protobuf/struct\";\n\nexport interface PairBroker {\n  base: string;\n  quote: string;\n  broker: string;\n}\n\nexport interface PairRatio {\n  base: string;\n  quote: string;\n  broker: string;\n  quoteRatio: number;\n  baseRatio: number;\n}\n\nexport interface RRuleOptions {\n  frequency: number;\n  interval: number;\n  dtstart:\n    | Date\n    | undefined;\n  /** protolint:disable REPEATED_FIELD_NAMES_PLURALIZED */\n  bysetpos: number[];\n  bymonth: number[];\n  bymonthday: number[];\n  byyearday: number[];\n  byweekno: number[];\n  byweekday: number[];\n  byhour: number[];\n  /** protolint:enable REPEATED_FIELD_NAMES_PLURALIZED */\n  byminute: number[];\n}\n\nexport interface StrategyResponse {\n  id: string;\n  userId: string;\n  name: string;\n  type: string;\n  isActive: boolean;\n  baseBudget: { [key: string]: any } | undefined;\n  lastBudgetChange?: Date | undefined;\n  recurrence?: RRuleOptions | undefined;\n  recurrenceDates: Date[];\n  runIfOrdersActive?: boolean | undefined;\n  stopIfError?: boolean | undefined;\n  maxExecutionDelay?: number | undefined;\n  cancelAllOrdersBeforeExecution?: boolean | undefined;\n  deployedAt?: Date | undefined;\n  createdAt: Date | undefined;\n  updatedAt: Date | undefined;\n  activePairs: PairRatio[];\n  draftPairs: PairBroker[];\n}\n\nexport interface StrategiesListResponse {\n  strategies: StrategyResponse[];\n}\n\nexport interface StrategiesByUserIdRequest {\n  userId: string;\n}\n\nexport interface StrategyByIdRequest {\n  userId: string;\n  id: string;\n}\n\nexport interface CreateStrategyRequest {\n  userId: string;\n  name: string;\n  type: string;\n  recurrence: RRuleOptions | undefined;\n}\n\nexport interface UpdateStrategyRequest {\n  id: string;\n  userId: string;\n  name?: string | undefined;\n  type?: string | undefined;\n  recurrence?: RRuleOptions | undefined;\n  isActive?: boolean | undefined;\n  runIfOrdersActive?: boolean | undefined;\n  stopIfError?: boolean | undefined;\n  maxExecutionDelay?: number | undefined;\n  cancelAllOrdersBeforeExecution?: boolean | undefined;\n  baseBudget?: { [key: string]: any } | undefined;\n}\n\nexport interface SetStrategyActivePairsRequest {\n  id: string;\n  userId: string;\n  activePairs: PairRatio[];\n  clear?: boolean | undefined;\n}\n\nexport interface SetStrategyDraftPairsRequest {\n  id: string;\n  userId: string;\n  draftPairs: PairBroker[];\n  clear?: boolean | undefined;\n}\n\nexport interface ListActiveStrategiesRequest {\n  base: string;\n  quote: string;\n  broker: string;\n  executionDate: Date | undefined;\n}\n\nwrappers[\".google.protobuf.Timestamp\"] = {\n  fromObject(value: Date) {\n    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };\n  },\n  toObject(message: { seconds: number; nanos: number }) {\n    return new Date(message.seconds * 1000 + message.nanos / 1e6);\n  },\n} as any;\n\nwrappers[\".google.protobuf.Struct\"] = { fromObject: Struct.wrap, toObject: Struct.unwrap } as any;\n\nexport interface StrategiesClient {\n  listStrategiesByUserId(request: StrategiesByUserIdRequest): Observable<StrategiesListResponse>;\n\n  getStrategyById(request: StrategyByIdRequest): Observable<StrategyResponse>;\n\n  createStrategy(request: CreateStrategyRequest): Observable<StrategyResponse>;\n\n  updateStrategy(request: UpdateStrategyRequest): Observable<StrategyResponse>;\n\n  setStrategyActivePairs(request: SetStrategyActivePairsRequest): Observable<StrategyResponse>;\n\n  setStrategyDraftPairs(request: SetStrategyDraftPairsRequest): Observable<StrategyResponse>;\n\n  deleteStrategy(request: StrategyByIdRequest): Observable<Empty>;\n\n  listActiveStrategies(request: ListActiveStrategiesRequest): Observable<StrategiesListResponse>;\n}\n\nexport interface StrategiesController {\n  listStrategiesByUserId(\n    request: StrategiesByUserIdRequest,\n  ): Promise<StrategiesListResponse> | Observable<StrategiesListResponse> | StrategiesListResponse;\n\n  getStrategyById(\n    request: StrategyByIdRequest,\n  ): Promise<StrategyResponse> | Observable<StrategyResponse> | StrategyResponse;\n\n  createStrategy(\n    request: CreateStrategyRequest,\n  ): Promise<StrategyResponse> | Observable<StrategyResponse> | StrategyResponse;\n\n  updateStrategy(\n    request: UpdateStrategyRequest,\n  ): Promise<StrategyResponse> | Observable<StrategyResponse> | StrategyResponse;\n\n  setStrategyActivePairs(\n    request: SetStrategyActivePairsRequest,\n  ): Promise<StrategyResponse> | Observable<StrategyResponse> | StrategyResponse;\n\n  setStrategyDraftPairs(\n    request: SetStrategyDraftPairsRequest,\n  ): Promise<StrategyResponse> | Observable<StrategyResponse> | StrategyResponse;\n\n  deleteStrategy(request: StrategyByIdRequest): void;\n\n  listActiveStrategies(\n    request: ListActiveStrategiesRequest,\n  ): Promise<StrategiesListResponse> | Observable<StrategiesListResponse> | StrategiesListResponse;\n}\n\nexport function StrategiesControllerMethods() {\n  return function (constructor: Function) {\n    const grpcMethods: string[] = [\n      \"listStrategiesByUserId\",\n      \"getStrategyById\",\n      \"createStrategy\",\n      \"updateStrategy\",\n      \"setStrategyActivePairs\",\n      \"setStrategyDraftPairs\",\n      \"deleteStrategy\",\n      \"listActiveStrategies\",\n    ];\n    for (const method of grpcMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcMethod(\"Strategies\", method)(constructor.prototype[method], method, descriptor);\n    }\n    const grpcStreamMethods: string[] = [];\n    for (const method of grpcStreamMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcStreamMethod(\"Strategies\", method)(constructor.prototype[method], method, descriptor);\n    }\n  };\n}\n\nexport const STRATEGIES_SERVICE_NAME = \"Strategies\";\n"],"names":["STRATEGIES_SERVICE_NAME","StrategiesControllerMethods","wrappers","fromObject","value","seconds","getTime","nanos","toObject","message","Date","Struct","wrap","unwrap","constructor","grpcMethods","method","descriptor","Reflect","getOwnPropertyDescriptor","prototype","GrpcMethod","grpcStreamMethods","GrpcStreamMethod"],"mappings":"AAAA,sDAAsD;AACtD,YAAY;AACZ,gCAAgC;AAChC,iCAAiC;AACjC,mDAAmD;AAEnD,kBAAkB;;;;;;;;;;;IAwMLA,uBAAuB;eAAvBA;;IAxBGC,2BAA2B;eAA3BA;;;+BA/K6B;4BACpB;wBAGF;AA8GvBC,oBAAQ,CAAC,6BAA6B,GAAG;IACvCC,YAAWC,KAAW;QACpB,OAAO;YAAEC,SAASD,MAAME,OAAO,KAAK;YAAMC,OAAO,AAACH,MAAME,OAAO,KAAK,OAAQ;QAAI;IAClF;IACAE,UAASC,OAA2C;QAClD,OAAO,IAAIC,KAAKD,QAAQJ,OAAO,GAAG,OAAOI,QAAQF,KAAK,GAAG;IAC3D;AACF;AAEAL,oBAAQ,CAAC,0BAA0B,GAAG;IAAEC,YAAYQ,cAAM,CAACC,IAAI;IAAEJ,UAAUG,cAAM,CAACE,MAAM;AAAC;AAoDlF,SAASZ;IACd,OAAO,SAAUa,WAAqB;QACpC,MAAMC,cAAwB;YAC5B;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACD,KAAK,MAAMC,UAAUD,YAAa;YAChC,MAAME,aAAkBC,QAAQC,wBAAwB,CAACL,YAAYM,SAAS,EAAEJ;YAChFK,IAAAA,yBAAU,EAAC,cAAcL,QAAQF,YAAYM,SAAS,CAACJ,OAAO,EAAEA,QAAQC;QAC1E;QACA,MAAMK,oBAA8B,EAAE;QACtC,KAAK,MAAMN,UAAUM,kBAAmB;YACtC,MAAML,aAAkBC,QAAQC,wBAAwB,CAACL,YAAYM,SAAS,EAAEJ;YAChFO,IAAAA,+BAAgB,EAAC,cAAcP,QAAQF,YAAYM,SAAS,CAACJ,OAAO,EAAEA,QAAQC;QAChF;IACF;AACF;AAEO,MAAMjB,0BAA0B"}