// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: src/definitions/minerva/backtests.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BACKTESTS_SERVICE_NAME: function() {
        return BACKTESTS_SERVICE_NAME;
    },
    BacktestsControllerMethods: function() {
        return BacktestsControllerMethods;
    }
});
const _microservices = require("@nestjs/microservices");
const _protobufjs = require("protobufjs");
const _struct = require("../../../google/protobuf/struct");
_protobufjs.wrappers[".google.protobuf.Timestamp"] = {
    fromObject (value) {
        return {
            seconds: value.getTime() / 1000,
            nanos: value.getTime() % 1000 * 1e6
        };
    },
    toObject (message) {
        return new Date(message.seconds * 1000 + message.nanos / 1e6);
    }
};
_protobufjs.wrappers[".google.protobuf.Struct"] = {
    fromObject: _struct.Struct.wrap,
    toObject: _struct.Struct.unwrap
};
function BacktestsControllerMethods() {
    return function(constructor) {
        const grpcMethods = [
            "createBacktest",
            "updateBacktest",
            "getBacktestById",
            "listBacktestsByFlowId",
            "listBacktestsByStrategyId",
            "listBacktestsByUserId"
        ];
        for (const method of grpcMethods){
            const descriptor = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            (0, _microservices.GrpcMethod)("Backtests", method)(constructor.prototype[method], method, descriptor);
        }
        const grpcStreamMethods = [];
        for (const method of grpcStreamMethods){
            const descriptor = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
            (0, _microservices.GrpcStreamMethod)("Backtests", method)(constructor.prototype[method], method, descriptor);
        }
    };
}
const BACKTESTS_SERVICE_NAME = "Backtests";

//# sourceMappingURL=backtests.js.map