{"version":3,"sources":["../../../../../../../../../libs/protos/src/generated/nestjs/src/definitions/spotlight/orders.ts"],"sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.5.0\n//   protoc               v5.29.1\n// source: src/definitions/spotlight/orders.proto\n\n/* eslint-disable */\nimport { GrpcMethod, GrpcStreamMethod } from \"@nestjs/microservices\";\nimport { wrappers } from \"protobufjs\";\nimport { Observable } from \"rxjs\";\nimport { Struct } from \"../../../google/protobuf/struct\";\n\nexport interface OrderFee {\n  asset: string;\n  amount: number;\n}\n\nexport interface OrderResponse {\n  id: string;\n  userId: string;\n  orderId?: string | undefined;\n  strategyId: string;\n  flowId: string;\n  broker: string;\n  base: string;\n  quote: string;\n  type: string;\n  isPaper: boolean;\n  side: string;\n  status: string;\n  inOrderBook: boolean;\n  volumeTraded: number;\n  quoteVolumeTraded: number;\n  volume?: number | undefined;\n  quoteVolume?: number | undefined;\n  displayVolume?: number | undefined;\n  timeInForce?: string | undefined;\n  limitPrice?: number | undefined;\n  triggerPrice?: number | undefined;\n  trailingDelta?: number | undefined;\n  createdAt: Date | undefined;\n  pendingAt?: Date | undefined;\n  openedAt?: Date | undefined;\n  closedAt?: Date | undefined;\n  canceledAt?: Date | undefined;\n  rejectedAt?: Date | undefined;\n  errorCode?: string | undefined;\n  errorMessage?: string | undefined;\n  fees: OrderFee[];\n}\n\nexport interface OrdersListResponse {\n  orders: OrderResponse[];\n}\n\nexport interface DeleteOrderResponse {\n  id: string;\n}\n\nexport interface CreateOrder {\n  base: string;\n  quote: string;\n  side: string;\n  type: string;\n  volume?: number | undefined;\n  quoteVolume?: number | undefined;\n  displayVolume?: number | undefined;\n  timeInForce?: string | undefined;\n  limitPrice?: number | undefined;\n  trailingDelta?: number | undefined;\n  triggerPrice?: number | undefined;\n}\n\nexport interface CreateOrdersRequest {\n  userId: string;\n  strategyId: string;\n  flowId: string;\n  expireAt: Date | undefined;\n  isPaper: boolean;\n  broker: string;\n  orders: CreateOrder[];\n}\n\nexport interface CancelAllOrdersByStrategyIdRequest {\n  userId: string;\n  strategyId: string;\n  broker: string;\n}\n\nexport interface OrderByIdRequest {\n  id: string;\n  userId: string;\n}\n\nexport interface ListOrdersByStrategyIdRequest {\n  strategyId: string;\n  userId: string;\n  status?: string | undefined;\n  startDate?: Date | undefined;\n  endDate?: Date | undefined;\n}\n\nexport interface ListOrdersByUserIdRequest {\n  userId: string;\n  status?: string | undefined;\n  startDate?: Date | undefined;\n  endDate?: Date | undefined;\n}\n\nexport interface CandleRequest {\n  base: string;\n  quote: string;\n  broker: string;\n  openTime: Date | undefined;\n  closeTime: Date | undefined;\n  high: number;\n  low: number;\n  isPaper?: boolean | undefined;\n}\n\nexport interface ExtractHasOpenedOrdersRequest {\n  strategyIds: string[];\n}\n\nexport interface ExtractHasOpenedOrdersResponse {\n  strategyIds: string[];\n  base: string;\n  quote: string;\n  broker: string;\n}\n\nexport interface GetBudgetImpactRequest {\n  userId: string;\n  strategyId: string;\n  startDate: Date | undefined;\n  endDate: Date | undefined;\n}\n\nexport interface GetBudgetImpactByFrequencyRequest {\n  userId: string;\n  strategyId: string;\n  startDate: Date | undefined;\n  endDate: Date | undefined;\n  frequency: string;\n}\n\nexport interface ListBudgetsImpactsRequest {\n  budgets: GetBudgetImpactRequest[];\n  tradeableAssetsOnly: boolean;\n}\n\nexport interface GetProfitsAndLossesRequest {\n  userId: string;\n  strategyId: string;\n  startDate: Date | undefined;\n  endDate: Date | undefined;\n  frequency: string;\n}\n\nexport interface UpdateOrderRequest {\n  id: string;\n  userId: string;\n  status: string;\n  date: Date | undefined;\n  orderId?: string | undefined;\n  volumeTraded?: number | undefined;\n  quoteVolumeTraded?: number | undefined;\n  inOrderBook?: boolean | undefined;\n  errorCode?: string | undefined;\n  errorMessage?: string | undefined;\n}\n\nexport interface UpdateOrdersBulkRequest {\n  orders: UpdateOrderRequest[];\n}\n\nwrappers[\".google.protobuf.Timestamp\"] = {\n  fromObject(value: Date) {\n    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };\n  },\n  toObject(message: { seconds: number; nanos: number }) {\n    return new Date(message.seconds * 1000 + message.nanos / 1e6);\n  },\n} as any;\n\nexport interface OrdersClient {\n  createOrders(request: CreateOrdersRequest): Observable<OrdersListResponse>;\n\n  cancelAllOrdersByStrategyId(request: CancelAllOrdersByStrategyIdRequest): Observable<OrdersListResponse>;\n\n  getOrderById(request: OrderByIdRequest): Observable<OrderResponse>;\n\n  listOrdersByStrategyId(request: ListOrdersByStrategyIdRequest): Observable<OrdersListResponse>;\n\n  listOrdersByUserId(request: ListOrdersByUserIdRequest): Observable<OrdersListResponse>;\n\n  listPendingOrdersTriggeredByCandle(request: CandleRequest): Observable<OrdersListResponse>;\n\n  extractHasOpenedOrders(request: ExtractHasOpenedOrdersRequest): Observable<ExtractHasOpenedOrdersResponse>;\n\n  getBudgetImpact(request: GetBudgetImpactRequest): Observable<Struct>;\n\n  getBudgetImpactByFrequency(request: GetBudgetImpactByFrequencyRequest): Observable<Struct>;\n\n  listBudgetsImpacts(request: ListBudgetsImpactsRequest): Observable<Struct>;\n\n  getProfitsAndLosses(request: GetProfitsAndLossesRequest): Observable<Struct>;\n\n  updateOrder(request: UpdateOrderRequest): Observable<OrderResponse>;\n\n  updateOrdersBulk(request: UpdateOrdersBulkRequest): Observable<OrdersListResponse>;\n}\n\nexport interface OrdersController {\n  createOrders(\n    request: CreateOrdersRequest,\n  ): Promise<OrdersListResponse> | Observable<OrdersListResponse> | OrdersListResponse;\n\n  cancelAllOrdersByStrategyId(\n    request: CancelAllOrdersByStrategyIdRequest,\n  ): Promise<OrdersListResponse> | Observable<OrdersListResponse> | OrdersListResponse;\n\n  getOrderById(request: OrderByIdRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;\n\n  listOrdersByStrategyId(\n    request: ListOrdersByStrategyIdRequest,\n  ): Promise<OrdersListResponse> | Observable<OrdersListResponse> | OrdersListResponse;\n\n  listOrdersByUserId(\n    request: ListOrdersByUserIdRequest,\n  ): Promise<OrdersListResponse> | Observable<OrdersListResponse> | OrdersListResponse;\n\n  listPendingOrdersTriggeredByCandle(\n    request: CandleRequest,\n  ): Promise<OrdersListResponse> | Observable<OrdersListResponse> | OrdersListResponse;\n\n  extractHasOpenedOrders(\n    request: ExtractHasOpenedOrdersRequest,\n  ):\n    | Promise<ExtractHasOpenedOrdersResponse>\n    | Observable<ExtractHasOpenedOrdersResponse>\n    | ExtractHasOpenedOrdersResponse;\n\n  getBudgetImpact(request: GetBudgetImpactRequest): Promise<Struct> | Observable<Struct> | Struct;\n\n  getBudgetImpactByFrequency(request: GetBudgetImpactByFrequencyRequest): Promise<Struct> | Observable<Struct> | Struct;\n\n  listBudgetsImpacts(request: ListBudgetsImpactsRequest): Promise<Struct> | Observable<Struct> | Struct;\n\n  getProfitsAndLosses(request: GetProfitsAndLossesRequest): Promise<Struct> | Observable<Struct> | Struct;\n\n  updateOrder(request: UpdateOrderRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;\n\n  updateOrdersBulk(\n    request: UpdateOrdersBulkRequest,\n  ): Promise<OrdersListResponse> | Observable<OrdersListResponse> | OrdersListResponse;\n}\n\nexport function OrdersControllerMethods() {\n  return function (constructor: Function) {\n    const grpcMethods: string[] = [\n      \"createOrders\",\n      \"cancelAllOrdersByStrategyId\",\n      \"getOrderById\",\n      \"listOrdersByStrategyId\",\n      \"listOrdersByUserId\",\n      \"listPendingOrdersTriggeredByCandle\",\n      \"extractHasOpenedOrders\",\n      \"getBudgetImpact\",\n      \"getBudgetImpactByFrequency\",\n      \"listBudgetsImpacts\",\n      \"getProfitsAndLosses\",\n      \"updateOrder\",\n      \"updateOrdersBulk\",\n    ];\n    for (const method of grpcMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcMethod(\"Orders\", method)(constructor.prototype[method], method, descriptor);\n    }\n    const grpcStreamMethods: string[] = [];\n    for (const method of grpcStreamMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcStreamMethod(\"Orders\", method)(constructor.prototype[method], method, descriptor);\n    }\n  };\n}\n\nexport const ORDERS_SERVICE_NAME = \"Orders\";\n"],"names":["ORDERS_SERVICE_NAME","OrdersControllerMethods","wrappers","fromObject","value","seconds","getTime","nanos","toObject","message","Date","constructor","grpcMethods","method","descriptor","Reflect","getOwnPropertyDescriptor","prototype","GrpcMethod","grpcStreamMethods","GrpcStreamMethod"],"mappings":"AAAA,sDAAsD;AACtD,YAAY;AACZ,gCAAgC;AAChC,iCAAiC;AACjC,iDAAiD;AAEjD,kBAAkB;;;;;;;;;;;IAyRLA,mBAAmB;eAAnBA;;IA7BGC,uBAAuB;eAAvBA;;;+BA3P6B;4BACpB;AAwKzBC,oBAAQ,CAAC,6BAA6B,GAAG;IACvCC,YAAWC,KAAW;QACpB,OAAO;YAAEC,SAASD,MAAME,OAAO,KAAK;YAAMC,OAAO,AAACH,MAAME,OAAO,KAAK,OAAQ;QAAI;IAClF;IACAE,UAASC,OAA2C;QAClD,OAAO,IAAIC,KAAKD,QAAQJ,OAAO,GAAG,OAAOI,QAAQF,KAAK,GAAG;IAC3D;AACF;AA2EO,SAASN;IACd,OAAO,SAAUU,WAAqB;QACpC,MAAMC,cAAwB;YAC5B;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;SACD;QACD,KAAK,MAAMC,UAAUD,YAAa;YAChC,MAAME,aAAkBC,QAAQC,wBAAwB,CAACL,YAAYM,SAAS,EAAEJ;YAChFK,IAAAA,yBAAU,EAAC,UAAUL,QAAQF,YAAYM,SAAS,CAACJ,OAAO,EAAEA,QAAQC;QACtE;QACA,MAAMK,oBAA8B,EAAE;QACtC,KAAK,MAAMN,UAAUM,kBAAmB;YACtC,MAAML,aAAkBC,QAAQC,wBAAwB,CAACL,YAAYM,SAAS,EAAEJ;YAChFO,IAAAA,+BAAgB,EAAC,UAAUP,QAAQF,YAAYM,SAAS,CAACJ,OAAO,EAAEA,QAAQC;QAC5E;IACF;AACF;AAEO,MAAMd,sBAAsB"}