{"version":3,"sources":["../../../../../../../../../libs/protos/src/generated/nestjs/src/definitions/minerva/backtests.ts"],"sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.5.0\n//   protoc               v5.29.1\n// source: src/definitions/minerva/backtests.proto\n\n/* eslint-disable */\nimport { GrpcMethod, GrpcStreamMethod } from \"@nestjs/microservices\";\nimport { wrappers } from \"protobufjs\";\nimport { Observable } from \"rxjs\";\nimport { Struct } from \"../../../google/protobuf/struct\";\n\nexport interface BacktestResponse {\n  id: string;\n  startDate: Date | undefined;\n  baseBudget: number;\n  frequency: string;\n  runIfOrdersActive: boolean;\n  base: string;\n  quote: string;\n  broker: string;\n  createdAt: Date | undefined;\n  updatedAt: Date | undefined;\n  finishedAt?: Date | undefined;\n  isFinished: boolean;\n  trades: { [key: string]: any }[];\n  errors: { [key: string]: any }[];\n  metrics: { [key: string]: any } | undefined;\n}\n\nexport interface BacktestsListResponse {\n  backtests: BacktestResponse[];\n}\n\nexport interface BacktestByIdRequest {\n  userId: string;\n  id: string;\n}\n\nexport interface BacktestsByFlowIdRequest {\n  userId: string;\n  flowId: string;\n}\n\nexport interface BacktestsByStrategyIdRequest {\n  userId: string;\n  strategyId: string;\n}\n\nexport interface BacktestsByUserIdRequest {\n  userId: string;\n}\n\nexport interface CreateBacktestRequest {\n  userId: string;\n  flowId: string;\n  startDate: Date | undefined;\n  endDate: Date | undefined;\n  baseBudget: number;\n  frequency: string;\n  runIfOrdersActive: boolean;\n  base: string;\n  quote: string;\n  broker: string;\n}\n\nexport interface UpdateBacktestRequest {\n  id: string;\n  userId: string;\n  finishedAt: Date | undefined;\n  trades: { [key: string]: any }[];\n  errors: { [key: string]: any }[];\n  metrics: { [key: string]: any } | undefined;\n}\n\nwrappers[\".google.protobuf.Timestamp\"] = {\n  fromObject(value: Date) {\n    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };\n  },\n  toObject(message: { seconds: number; nanos: number }) {\n    return new Date(message.seconds * 1000 + message.nanos / 1e6);\n  },\n} as any;\n\nwrappers[\".google.protobuf.Struct\"] = { fromObject: Struct.wrap, toObject: Struct.unwrap } as any;\n\nexport interface BacktestsClient {\n  createBacktest(request: CreateBacktestRequest): Observable<BacktestResponse>;\n\n  updateBacktest(request: UpdateBacktestRequest): Observable<BacktestResponse>;\n\n  getBacktestById(request: BacktestByIdRequest): Observable<BacktestResponse>;\n\n  listBacktestsByFlowId(request: BacktestsByFlowIdRequest): Observable<BacktestsListResponse>;\n\n  listBacktestsByStrategyId(request: BacktestsByStrategyIdRequest): Observable<BacktestsListResponse>;\n\n  listBacktestsByUserId(request: BacktestsByUserIdRequest): Observable<BacktestsListResponse>;\n}\n\nexport interface BacktestsController {\n  createBacktest(\n    request: CreateBacktestRequest,\n  ): Promise<BacktestResponse> | Observable<BacktestResponse> | BacktestResponse;\n\n  updateBacktest(\n    request: UpdateBacktestRequest,\n  ): Promise<BacktestResponse> | Observable<BacktestResponse> | BacktestResponse;\n\n  getBacktestById(\n    request: BacktestByIdRequest,\n  ): Promise<BacktestResponse> | Observable<BacktestResponse> | BacktestResponse;\n\n  listBacktestsByFlowId(\n    request: BacktestsByFlowIdRequest,\n  ): Promise<BacktestsListResponse> | Observable<BacktestsListResponse> | BacktestsListResponse;\n\n  listBacktestsByStrategyId(\n    request: BacktestsByStrategyIdRequest,\n  ): Promise<BacktestsListResponse> | Observable<BacktestsListResponse> | BacktestsListResponse;\n\n  listBacktestsByUserId(\n    request: BacktestsByUserIdRequest,\n  ): Promise<BacktestsListResponse> | Observable<BacktestsListResponse> | BacktestsListResponse;\n}\n\nexport function BacktestsControllerMethods() {\n  return function (constructor: Function) {\n    const grpcMethods: string[] = [\n      \"createBacktest\",\n      \"updateBacktest\",\n      \"getBacktestById\",\n      \"listBacktestsByFlowId\",\n      \"listBacktestsByStrategyId\",\n      \"listBacktestsByUserId\",\n    ];\n    for (const method of grpcMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcMethod(\"Backtests\", method)(constructor.prototype[method], method, descriptor);\n    }\n    const grpcStreamMethods: string[] = [];\n    for (const method of grpcStreamMethods) {\n      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);\n      GrpcStreamMethod(\"Backtests\", method)(constructor.prototype[method], method, descriptor);\n    }\n  };\n}\n\nexport const BACKTESTS_SERVICE_NAME = \"Backtests\";\n"],"names":["BACKTESTS_SERVICE_NAME","BacktestsControllerMethods","wrappers","fromObject","value","seconds","getTime","nanos","toObject","message","Date","Struct","wrap","unwrap","constructor","grpcMethods","method","descriptor","Reflect","getOwnPropertyDescriptor","prototype","GrpcMethod","grpcStreamMethods","GrpcStreamMethod"],"mappings":"AAAA,sDAAsD;AACtD,YAAY;AACZ,gCAAgC;AAChC,iCAAiC;AACjC,kDAAkD;AAElD,kBAAkB;;;;;;;;;;;IA8ILA,sBAAsB;eAAtBA;;IAtBGC,0BAA0B;eAA1BA;;;+BAvH6B;4BACpB;wBAEF;AAiEvBC,oBAAQ,CAAC,6BAA6B,GAAG;IACvCC,YAAWC,KAAW;QACpB,OAAO;YAAEC,SAASD,MAAME,OAAO,KAAK;YAAMC,OAAO,AAACH,MAAME,OAAO,KAAK,OAAQ;QAAI;IAClF;IACAE,UAASC,OAA2C;QAClD,OAAO,IAAIC,KAAKD,QAAQJ,OAAO,GAAG,OAAOI,QAAQF,KAAK,GAAG;IAC3D;AACF;AAEAL,oBAAQ,CAAC,0BAA0B,GAAG;IAAEC,YAAYQ,cAAM,CAACC,IAAI;IAAEJ,UAAUG,cAAM,CAACE,MAAM;AAAC;AA0ClF,SAASZ;IACd,OAAO,SAAUa,WAAqB;QACpC,MAAMC,cAAwB;YAC5B;YACA;YACA;YACA;YACA;YACA;SACD;QACD,KAAK,MAAMC,UAAUD,YAAa;YAChC,MAAME,aAAkBC,QAAQC,wBAAwB,CAACL,YAAYM,SAAS,EAAEJ;YAChFK,IAAAA,yBAAU,EAAC,aAAaL,QAAQF,YAAYM,SAAS,CAACJ,OAAO,EAAEA,QAAQC;QACzE;QACA,MAAMK,oBAA8B,EAAE;QACtC,KAAK,MAAMN,UAAUM,kBAAmB;YACtC,MAAML,aAAkBC,QAAQC,wBAAwB,CAACL,YAAYM,SAAS,EAAEJ;YAChFO,IAAAA,+BAAgB,EAAC,aAAaP,QAAQF,YAAYM,SAAS,CAACJ,OAAO,EAAEA,QAAQC;QAC/E;IACF;AACF;AAEO,MAAMjB,yBAAyB"}