// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: google/protobuf/struct.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ListValue: function() {
        return ListValue;
    },
    NullValue: function() {
        return NullValue;
    },
    Struct: function() {
        return Struct;
    },
    Value: function() {
        return Value;
    }
});
const _protobufjs = require("protobufjs");
var NullValue = /*#__PURE__*/ function(NullValue) {
    /** NULL_VALUE - Null value. */ NullValue[NullValue["NULL_VALUE"] = 0] = "NULL_VALUE";
    NullValue[NullValue["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
    return NullValue;
}({});
function createBaseStruct() {
    return {
        fields: {}
    };
}
const Struct = {
    wrap (object) {
        const struct = createBaseStruct();
        if (object !== undefined) {
            for (const key of Object.keys(object)){
                struct.fields[key] = Value.wrap(object[key]);
            }
        }
        return struct;
    },
    unwrap (message) {
        const object = {};
        if (message.fields) {
            for (const key of Object.keys(message.fields)){
                object[key] = Value.unwrap(message.fields[key]);
            }
        }
        return object;
    }
};
function createBaseValue() {
    return {};
}
const Value = {
    wrap (value) {
        const result = {};
        if (value === null) {
            result.nullValue = 0;
        } else if (typeof value === "boolean") {
            result.boolValue = value;
        } else if (typeof value === "number") {
            result.numberValue = value;
        } else if (typeof value === "string") {
            result.stringValue = value;
        } else if (globalThis.Array.isArray(value)) {
            result.listValue = ListValue.wrap(value);
        } else if (typeof value === "object") {
            result.structValue = Struct.wrap(value);
        } else if (typeof value !== "undefined") {
            throw new globalThis.Error("Unsupported any value type: " + typeof value);
        }
        return result;
    },
    unwrap (message) {
        if ((message == null ? void 0 : message.hasOwnProperty("stringValue")) && message.stringValue !== undefined) {
            return message.stringValue;
        } else if ((message == null ? void 0 : message.hasOwnProperty("numberValue")) && (message == null ? void 0 : message.numberValue) !== undefined) {
            return message.numberValue;
        } else if ((message == null ? void 0 : message.hasOwnProperty("boolValue")) && (message == null ? void 0 : message.boolValue) !== undefined) {
            return message.boolValue;
        } else if ((message == null ? void 0 : message.hasOwnProperty("structValue")) && (message == null ? void 0 : message.structValue) !== undefined) {
            return Struct.unwrap(message.structValue);
        } else if ((message == null ? void 0 : message.hasOwnProperty("listValue")) && (message == null ? void 0 : message.listValue) !== undefined) {
            return ListValue.unwrap(message.listValue);
        } else if ((message == null ? void 0 : message.hasOwnProperty("nullValue")) && (message == null ? void 0 : message.nullValue) !== undefined) {
            return null;
        }
        return undefined;
    }
};
function createBaseListValue() {
    return {
        values: []
    };
}
const ListValue = {
    wrap (array) {
        const result = createBaseListValue();
        result.values = (array != null ? array : []).map(Value.wrap);
        return result;
    },
    unwrap (message) {
        if ((message == null ? void 0 : message.hasOwnProperty("values")) && globalThis.Array.isArray(message.values)) {
            return message.values.map(Value.unwrap);
        } else {
            return message;
        }
    }
};
_protobufjs.wrappers[".google.protobuf.Struct"] = {
    fromObject: Struct.wrap,
    toObject: Struct.unwrap
};

//# sourceMappingURL=struct.js.map