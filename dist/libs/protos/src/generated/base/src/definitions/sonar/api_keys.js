// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: src/definitions/sonar/api_keys.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ApiKeyResponse: function() {
        return ApiKeyResponse;
    },
    ApiKeysClient: function() {
        return ApiKeysClient;
    },
    ApiKeysListResponse: function() {
        return ApiKeysListResponse;
    },
    ApiKeysService: function() {
        return ApiKeysService;
    },
    CreateApiKeyRequest: function() {
        return CreateApiKeyRequest;
    },
    DeleteApiKeyRequest: function() {
        return DeleteApiKeyRequest;
    },
    Ed25519KeyResponse: function() {
        return Ed25519KeyResponse;
    },
    GetApiKeyRequest: function() {
        return GetApiKeyRequest;
    },
    GetValidBrokersRequest: function() {
        return GetValidBrokersRequest;
    },
    ListApiKeysByUserIdRequest: function() {
        return ListApiKeysByUserIdRequest;
    },
    ValidBrokersResponse: function() {
        return ValidBrokersResponse;
    }
});
const _wire = require("@bufbuild/protobuf/wire");
const _grpcjs = require("@grpc/grpc-js");
const _empty = require("../../../google/protobuf/empty");
function createBaseCreateApiKeyRequest() {
    return {
        userId: "",
        apiKey: "",
        apiSecret: "",
        broker: "",
        name: undefined
    };
}
const CreateApiKeyRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.apiKey !== "") {
            writer.uint32(18).string(message.apiKey);
        }
        if (message.apiSecret !== "") {
            writer.uint32(26).string(message.apiSecret);
        }
        if (message.broker !== "") {
            writer.uint32(34).string(message.broker);
        }
        if (message.name !== undefined) {
            writer.uint32(42).string(message.name);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateApiKeyRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.apiKey = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.apiSecret = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.name = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : "",
            apiSecret: isSet(object.apiSecret) ? globalThis.String(object.apiSecret) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.apiKey !== "") {
            obj.apiKey = message.apiKey;
        }
        if (message.apiSecret !== "") {
            obj.apiSecret = message.apiSecret;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        return obj;
    },
    create (base) {
        return CreateApiKeyRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseCreateApiKeyRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_apiKey;
        message.apiKey = (_object_apiKey = object.apiKey) != null ? _object_apiKey : "";
        var _object_apiSecret;
        message.apiSecret = (_object_apiSecret = object.apiSecret) != null ? _object_apiSecret : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        var _object_name;
        message.name = (_object_name = object.name) != null ? _object_name : undefined;
        return message;
    }
};
function createBaseDeleteApiKeyRequest() {
    return {
        userId: "",
        id: ""
    };
}
const DeleteApiKeyRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteApiKeyRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create (base) {
        return DeleteApiKeyRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseDeleteApiKeyRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        return message;
    }
};
function createBaseGetApiKeyRequest() {
    return {
        userId: "",
        broker: ""
    };
}
const GetApiKeyRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.broker !== "") {
            writer.uint32(18).string(message.broker);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetApiKeyRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        return obj;
    },
    create (base) {
        return GetApiKeyRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseGetApiKeyRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        return message;
    }
};
function createBaseListApiKeysByUserIdRequest() {
    return {
        userId: ""
    };
}
const ListApiKeysByUserIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListApiKeysByUserIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create (base) {
        return ListApiKeysByUserIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseListApiKeysByUserIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        return message;
    }
};
function createBaseEd25519KeyResponse() {
    return {
        publicKey: ""
    };
}
const Ed25519KeyResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.publicKey !== "") {
            writer.uint32(10).string(message.publicKey);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEd25519KeyResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.publicKey = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            publicKey: isSet(object.publicKey) ? globalThis.String(object.publicKey) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.publicKey !== "") {
            obj.publicKey = message.publicKey;
        }
        return obj;
    },
    create (base) {
        return Ed25519KeyResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseEd25519KeyResponse();
        var _object_publicKey;
        message.publicKey = (_object_publicKey = object.publicKey) != null ? _object_publicKey : "";
        return message;
    }
};
function createBaseApiKeyResponse() {
    return {
        id: "",
        userId: "",
        apiKey: "",
        broker: "",
        createdAt: "",
        name: undefined
    };
}
const ApiKeyResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.apiKey !== "") {
            writer.uint32(26).string(message.apiKey);
        }
        if (message.broker !== "") {
            writer.uint32(34).string(message.broker);
        }
        if (message.createdAt !== "") {
            writer.uint32(42).string(message.createdAt);
        }
        if (message.name !== undefined) {
            writer.uint32(50).string(message.name);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApiKeyResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.apiKey = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.createdAt = reader.string();
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 50) {
                            break;
                        }
                        message.name = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.apiKey !== "") {
            obj.apiKey = message.apiKey;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        return obj;
    },
    create (base) {
        return ApiKeyResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseApiKeyResponse();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_apiKey;
        message.apiKey = (_object_apiKey = object.apiKey) != null ? _object_apiKey : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        var _object_createdAt;
        message.createdAt = (_object_createdAt = object.createdAt) != null ? _object_createdAt : "";
        var _object_name;
        message.name = (_object_name = object.name) != null ? _object_name : undefined;
        return message;
    }
};
function createBaseApiKeysListResponse() {
    return {
        apiKeys: []
    };
}
const ApiKeysListResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.apiKeys){
            ApiKeyResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApiKeysListResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.apiKeys.push(ApiKeyResponse.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            apiKeys: globalThis.Array.isArray(object == null ? void 0 : object.apiKeys) ? object.apiKeys.map((e)=>ApiKeyResponse.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_apiKeys;
        const obj = {};
        if ((_message_apiKeys = message.apiKeys) == null ? void 0 : _message_apiKeys.length) {
            obj.apiKeys = message.apiKeys.map((e)=>ApiKeyResponse.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return ApiKeysListResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_apiKeys;
        const message = createBaseApiKeysListResponse();
        message.apiKeys = ((_object_apiKeys = object.apiKeys) == null ? void 0 : _object_apiKeys.map((e)=>ApiKeyResponse.fromPartial(e))) || [];
        return message;
    }
};
function createBaseGetValidBrokersRequest() {
    return {
        userId: ""
    };
}
const GetValidBrokersRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetValidBrokersRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create (base) {
        return GetValidBrokersRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseGetValidBrokersRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        return message;
    }
};
function createBaseValidBrokersResponse() {
    return {
        brokers: []
    };
}
const ValidBrokersResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.brokers){
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValidBrokersResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.brokers.push(reader.string());
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            brokers: globalThis.Array.isArray(object == null ? void 0 : object.brokers) ? object.brokers.map((e)=>globalThis.String(e)) : []
        };
    },
    toJSON (message) {
        var _message_brokers;
        const obj = {};
        if ((_message_brokers = message.brokers) == null ? void 0 : _message_brokers.length) {
            obj.brokers = message.brokers;
        }
        return obj;
    },
    create (base) {
        return ValidBrokersResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_brokers;
        const message = createBaseValidBrokersResponse();
        message.brokers = ((_object_brokers = object.brokers) == null ? void 0 : _object_brokers.map((e)=>e)) || [];
        return message;
    }
};
const ApiKeysService = {
    generateEd25519KeyPair: {
        path: "/sonar.ApiKeys/GenerateEd25519KeyPair",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(_empty.Empty.encode(value).finish()),
        requestDeserialize: (value)=>_empty.Empty.decode(value),
        responseSerialize: (value)=>Buffer.from(Ed25519KeyResponse.encode(value).finish()),
        responseDeserialize: (value)=>Ed25519KeyResponse.decode(value)
    },
    createApiKey: {
        path: "/sonar.ApiKeys/CreateApiKey",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(CreateApiKeyRequest.encode(value).finish()),
        requestDeserialize: (value)=>CreateApiKeyRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(ApiKeyResponse.encode(value).finish()),
        responseDeserialize: (value)=>ApiKeyResponse.decode(value)
    },
    deleteApiKey: {
        path: "/sonar.ApiKeys/DeleteApiKey",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(DeleteApiKeyRequest.encode(value).finish()),
        requestDeserialize: (value)=>DeleteApiKeyRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(_empty.Empty.encode(value).finish()),
        responseDeserialize: (value)=>_empty.Empty.decode(value)
    },
    getApiKey: {
        path: "/sonar.ApiKeys/GetApiKey",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(GetApiKeyRequest.encode(value).finish()),
        requestDeserialize: (value)=>GetApiKeyRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(ApiKeyResponse.encode(value).finish()),
        responseDeserialize: (value)=>ApiKeyResponse.decode(value)
    },
    listApiKeysByUserId: {
        path: "/sonar.ApiKeys/ListApiKeysByUserId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ListApiKeysByUserIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>ListApiKeysByUserIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(ApiKeysListResponse.encode(value).finish()),
        responseDeserialize: (value)=>ApiKeysListResponse.decode(value)
    },
    getValidBrokers: {
        path: "/sonar.ApiKeys/GetValidBrokers",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(GetValidBrokersRequest.encode(value).finish()),
        requestDeserialize: (value)=>GetValidBrokersRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(ValidBrokersResponse.encode(value).finish()),
        responseDeserialize: (value)=>ValidBrokersResponse.decode(value)
    }
};
const ApiKeysClient = (0, _grpcjs.makeGenericClientConstructor)(ApiKeysService, "sonar.ApiKeys");
function isSet(value) {
    return value !== null && value !== undefined;
}

//# sourceMappingURL=api_keys.js.map