// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: src/definitions/billy/articles.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ArticleResponse: function() {
        return ArticleResponse;
    },
    ArticlesClient: function() {
        return ArticlesClient;
    },
    ArticlesListResponse: function() {
        return ArticlesListResponse;
    },
    ArticlesService: function() {
        return ArticlesService;
    },
    CreateArticleRequest: function() {
        return CreateArticleRequest;
    },
    CreateArticlesListRequest: function() {
        return CreateArticlesListRequest;
    }
});
const _wire = require("@bufbuild/protobuf/wire");
const _grpcjs = require("@grpc/grpc-js");
const _timestamp = require("../../../google/protobuf/timestamp");
function createBaseArticleResponse() {
    return {
        id: "",
        title: "",
        text: "",
        url: "",
        updatedAt: undefined,
        publicationDate: undefined,
        createdAt: undefined
    };
}
const ArticleResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.text !== "") {
            writer.uint32(26).string(message.text);
        }
        if (message.url !== "") {
            writer.uint32(34).string(message.url);
        }
        if (message.updatedAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(42).fork()).join();
        }
        if (message.publicationDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.publicationDate), writer.uint32(50).fork()).join();
        }
        if (message.createdAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArticleResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.title = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.text = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.url = reader.string();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.updatedAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 50) {
                            break;
                        }
                        message.publicationDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 58) {
                            break;
                        }
                        message.createdAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            publicationDate: isSet(object.publicationDate) ? fromJsonTimestamp(object.publicationDate) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = message.updatedAt.toISOString();
        }
        if (message.publicationDate !== undefined) {
            obj.publicationDate = message.publicationDate.toISOString();
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        return obj;
    },
    create (base) {
        return ArticleResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseArticleResponse();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_title;
        message.title = (_object_title = object.title) != null ? _object_title : "";
        var _object_text;
        message.text = (_object_text = object.text) != null ? _object_text : "";
        var _object_url;
        message.url = (_object_url = object.url) != null ? _object_url : "";
        var _object_updatedAt;
        message.updatedAt = (_object_updatedAt = object.updatedAt) != null ? _object_updatedAt : undefined;
        var _object_publicationDate;
        message.publicationDate = (_object_publicationDate = object.publicationDate) != null ? _object_publicationDate : undefined;
        var _object_createdAt;
        message.createdAt = (_object_createdAt = object.createdAt) != null ? _object_createdAt : undefined;
        return message;
    }
};
function createBaseCreateArticleRequest() {
    return {
        title: "",
        text: "",
        url: "",
        publicationDate: undefined
    };
}
const CreateArticleRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        if (message.url !== "") {
            writer.uint32(26).string(message.url);
        }
        if (message.publicationDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.publicationDate), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateArticleRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.title = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.text = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.url = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.publicationDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            publicationDate: isSet(object.publicationDate) ? fromJsonTimestamp(object.publicationDate) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.publicationDate !== undefined) {
            obj.publicationDate = message.publicationDate.toISOString();
        }
        return obj;
    },
    create (base) {
        return CreateArticleRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseCreateArticleRequest();
        var _object_title;
        message.title = (_object_title = object.title) != null ? _object_title : "";
        var _object_text;
        message.text = (_object_text = object.text) != null ? _object_text : "";
        var _object_url;
        message.url = (_object_url = object.url) != null ? _object_url : "";
        var _object_publicationDate;
        message.publicationDate = (_object_publicationDate = object.publicationDate) != null ? _object_publicationDate : undefined;
        return message;
    }
};
function createBaseCreateArticlesListRequest() {
    return {
        articles: []
    };
}
const CreateArticlesListRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.articles){
            CreateArticleRequest.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateArticlesListRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.articles.push(CreateArticleRequest.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            articles: globalThis.Array.isArray(object == null ? void 0 : object.articles) ? object.articles.map((e)=>CreateArticleRequest.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_articles;
        const obj = {};
        if ((_message_articles = message.articles) == null ? void 0 : _message_articles.length) {
            obj.articles = message.articles.map((e)=>CreateArticleRequest.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return CreateArticlesListRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_articles;
        const message = createBaseCreateArticlesListRequest();
        message.articles = ((_object_articles = object.articles) == null ? void 0 : _object_articles.map((e)=>CreateArticleRequest.fromPartial(e))) || [];
        return message;
    }
};
function createBaseArticlesListResponse() {
    return {
        articles: []
    };
}
const ArticlesListResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.articles){
            ArticleResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArticlesListResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.articles.push(ArticleResponse.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            articles: globalThis.Array.isArray(object == null ? void 0 : object.articles) ? object.articles.map((e)=>ArticleResponse.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_articles;
        const obj = {};
        if ((_message_articles = message.articles) == null ? void 0 : _message_articles.length) {
            obj.articles = message.articles.map((e)=>ArticleResponse.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return ArticlesListResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_articles;
        const message = createBaseArticlesListResponse();
        message.articles = ((_object_articles = object.articles) == null ? void 0 : _object_articles.map((e)=>ArticleResponse.fromPartial(e))) || [];
        return message;
    }
};
const ArticlesService = {
    createArticlesList: {
        path: "/billy.Articles/CreateArticlesList",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(CreateArticlesListRequest.encode(value).finish()),
        requestDeserialize: (value)=>CreateArticlesListRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(ArticlesListResponse.encode(value).finish()),
        responseDeserialize: (value)=>ArticlesListResponse.decode(value)
    }
};
const ArticlesClient = (0, _grpcjs.makeGenericClientConstructor)(ArticlesService, "billy.Articles");
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = date.getTime() % 1000 * 1000000;
    return {
        seconds,
        nanos
    };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    } else if (typeof o === "string") {
        return new globalThis.Date(o);
    } else {
        return fromTimestamp(_timestamp.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

//# sourceMappingURL=articles.js.map