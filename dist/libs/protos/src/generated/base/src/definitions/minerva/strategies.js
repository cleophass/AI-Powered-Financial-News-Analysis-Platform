// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: src/definitions/minerva/strategies.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CreateStrategyRequest: function() {
        return CreateStrategyRequest;
    },
    ListActiveStrategiesRequest: function() {
        return ListActiveStrategiesRequest;
    },
    PairBroker: function() {
        return PairBroker;
    },
    PairRatio: function() {
        return PairRatio;
    },
    RRuleOptions: function() {
        return RRuleOptions;
    },
    SetStrategyActivePairsRequest: function() {
        return SetStrategyActivePairsRequest;
    },
    SetStrategyDraftPairsRequest: function() {
        return SetStrategyDraftPairsRequest;
    },
    StrategiesByUserIdRequest: function() {
        return StrategiesByUserIdRequest;
    },
    StrategiesClient: function() {
        return StrategiesClient;
    },
    StrategiesListResponse: function() {
        return StrategiesListResponse;
    },
    StrategiesService: function() {
        return StrategiesService;
    },
    StrategyByIdRequest: function() {
        return StrategyByIdRequest;
    },
    StrategyResponse: function() {
        return StrategyResponse;
    },
    UpdateStrategyRequest: function() {
        return UpdateStrategyRequest;
    }
});
const _wire = require("@bufbuild/protobuf/wire");
const _grpcjs = require("@grpc/grpc-js");
const _empty = require("../../../google/protobuf/empty");
const _struct = require("../../../google/protobuf/struct");
const _timestamp = require("../../../google/protobuf/timestamp");
function createBasePairBroker() {
    return {
        base: "",
        quote: "",
        broker: ""
    };
}
const PairBroker = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.base !== "") {
            writer.uint32(10).string(message.base);
        }
        if (message.quote !== "") {
            writer.uint32(18).string(message.quote);
        }
        if (message.broker !== "") {
            writer.uint32(26).string(message.broker);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePairBroker();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.base = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.quote = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.quote !== "") {
            obj.quote = message.quote;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        return obj;
    },
    create (base) {
        return PairBroker.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBasePairBroker();
        var _object_base;
        message.base = (_object_base = object.base) != null ? _object_base : "";
        var _object_quote;
        message.quote = (_object_quote = object.quote) != null ? _object_quote : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        return message;
    }
};
function createBasePairRatio() {
    return {
        base: "",
        quote: "",
        broker: "",
        quoteRatio: 0,
        baseRatio: 0
    };
}
const PairRatio = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.base !== "") {
            writer.uint32(10).string(message.base);
        }
        if (message.quote !== "") {
            writer.uint32(18).string(message.quote);
        }
        if (message.broker !== "") {
            writer.uint32(26).string(message.broker);
        }
        if (message.quoteRatio !== 0) {
            writer.uint32(33).double(message.quoteRatio);
        }
        if (message.baseRatio !== 0) {
            writer.uint32(41).double(message.baseRatio);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePairRatio();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.base = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.quote = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 33) {
                            break;
                        }
                        message.quoteRatio = reader.double();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 41) {
                            break;
                        }
                        message.baseRatio = reader.double();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            quoteRatio: isSet(object.quoteRatio) ? globalThis.Number(object.quoteRatio) : 0,
            baseRatio: isSet(object.baseRatio) ? globalThis.Number(object.baseRatio) : 0
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.quote !== "") {
            obj.quote = message.quote;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if (message.quoteRatio !== 0) {
            obj.quoteRatio = message.quoteRatio;
        }
        if (message.baseRatio !== 0) {
            obj.baseRatio = message.baseRatio;
        }
        return obj;
    },
    create (base) {
        return PairRatio.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBasePairRatio();
        var _object_base;
        message.base = (_object_base = object.base) != null ? _object_base : "";
        var _object_quote;
        message.quote = (_object_quote = object.quote) != null ? _object_quote : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        var _object_quoteRatio;
        message.quoteRatio = (_object_quoteRatio = object.quoteRatio) != null ? _object_quoteRatio : 0;
        var _object_baseRatio;
        message.baseRatio = (_object_baseRatio = object.baseRatio) != null ? _object_baseRatio : 0;
        return message;
    }
};
function createBaseRRuleOptions() {
    return {
        frequency: 0,
        interval: 0,
        dtstart: undefined,
        bysetpos: [],
        bymonth: [],
        bymonthday: [],
        byyearday: [],
        byweekno: [],
        byweekday: [],
        byhour: [],
        byminute: []
    };
}
const RRuleOptions = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.frequency !== 0) {
            writer.uint32(8).int32(message.frequency);
        }
        if (message.interval !== 0) {
            writer.uint32(16).int32(message.interval);
        }
        if (message.dtstart !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.dtstart), writer.uint32(26).fork()).join();
        }
        writer.uint32(34).fork();
        for (const v of message.bysetpos){
            writer.int32(v);
        }
        writer.join();
        writer.uint32(42).fork();
        for (const v of message.bymonth){
            writer.int32(v);
        }
        writer.join();
        writer.uint32(50).fork();
        for (const v of message.bymonthday){
            writer.int32(v);
        }
        writer.join();
        writer.uint32(58).fork();
        for (const v of message.byyearday){
            writer.int32(v);
        }
        writer.join();
        writer.uint32(66).fork();
        for (const v of message.byweekno){
            writer.int32(v);
        }
        writer.join();
        writer.uint32(74).fork();
        for (const v of message.byweekday){
            writer.int32(v);
        }
        writer.join();
        writer.uint32(82).fork();
        for (const v of message.byhour){
            writer.int32(v);
        }
        writer.join();
        writer.uint32(90).fork();
        for (const v of message.byminute){
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRRuleOptions();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 8) {
                            break;
                        }
                        message.frequency = reader.int32();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 16) {
                            break;
                        }
                        message.interval = reader.int32();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.dtstart = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 4:
                    {
                        if (tag === 32) {
                            message.bysetpos.push(reader.int32());
                            continue;
                        }
                        if (tag === 34) {
                            const end2 = reader.uint32() + reader.pos;
                            while(reader.pos < end2){
                                message.bysetpos.push(reader.int32());
                            }
                            continue;
                        }
                        break;
                    }
                case 5:
                    {
                        if (tag === 40) {
                            message.bymonth.push(reader.int32());
                            continue;
                        }
                        if (tag === 42) {
                            const end2 = reader.uint32() + reader.pos;
                            while(reader.pos < end2){
                                message.bymonth.push(reader.int32());
                            }
                            continue;
                        }
                        break;
                    }
                case 6:
                    {
                        if (tag === 48) {
                            message.bymonthday.push(reader.int32());
                            continue;
                        }
                        if (tag === 50) {
                            const end2 = reader.uint32() + reader.pos;
                            while(reader.pos < end2){
                                message.bymonthday.push(reader.int32());
                            }
                            continue;
                        }
                        break;
                    }
                case 7:
                    {
                        if (tag === 56) {
                            message.byyearday.push(reader.int32());
                            continue;
                        }
                        if (tag === 58) {
                            const end2 = reader.uint32() + reader.pos;
                            while(reader.pos < end2){
                                message.byyearday.push(reader.int32());
                            }
                            continue;
                        }
                        break;
                    }
                case 8:
                    {
                        if (tag === 64) {
                            message.byweekno.push(reader.int32());
                            continue;
                        }
                        if (tag === 66) {
                            const end2 = reader.uint32() + reader.pos;
                            while(reader.pos < end2){
                                message.byweekno.push(reader.int32());
                            }
                            continue;
                        }
                        break;
                    }
                case 9:
                    {
                        if (tag === 72) {
                            message.byweekday.push(reader.int32());
                            continue;
                        }
                        if (tag === 74) {
                            const end2 = reader.uint32() + reader.pos;
                            while(reader.pos < end2){
                                message.byweekday.push(reader.int32());
                            }
                            continue;
                        }
                        break;
                    }
                case 10:
                    {
                        if (tag === 80) {
                            message.byhour.push(reader.int32());
                            continue;
                        }
                        if (tag === 82) {
                            const end2 = reader.uint32() + reader.pos;
                            while(reader.pos < end2){
                                message.byhour.push(reader.int32());
                            }
                            continue;
                        }
                        break;
                    }
                case 11:
                    {
                        if (tag === 88) {
                            message.byminute.push(reader.int32());
                            continue;
                        }
                        if (tag === 90) {
                            const end2 = reader.uint32() + reader.pos;
                            while(reader.pos < end2){
                                message.byminute.push(reader.int32());
                            }
                            continue;
                        }
                        break;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            frequency: isSet(object.frequency) ? globalThis.Number(object.frequency) : 0,
            interval: isSet(object.interval) ? globalThis.Number(object.interval) : 0,
            dtstart: isSet(object.dtstart) ? fromJsonTimestamp(object.dtstart) : undefined,
            bysetpos: globalThis.Array.isArray(object == null ? void 0 : object.bysetpos) ? object.bysetpos.map((e)=>globalThis.Number(e)) : [],
            bymonth: globalThis.Array.isArray(object == null ? void 0 : object.bymonth) ? object.bymonth.map((e)=>globalThis.Number(e)) : [],
            bymonthday: globalThis.Array.isArray(object == null ? void 0 : object.bymonthday) ? object.bymonthday.map((e)=>globalThis.Number(e)) : [],
            byyearday: globalThis.Array.isArray(object == null ? void 0 : object.byyearday) ? object.byyearday.map((e)=>globalThis.Number(e)) : [],
            byweekno: globalThis.Array.isArray(object == null ? void 0 : object.byweekno) ? object.byweekno.map((e)=>globalThis.Number(e)) : [],
            byweekday: globalThis.Array.isArray(object == null ? void 0 : object.byweekday) ? object.byweekday.map((e)=>globalThis.Number(e)) : [],
            byhour: globalThis.Array.isArray(object == null ? void 0 : object.byhour) ? object.byhour.map((e)=>globalThis.Number(e)) : [],
            byminute: globalThis.Array.isArray(object == null ? void 0 : object.byminute) ? object.byminute.map((e)=>globalThis.Number(e)) : []
        };
    },
    toJSON (message) {
        var _message_bysetpos, _message_bymonth, _message_bymonthday, _message_byyearday, _message_byweekno, _message_byweekday, _message_byhour, _message_byminute;
        const obj = {};
        if (message.frequency !== 0) {
            obj.frequency = Math.round(message.frequency);
        }
        if (message.interval !== 0) {
            obj.interval = Math.round(message.interval);
        }
        if (message.dtstart !== undefined) {
            obj.dtstart = message.dtstart.toISOString();
        }
        if ((_message_bysetpos = message.bysetpos) == null ? void 0 : _message_bysetpos.length) {
            obj.bysetpos = message.bysetpos.map((e)=>Math.round(e));
        }
        if ((_message_bymonth = message.bymonth) == null ? void 0 : _message_bymonth.length) {
            obj.bymonth = message.bymonth.map((e)=>Math.round(e));
        }
        if ((_message_bymonthday = message.bymonthday) == null ? void 0 : _message_bymonthday.length) {
            obj.bymonthday = message.bymonthday.map((e)=>Math.round(e));
        }
        if ((_message_byyearday = message.byyearday) == null ? void 0 : _message_byyearday.length) {
            obj.byyearday = message.byyearday.map((e)=>Math.round(e));
        }
        if ((_message_byweekno = message.byweekno) == null ? void 0 : _message_byweekno.length) {
            obj.byweekno = message.byweekno.map((e)=>Math.round(e));
        }
        if ((_message_byweekday = message.byweekday) == null ? void 0 : _message_byweekday.length) {
            obj.byweekday = message.byweekday.map((e)=>Math.round(e));
        }
        if ((_message_byhour = message.byhour) == null ? void 0 : _message_byhour.length) {
            obj.byhour = message.byhour.map((e)=>Math.round(e));
        }
        if ((_message_byminute = message.byminute) == null ? void 0 : _message_byminute.length) {
            obj.byminute = message.byminute.map((e)=>Math.round(e));
        }
        return obj;
    },
    create (base) {
        return RRuleOptions.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_bysetpos, _object_bymonth, _object_bymonthday, _object_byyearday, _object_byweekno, _object_byweekday, _object_byhour, _object_byminute;
        const message = createBaseRRuleOptions();
        var _object_frequency;
        message.frequency = (_object_frequency = object.frequency) != null ? _object_frequency : 0;
        var _object_interval;
        message.interval = (_object_interval = object.interval) != null ? _object_interval : 0;
        var _object_dtstart;
        message.dtstart = (_object_dtstart = object.dtstart) != null ? _object_dtstart : undefined;
        message.bysetpos = ((_object_bysetpos = object.bysetpos) == null ? void 0 : _object_bysetpos.map((e)=>e)) || [];
        message.bymonth = ((_object_bymonth = object.bymonth) == null ? void 0 : _object_bymonth.map((e)=>e)) || [];
        message.bymonthday = ((_object_bymonthday = object.bymonthday) == null ? void 0 : _object_bymonthday.map((e)=>e)) || [];
        message.byyearday = ((_object_byyearday = object.byyearday) == null ? void 0 : _object_byyearday.map((e)=>e)) || [];
        message.byweekno = ((_object_byweekno = object.byweekno) == null ? void 0 : _object_byweekno.map((e)=>e)) || [];
        message.byweekday = ((_object_byweekday = object.byweekday) == null ? void 0 : _object_byweekday.map((e)=>e)) || [];
        message.byhour = ((_object_byhour = object.byhour) == null ? void 0 : _object_byhour.map((e)=>e)) || [];
        message.byminute = ((_object_byminute = object.byminute) == null ? void 0 : _object_byminute.map((e)=>e)) || [];
        return message;
    }
};
function createBaseStrategyResponse() {
    return {
        id: "",
        userId: "",
        name: "",
        type: "",
        isActive: false,
        baseBudget: undefined,
        lastBudgetChange: undefined,
        recurrence: undefined,
        recurrenceDates: [],
        runIfOrdersActive: undefined,
        stopIfError: undefined,
        maxExecutionDelay: undefined,
        cancelAllOrdersBeforeExecution: undefined,
        deployedAt: undefined,
        createdAt: undefined,
        updatedAt: undefined,
        activePairs: [],
        draftPairs: []
    };
}
const StrategyResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.type !== "") {
            writer.uint32(34).string(message.type);
        }
        if (message.isActive !== false) {
            writer.uint32(40).bool(message.isActive);
        }
        if (message.baseBudget !== undefined) {
            _struct.Struct.encode(_struct.Struct.wrap(message.baseBudget), writer.uint32(50).fork()).join();
        }
        if (message.lastBudgetChange !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.lastBudgetChange), writer.uint32(58).fork()).join();
        }
        if (message.recurrence !== undefined) {
            RRuleOptions.encode(message.recurrence, writer.uint32(66).fork()).join();
        }
        for (const v of message.recurrenceDates){
            _timestamp.Timestamp.encode(toTimestamp(v), writer.uint32(74).fork()).join();
        }
        if (message.runIfOrdersActive !== undefined) {
            writer.uint32(80).bool(message.runIfOrdersActive);
        }
        if (message.stopIfError !== undefined) {
            writer.uint32(88).bool(message.stopIfError);
        }
        if (message.maxExecutionDelay !== undefined) {
            writer.uint32(96).int32(message.maxExecutionDelay);
        }
        if (message.cancelAllOrdersBeforeExecution !== undefined) {
            writer.uint32(104).bool(message.cancelAllOrdersBeforeExecution);
        }
        if (message.deployedAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.deployedAt), writer.uint32(114).fork()).join();
        }
        if (message.createdAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(122).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(130).fork()).join();
        }
        for (const v of message.activePairs){
            PairRatio.encode(v, writer.uint32(138).fork()).join();
        }
        for (const v of message.draftPairs){
            PairBroker.encode(v, writer.uint32(146).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStrategyResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.name = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.type = reader.string();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 40) {
                            break;
                        }
                        message.isActive = reader.bool();
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 50) {
                            break;
                        }
                        message.baseBudget = _struct.Struct.unwrap(_struct.Struct.decode(reader, reader.uint32()));
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 58) {
                            break;
                        }
                        message.lastBudgetChange = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 8:
                    {
                        if (tag !== 66) {
                            break;
                        }
                        message.recurrence = RRuleOptions.decode(reader, reader.uint32());
                        continue;
                    }
                case 9:
                    {
                        if (tag !== 74) {
                            break;
                        }
                        message.recurrenceDates.push(fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32())));
                        continue;
                    }
                case 10:
                    {
                        if (tag !== 80) {
                            break;
                        }
                        message.runIfOrdersActive = reader.bool();
                        continue;
                    }
                case 11:
                    {
                        if (tag !== 88) {
                            break;
                        }
                        message.stopIfError = reader.bool();
                        continue;
                    }
                case 12:
                    {
                        if (tag !== 96) {
                            break;
                        }
                        message.maxExecutionDelay = reader.int32();
                        continue;
                    }
                case 13:
                    {
                        if (tag !== 104) {
                            break;
                        }
                        message.cancelAllOrdersBeforeExecution = reader.bool();
                        continue;
                    }
                case 14:
                    {
                        if (tag !== 114) {
                            break;
                        }
                        message.deployedAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 15:
                    {
                        if (tag !== 122) {
                            break;
                        }
                        message.createdAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 16:
                    {
                        if (tag !== 130) {
                            break;
                        }
                        message.updatedAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 17:
                    {
                        if (tag !== 138) {
                            break;
                        }
                        message.activePairs.push(PairRatio.decode(reader, reader.uint32()));
                        continue;
                    }
                case 18:
                    {
                        if (tag !== 146) {
                            break;
                        }
                        message.draftPairs.push(PairBroker.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
            baseBudget: isObject(object.baseBudget) ? object.baseBudget : undefined,
            lastBudgetChange: isSet(object.lastBudgetChange) ? fromJsonTimestamp(object.lastBudgetChange) : undefined,
            recurrence: isSet(object.recurrence) ? RRuleOptions.fromJSON(object.recurrence) : undefined,
            recurrenceDates: globalThis.Array.isArray(object == null ? void 0 : object.recurrenceDates) ? object.recurrenceDates.map((e)=>fromJsonTimestamp(e)) : [],
            runIfOrdersActive: isSet(object.runIfOrdersActive) ? globalThis.Boolean(object.runIfOrdersActive) : undefined,
            stopIfError: isSet(object.stopIfError) ? globalThis.Boolean(object.stopIfError) : undefined,
            maxExecutionDelay: isSet(object.maxExecutionDelay) ? globalThis.Number(object.maxExecutionDelay) : undefined,
            cancelAllOrdersBeforeExecution: isSet(object.cancelAllOrdersBeforeExecution) ? globalThis.Boolean(object.cancelAllOrdersBeforeExecution) : undefined,
            deployedAt: isSet(object.deployedAt) ? fromJsonTimestamp(object.deployedAt) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
            activePairs: globalThis.Array.isArray(object == null ? void 0 : object.activePairs) ? object.activePairs.map((e)=>PairRatio.fromJSON(e)) : [],
            draftPairs: globalThis.Array.isArray(object == null ? void 0 : object.draftPairs) ? object.draftPairs.map((e)=>PairBroker.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_recurrenceDates, _message_activePairs, _message_draftPairs;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.isActive !== false) {
            obj.isActive = message.isActive;
        }
        if (message.baseBudget !== undefined) {
            obj.baseBudget = message.baseBudget;
        }
        if (message.lastBudgetChange !== undefined) {
            obj.lastBudgetChange = message.lastBudgetChange.toISOString();
        }
        if (message.recurrence !== undefined) {
            obj.recurrence = RRuleOptions.toJSON(message.recurrence);
        }
        if ((_message_recurrenceDates = message.recurrenceDates) == null ? void 0 : _message_recurrenceDates.length) {
            obj.recurrenceDates = message.recurrenceDates.map((e)=>e.toISOString());
        }
        if (message.runIfOrdersActive !== undefined) {
            obj.runIfOrdersActive = message.runIfOrdersActive;
        }
        if (message.stopIfError !== undefined) {
            obj.stopIfError = message.stopIfError;
        }
        if (message.maxExecutionDelay !== undefined) {
            obj.maxExecutionDelay = Math.round(message.maxExecutionDelay);
        }
        if (message.cancelAllOrdersBeforeExecution !== undefined) {
            obj.cancelAllOrdersBeforeExecution = message.cancelAllOrdersBeforeExecution;
        }
        if (message.deployedAt !== undefined) {
            obj.deployedAt = message.deployedAt.toISOString();
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = message.updatedAt.toISOString();
        }
        if ((_message_activePairs = message.activePairs) == null ? void 0 : _message_activePairs.length) {
            obj.activePairs = message.activePairs.map((e)=>PairRatio.toJSON(e));
        }
        if ((_message_draftPairs = message.draftPairs) == null ? void 0 : _message_draftPairs.length) {
            obj.draftPairs = message.draftPairs.map((e)=>PairBroker.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return StrategyResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_recurrenceDates, _object_activePairs, _object_draftPairs;
        const message = createBaseStrategyResponse();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_name;
        message.name = (_object_name = object.name) != null ? _object_name : "";
        var _object_type;
        message.type = (_object_type = object.type) != null ? _object_type : "";
        var _object_isActive;
        message.isActive = (_object_isActive = object.isActive) != null ? _object_isActive : false;
        var _object_baseBudget;
        message.baseBudget = (_object_baseBudget = object.baseBudget) != null ? _object_baseBudget : undefined;
        var _object_lastBudgetChange;
        message.lastBudgetChange = (_object_lastBudgetChange = object.lastBudgetChange) != null ? _object_lastBudgetChange : undefined;
        message.recurrence = object.recurrence !== undefined && object.recurrence !== null ? RRuleOptions.fromPartial(object.recurrence) : undefined;
        message.recurrenceDates = ((_object_recurrenceDates = object.recurrenceDates) == null ? void 0 : _object_recurrenceDates.map((e)=>e)) || [];
        var _object_runIfOrdersActive;
        message.runIfOrdersActive = (_object_runIfOrdersActive = object.runIfOrdersActive) != null ? _object_runIfOrdersActive : undefined;
        var _object_stopIfError;
        message.stopIfError = (_object_stopIfError = object.stopIfError) != null ? _object_stopIfError : undefined;
        var _object_maxExecutionDelay;
        message.maxExecutionDelay = (_object_maxExecutionDelay = object.maxExecutionDelay) != null ? _object_maxExecutionDelay : undefined;
        var _object_cancelAllOrdersBeforeExecution;
        message.cancelAllOrdersBeforeExecution = (_object_cancelAllOrdersBeforeExecution = object.cancelAllOrdersBeforeExecution) != null ? _object_cancelAllOrdersBeforeExecution : undefined;
        var _object_deployedAt;
        message.deployedAt = (_object_deployedAt = object.deployedAt) != null ? _object_deployedAt : undefined;
        var _object_createdAt;
        message.createdAt = (_object_createdAt = object.createdAt) != null ? _object_createdAt : undefined;
        var _object_updatedAt;
        message.updatedAt = (_object_updatedAt = object.updatedAt) != null ? _object_updatedAt : undefined;
        message.activePairs = ((_object_activePairs = object.activePairs) == null ? void 0 : _object_activePairs.map((e)=>PairRatio.fromPartial(e))) || [];
        message.draftPairs = ((_object_draftPairs = object.draftPairs) == null ? void 0 : _object_draftPairs.map((e)=>PairBroker.fromPartial(e))) || [];
        return message;
    }
};
function createBaseStrategiesListResponse() {
    return {
        strategies: []
    };
}
const StrategiesListResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.strategies){
            StrategyResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStrategiesListResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.strategies.push(StrategyResponse.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            strategies: globalThis.Array.isArray(object == null ? void 0 : object.strategies) ? object.strategies.map((e)=>StrategyResponse.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_strategies;
        const obj = {};
        if ((_message_strategies = message.strategies) == null ? void 0 : _message_strategies.length) {
            obj.strategies = message.strategies.map((e)=>StrategyResponse.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return StrategiesListResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_strategies;
        const message = createBaseStrategiesListResponse();
        message.strategies = ((_object_strategies = object.strategies) == null ? void 0 : _object_strategies.map((e)=>StrategyResponse.fromPartial(e))) || [];
        return message;
    }
};
function createBaseStrategiesByUserIdRequest() {
    return {
        userId: ""
    };
}
const StrategiesByUserIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStrategiesByUserIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create (base) {
        return StrategiesByUserIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseStrategiesByUserIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        return message;
    }
};
function createBaseStrategyByIdRequest() {
    return {
        userId: "",
        id: ""
    };
}
const StrategyByIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStrategyByIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create (base) {
        return StrategyByIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseStrategyByIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        return message;
    }
};
function createBaseCreateStrategyRequest() {
    return {
        userId: "",
        name: "",
        type: "",
        recurrence: undefined
    };
}
const CreateStrategyRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.type !== "") {
            writer.uint32(26).string(message.type);
        }
        if (message.recurrence !== undefined) {
            RRuleOptions.encode(message.recurrence, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateStrategyRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.name = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.type = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.recurrence = RRuleOptions.decode(reader, reader.uint32());
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            recurrence: isSet(object.recurrence) ? RRuleOptions.fromJSON(object.recurrence) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.recurrence !== undefined) {
            obj.recurrence = RRuleOptions.toJSON(message.recurrence);
        }
        return obj;
    },
    create (base) {
        return CreateStrategyRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseCreateStrategyRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_name;
        message.name = (_object_name = object.name) != null ? _object_name : "";
        var _object_type;
        message.type = (_object_type = object.type) != null ? _object_type : "";
        message.recurrence = object.recurrence !== undefined && object.recurrence !== null ? RRuleOptions.fromPartial(object.recurrence) : undefined;
        return message;
    }
};
function createBaseUpdateStrategyRequest() {
    return {
        id: "",
        userId: "",
        name: undefined,
        type: undefined,
        recurrence: undefined,
        isActive: undefined,
        runIfOrdersActive: undefined,
        stopIfError: undefined,
        maxExecutionDelay: undefined,
        cancelAllOrdersBeforeExecution: undefined,
        baseBudget: undefined
    };
}
const UpdateStrategyRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.name !== undefined) {
            writer.uint32(26).string(message.name);
        }
        if (message.type !== undefined) {
            writer.uint32(34).string(message.type);
        }
        if (message.recurrence !== undefined) {
            RRuleOptions.encode(message.recurrence, writer.uint32(42).fork()).join();
        }
        if (message.isActive !== undefined) {
            writer.uint32(48).bool(message.isActive);
        }
        if (message.runIfOrdersActive !== undefined) {
            writer.uint32(56).bool(message.runIfOrdersActive);
        }
        if (message.stopIfError !== undefined) {
            writer.uint32(64).bool(message.stopIfError);
        }
        if (message.maxExecutionDelay !== undefined) {
            writer.uint32(72).int32(message.maxExecutionDelay);
        }
        if (message.cancelAllOrdersBeforeExecution !== undefined) {
            writer.uint32(80).bool(message.cancelAllOrdersBeforeExecution);
        }
        if (message.baseBudget !== undefined) {
            _struct.Struct.encode(_struct.Struct.wrap(message.baseBudget), writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateStrategyRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.name = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.type = reader.string();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.recurrence = RRuleOptions.decode(reader, reader.uint32());
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 48) {
                            break;
                        }
                        message.isActive = reader.bool();
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 56) {
                            break;
                        }
                        message.runIfOrdersActive = reader.bool();
                        continue;
                    }
                case 8:
                    {
                        if (tag !== 64) {
                            break;
                        }
                        message.stopIfError = reader.bool();
                        continue;
                    }
                case 9:
                    {
                        if (tag !== 72) {
                            break;
                        }
                        message.maxExecutionDelay = reader.int32();
                        continue;
                    }
                case 10:
                    {
                        if (tag !== 80) {
                            break;
                        }
                        message.cancelAllOrdersBeforeExecution = reader.bool();
                        continue;
                    }
                case 11:
                    {
                        if (tag !== 90) {
                            break;
                        }
                        message.baseBudget = _struct.Struct.unwrap(_struct.Struct.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : undefined,
            type: isSet(object.type) ? globalThis.String(object.type) : undefined,
            recurrence: isSet(object.recurrence) ? RRuleOptions.fromJSON(object.recurrence) : undefined,
            isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : undefined,
            runIfOrdersActive: isSet(object.runIfOrdersActive) ? globalThis.Boolean(object.runIfOrdersActive) : undefined,
            stopIfError: isSet(object.stopIfError) ? globalThis.Boolean(object.stopIfError) : undefined,
            maxExecutionDelay: isSet(object.maxExecutionDelay) ? globalThis.Number(object.maxExecutionDelay) : undefined,
            cancelAllOrdersBeforeExecution: isSet(object.cancelAllOrdersBeforeExecution) ? globalThis.Boolean(object.cancelAllOrdersBeforeExecution) : undefined,
            baseBudget: isObject(object.baseBudget) ? object.baseBudget : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.name !== undefined) {
            obj.name = message.name;
        }
        if (message.type !== undefined) {
            obj.type = message.type;
        }
        if (message.recurrence !== undefined) {
            obj.recurrence = RRuleOptions.toJSON(message.recurrence);
        }
        if (message.isActive !== undefined) {
            obj.isActive = message.isActive;
        }
        if (message.runIfOrdersActive !== undefined) {
            obj.runIfOrdersActive = message.runIfOrdersActive;
        }
        if (message.stopIfError !== undefined) {
            obj.stopIfError = message.stopIfError;
        }
        if (message.maxExecutionDelay !== undefined) {
            obj.maxExecutionDelay = Math.round(message.maxExecutionDelay);
        }
        if (message.cancelAllOrdersBeforeExecution !== undefined) {
            obj.cancelAllOrdersBeforeExecution = message.cancelAllOrdersBeforeExecution;
        }
        if (message.baseBudget !== undefined) {
            obj.baseBudget = message.baseBudget;
        }
        return obj;
    },
    create (base) {
        return UpdateStrategyRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseUpdateStrategyRequest();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_name;
        message.name = (_object_name = object.name) != null ? _object_name : undefined;
        var _object_type;
        message.type = (_object_type = object.type) != null ? _object_type : undefined;
        message.recurrence = object.recurrence !== undefined && object.recurrence !== null ? RRuleOptions.fromPartial(object.recurrence) : undefined;
        var _object_isActive;
        message.isActive = (_object_isActive = object.isActive) != null ? _object_isActive : undefined;
        var _object_runIfOrdersActive;
        message.runIfOrdersActive = (_object_runIfOrdersActive = object.runIfOrdersActive) != null ? _object_runIfOrdersActive : undefined;
        var _object_stopIfError;
        message.stopIfError = (_object_stopIfError = object.stopIfError) != null ? _object_stopIfError : undefined;
        var _object_maxExecutionDelay;
        message.maxExecutionDelay = (_object_maxExecutionDelay = object.maxExecutionDelay) != null ? _object_maxExecutionDelay : undefined;
        var _object_cancelAllOrdersBeforeExecution;
        message.cancelAllOrdersBeforeExecution = (_object_cancelAllOrdersBeforeExecution = object.cancelAllOrdersBeforeExecution) != null ? _object_cancelAllOrdersBeforeExecution : undefined;
        var _object_baseBudget;
        message.baseBudget = (_object_baseBudget = object.baseBudget) != null ? _object_baseBudget : undefined;
        return message;
    }
};
function createBaseSetStrategyActivePairsRequest() {
    return {
        id: "",
        userId: "",
        activePairs: [],
        clear: undefined
    };
}
const SetStrategyActivePairsRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        for (const v of message.activePairs){
            PairRatio.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.clear !== undefined) {
            writer.uint32(32).bool(message.clear);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetStrategyActivePairsRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.activePairs.push(PairRatio.decode(reader, reader.uint32()));
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 32) {
                            break;
                        }
                        message.clear = reader.bool();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            activePairs: globalThis.Array.isArray(object == null ? void 0 : object.activePairs) ? object.activePairs.map((e)=>PairRatio.fromJSON(e)) : [],
            clear: isSet(object.clear) ? globalThis.Boolean(object.clear) : undefined
        };
    },
    toJSON (message) {
        var _message_activePairs;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if ((_message_activePairs = message.activePairs) == null ? void 0 : _message_activePairs.length) {
            obj.activePairs = message.activePairs.map((e)=>PairRatio.toJSON(e));
        }
        if (message.clear !== undefined) {
            obj.clear = message.clear;
        }
        return obj;
    },
    create (base) {
        return SetStrategyActivePairsRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_activePairs;
        const message = createBaseSetStrategyActivePairsRequest();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        message.activePairs = ((_object_activePairs = object.activePairs) == null ? void 0 : _object_activePairs.map((e)=>PairRatio.fromPartial(e))) || [];
        var _object_clear;
        message.clear = (_object_clear = object.clear) != null ? _object_clear : undefined;
        return message;
    }
};
function createBaseSetStrategyDraftPairsRequest() {
    return {
        id: "",
        userId: "",
        draftPairs: [],
        clear: undefined
    };
}
const SetStrategyDraftPairsRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        for (const v of message.draftPairs){
            PairBroker.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.clear !== undefined) {
            writer.uint32(32).bool(message.clear);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetStrategyDraftPairsRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.draftPairs.push(PairBroker.decode(reader, reader.uint32()));
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 32) {
                            break;
                        }
                        message.clear = reader.bool();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            draftPairs: globalThis.Array.isArray(object == null ? void 0 : object.draftPairs) ? object.draftPairs.map((e)=>PairBroker.fromJSON(e)) : [],
            clear: isSet(object.clear) ? globalThis.Boolean(object.clear) : undefined
        };
    },
    toJSON (message) {
        var _message_draftPairs;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if ((_message_draftPairs = message.draftPairs) == null ? void 0 : _message_draftPairs.length) {
            obj.draftPairs = message.draftPairs.map((e)=>PairBroker.toJSON(e));
        }
        if (message.clear !== undefined) {
            obj.clear = message.clear;
        }
        return obj;
    },
    create (base) {
        return SetStrategyDraftPairsRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_draftPairs;
        const message = createBaseSetStrategyDraftPairsRequest();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        message.draftPairs = ((_object_draftPairs = object.draftPairs) == null ? void 0 : _object_draftPairs.map((e)=>PairBroker.fromPartial(e))) || [];
        var _object_clear;
        message.clear = (_object_clear = object.clear) != null ? _object_clear : undefined;
        return message;
    }
};
function createBaseListActiveStrategiesRequest() {
    return {
        base: "",
        quote: "",
        broker: "",
        executionDate: undefined
    };
}
const ListActiveStrategiesRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.base !== "") {
            writer.uint32(10).string(message.base);
        }
        if (message.quote !== "") {
            writer.uint32(18).string(message.quote);
        }
        if (message.broker !== "") {
            writer.uint32(26).string(message.broker);
        }
        if (message.executionDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.executionDate), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListActiveStrategiesRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.base = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.quote = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.executionDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            executionDate: isSet(object.executionDate) ? fromJsonTimestamp(object.executionDate) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.quote !== "") {
            obj.quote = message.quote;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if (message.executionDate !== undefined) {
            obj.executionDate = message.executionDate.toISOString();
        }
        return obj;
    },
    create (base) {
        return ListActiveStrategiesRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseListActiveStrategiesRequest();
        var _object_base;
        message.base = (_object_base = object.base) != null ? _object_base : "";
        var _object_quote;
        message.quote = (_object_quote = object.quote) != null ? _object_quote : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        var _object_executionDate;
        message.executionDate = (_object_executionDate = object.executionDate) != null ? _object_executionDate : undefined;
        return message;
    }
};
const StrategiesService = {
    listStrategiesByUserId: {
        path: "/minerva.Strategies/ListStrategiesByUserId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(StrategiesByUserIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>StrategiesByUserIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(StrategiesListResponse.encode(value).finish()),
        responseDeserialize: (value)=>StrategiesListResponse.decode(value)
    },
    getStrategyById: {
        path: "/minerva.Strategies/GetStrategyById",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(StrategyByIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>StrategyByIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(StrategyResponse.encode(value).finish()),
        responseDeserialize: (value)=>StrategyResponse.decode(value)
    },
    createStrategy: {
        path: "/minerva.Strategies/CreateStrategy",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(CreateStrategyRequest.encode(value).finish()),
        requestDeserialize: (value)=>CreateStrategyRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(StrategyResponse.encode(value).finish()),
        responseDeserialize: (value)=>StrategyResponse.decode(value)
    },
    updateStrategy: {
        path: "/minerva.Strategies/UpdateStrategy",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(UpdateStrategyRequest.encode(value).finish()),
        requestDeserialize: (value)=>UpdateStrategyRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(StrategyResponse.encode(value).finish()),
        responseDeserialize: (value)=>StrategyResponse.decode(value)
    },
    setStrategyActivePairs: {
        path: "/minerva.Strategies/SetStrategyActivePairs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(SetStrategyActivePairsRequest.encode(value).finish()),
        requestDeserialize: (value)=>SetStrategyActivePairsRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(StrategyResponse.encode(value).finish()),
        responseDeserialize: (value)=>StrategyResponse.decode(value)
    },
    setStrategyDraftPairs: {
        path: "/minerva.Strategies/SetStrategyDraftPairs",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(SetStrategyDraftPairsRequest.encode(value).finish()),
        requestDeserialize: (value)=>SetStrategyDraftPairsRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(StrategyResponse.encode(value).finish()),
        responseDeserialize: (value)=>StrategyResponse.decode(value)
    },
    deleteStrategy: {
        path: "/minerva.Strategies/DeleteStrategy",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(StrategyByIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>StrategyByIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(_empty.Empty.encode(value).finish()),
        responseDeserialize: (value)=>_empty.Empty.decode(value)
    },
    listActiveStrategies: {
        path: "/minerva.Strategies/ListActiveStrategies",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ListActiveStrategiesRequest.encode(value).finish()),
        requestDeserialize: (value)=>ListActiveStrategiesRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(StrategiesListResponse.encode(value).finish()),
        responseDeserialize: (value)=>StrategiesListResponse.decode(value)
    }
};
const StrategiesClient = (0, _grpcjs.makeGenericClientConstructor)(StrategiesService, "minerva.Strategies");
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = date.getTime() % 1000 * 1000000;
    return {
        seconds,
        nanos
    };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    } else if (typeof o === "string") {
        return new globalThis.Date(o);
    } else {
        return fromTimestamp(_timestamp.Timestamp.fromJSON(o));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

//# sourceMappingURL=strategies.js.map