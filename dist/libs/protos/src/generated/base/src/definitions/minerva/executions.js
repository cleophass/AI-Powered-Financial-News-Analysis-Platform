// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: src/definitions/minerva/executions.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CreateExecutionRequest: function() {
        return CreateExecutionRequest;
    },
    ExecutionResponse: function() {
        return ExecutionResponse;
    },
    ExecutionsClient: function() {
        return ExecutionsClient;
    },
    ExecutionsService: function() {
        return ExecutionsService;
    }
});
const _wire = require("@bufbuild/protobuf/wire");
const _grpcjs = require("@grpc/grpc-js");
const _struct = require("../../../google/protobuf/struct");
function createBaseExecutionResponse() {
    return {
        id: "",
        executionResult: undefined,
        createdAt: ""
    };
}
const ExecutionResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.executionResult !== undefined) {
            _struct.Struct.encode(_struct.Struct.wrap(message.executionResult), writer.uint32(18).fork()).join();
        }
        if (message.createdAt !== "") {
            writer.uint32(26).string(message.createdAt);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExecutionResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.executionResult = _struct.Struct.unwrap(_struct.Struct.decode(reader, reader.uint32()));
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.createdAt = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            executionResult: isObject(object.executionResult) ? object.executionResult : undefined,
            createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.executionResult !== undefined) {
            obj.executionResult = message.executionResult;
        }
        if (message.createdAt !== "") {
            obj.createdAt = message.createdAt;
        }
        return obj;
    },
    create (base) {
        return ExecutionResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseExecutionResponse();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_executionResult;
        message.executionResult = (_object_executionResult = object.executionResult) != null ? _object_executionResult : undefined;
        var _object_createdAt;
        message.createdAt = (_object_createdAt = object.createdAt) != null ? _object_createdAt : "";
        return message;
    }
};
function createBaseCreateExecutionRequest() {
    return {
        flowId: "",
        userId: "",
        executionResult: undefined
    };
}
const CreateExecutionRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.flowId !== "") {
            writer.uint32(10).string(message.flowId);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.executionResult !== undefined) {
            _struct.Struct.encode(_struct.Struct.wrap(message.executionResult), writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateExecutionRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.flowId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.executionResult = _struct.Struct.unwrap(_struct.Struct.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            flowId: isSet(object.flowId) ? globalThis.String(object.flowId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            executionResult: isObject(object.executionResult) ? object.executionResult : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.flowId !== "") {
            obj.flowId = message.flowId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.executionResult !== undefined) {
            obj.executionResult = message.executionResult;
        }
        return obj;
    },
    create (base) {
        return CreateExecutionRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseCreateExecutionRequest();
        var _object_flowId;
        message.flowId = (_object_flowId = object.flowId) != null ? _object_flowId : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_executionResult;
        message.executionResult = (_object_executionResult = object.executionResult) != null ? _object_executionResult : undefined;
        return message;
    }
};
const ExecutionsService = {
    createExecution: {
        path: "/minerva.Executions/CreateExecution",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(CreateExecutionRequest.encode(value).finish()),
        requestDeserialize: (value)=>CreateExecutionRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(ExecutionResponse.encode(value).finish()),
        responseDeserialize: (value)=>ExecutionResponse.decode(value)
    }
};
const ExecutionsClient = (0, _grpcjs.makeGenericClientConstructor)(ExecutionsService, "minerva.Executions");
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

//# sourceMappingURL=executions.js.map