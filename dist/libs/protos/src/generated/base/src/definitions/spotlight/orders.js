// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: src/definitions/spotlight/orders.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CancelAllOrdersByStrategyIdRequest: function() {
        return CancelAllOrdersByStrategyIdRequest;
    },
    CandleRequest: function() {
        return CandleRequest;
    },
    CreateOrder: function() {
        return CreateOrder;
    },
    CreateOrdersRequest: function() {
        return CreateOrdersRequest;
    },
    DeleteOrderResponse: function() {
        return DeleteOrderResponse;
    },
    ExtractHasOpenedOrdersRequest: function() {
        return ExtractHasOpenedOrdersRequest;
    },
    ExtractHasOpenedOrdersResponse: function() {
        return ExtractHasOpenedOrdersResponse;
    },
    GetBudgetImpactByFrequencyRequest: function() {
        return GetBudgetImpactByFrequencyRequest;
    },
    GetBudgetImpactRequest: function() {
        return GetBudgetImpactRequest;
    },
    GetProfitsAndLossesRequest: function() {
        return GetProfitsAndLossesRequest;
    },
    ListBudgetsImpactsRequest: function() {
        return ListBudgetsImpactsRequest;
    },
    ListOrdersByStrategyIdRequest: function() {
        return ListOrdersByStrategyIdRequest;
    },
    ListOrdersByUserIdRequest: function() {
        return ListOrdersByUserIdRequest;
    },
    OrderByIdRequest: function() {
        return OrderByIdRequest;
    },
    OrderFee: function() {
        return OrderFee;
    },
    OrderResponse: function() {
        return OrderResponse;
    },
    OrdersClient: function() {
        return OrdersClient;
    },
    OrdersListResponse: function() {
        return OrdersListResponse;
    },
    OrdersService: function() {
        return OrdersService;
    },
    UpdateOrderRequest: function() {
        return UpdateOrderRequest;
    },
    UpdateOrdersBulkRequest: function() {
        return UpdateOrdersBulkRequest;
    }
});
const _wire = require("@bufbuild/protobuf/wire");
const _grpcjs = require("@grpc/grpc-js");
const _struct = require("../../../google/protobuf/struct");
const _timestamp = require("../../../google/protobuf/timestamp");
function createBaseOrderFee() {
    return {
        asset: "",
        amount: 0
    };
}
const OrderFee = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.asset !== "") {
            writer.uint32(10).string(message.asset);
        }
        if (message.amount !== 0) {
            writer.uint32(17).double(message.amount);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderFee();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.asset = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 17) {
                            break;
                        }
                        message.amount = reader.double();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.asset !== "") {
            obj.asset = message.asset;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        return obj;
    },
    create (base) {
        return OrderFee.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseOrderFee();
        var _object_asset;
        message.asset = (_object_asset = object.asset) != null ? _object_asset : "";
        var _object_amount;
        message.amount = (_object_amount = object.amount) != null ? _object_amount : 0;
        return message;
    }
};
function createBaseOrderResponse() {
    return {
        id: "",
        userId: "",
        orderId: undefined,
        strategyId: "",
        flowId: "",
        broker: "",
        base: "",
        quote: "",
        type: "",
        isPaper: false,
        side: "",
        status: "",
        inOrderBook: false,
        volumeTraded: 0,
        quoteVolumeTraded: 0,
        volume: undefined,
        quoteVolume: undefined,
        displayVolume: undefined,
        timeInForce: undefined,
        limitPrice: undefined,
        triggerPrice: undefined,
        trailingDelta: undefined,
        createdAt: undefined,
        pendingAt: undefined,
        openedAt: undefined,
        closedAt: undefined,
        canceledAt: undefined,
        rejectedAt: undefined,
        errorCode: undefined,
        errorMessage: undefined,
        fees: []
    };
}
const OrderResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.orderId !== undefined) {
            writer.uint32(26).string(message.orderId);
        }
        if (message.strategyId !== "") {
            writer.uint32(34).string(message.strategyId);
        }
        if (message.flowId !== "") {
            writer.uint32(42).string(message.flowId);
        }
        if (message.broker !== "") {
            writer.uint32(50).string(message.broker);
        }
        if (message.base !== "") {
            writer.uint32(58).string(message.base);
        }
        if (message.quote !== "") {
            writer.uint32(66).string(message.quote);
        }
        if (message.type !== "") {
            writer.uint32(74).string(message.type);
        }
        if (message.isPaper !== false) {
            writer.uint32(80).bool(message.isPaper);
        }
        if (message.side !== "") {
            writer.uint32(90).string(message.side);
        }
        if (message.status !== "") {
            writer.uint32(98).string(message.status);
        }
        if (message.inOrderBook !== false) {
            writer.uint32(104).bool(message.inOrderBook);
        }
        if (message.volumeTraded !== 0) {
            writer.uint32(113).double(message.volumeTraded);
        }
        if (message.quoteVolumeTraded !== 0) {
            writer.uint32(121).double(message.quoteVolumeTraded);
        }
        if (message.volume !== undefined) {
            writer.uint32(129).double(message.volume);
        }
        if (message.quoteVolume !== undefined) {
            writer.uint32(137).double(message.quoteVolume);
        }
        if (message.displayVolume !== undefined) {
            writer.uint32(145).double(message.displayVolume);
        }
        if (message.timeInForce !== undefined) {
            writer.uint32(154).string(message.timeInForce);
        }
        if (message.limitPrice !== undefined) {
            writer.uint32(161).double(message.limitPrice);
        }
        if (message.triggerPrice !== undefined) {
            writer.uint32(169).double(message.triggerPrice);
        }
        if (message.trailingDelta !== undefined) {
            writer.uint32(177).double(message.trailingDelta);
        }
        if (message.createdAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(186).fork()).join();
        }
        if (message.pendingAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.pendingAt), writer.uint32(194).fork()).join();
        }
        if (message.openedAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.openedAt), writer.uint32(202).fork()).join();
        }
        if (message.closedAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.closedAt), writer.uint32(210).fork()).join();
        }
        if (message.canceledAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.canceledAt), writer.uint32(218).fork()).join();
        }
        if (message.rejectedAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.rejectedAt), writer.uint32(226).fork()).join();
        }
        if (message.errorCode !== undefined) {
            writer.uint32(234).string(message.errorCode);
        }
        if (message.errorMessage !== undefined) {
            writer.uint32(242).string(message.errorMessage);
        }
        for (const v of message.fees){
            OrderFee.encode(v, writer.uint32(250).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.orderId = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.flowId = reader.string();
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 50) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 58) {
                            break;
                        }
                        message.base = reader.string();
                        continue;
                    }
                case 8:
                    {
                        if (tag !== 66) {
                            break;
                        }
                        message.quote = reader.string();
                        continue;
                    }
                case 9:
                    {
                        if (tag !== 74) {
                            break;
                        }
                        message.type = reader.string();
                        continue;
                    }
                case 10:
                    {
                        if (tag !== 80) {
                            break;
                        }
                        message.isPaper = reader.bool();
                        continue;
                    }
                case 11:
                    {
                        if (tag !== 90) {
                            break;
                        }
                        message.side = reader.string();
                        continue;
                    }
                case 12:
                    {
                        if (tag !== 98) {
                            break;
                        }
                        message.status = reader.string();
                        continue;
                    }
                case 13:
                    {
                        if (tag !== 104) {
                            break;
                        }
                        message.inOrderBook = reader.bool();
                        continue;
                    }
                case 14:
                    {
                        if (tag !== 113) {
                            break;
                        }
                        message.volumeTraded = reader.double();
                        continue;
                    }
                case 15:
                    {
                        if (tag !== 121) {
                            break;
                        }
                        message.quoteVolumeTraded = reader.double();
                        continue;
                    }
                case 16:
                    {
                        if (tag !== 129) {
                            break;
                        }
                        message.volume = reader.double();
                        continue;
                    }
                case 17:
                    {
                        if (tag !== 137) {
                            break;
                        }
                        message.quoteVolume = reader.double();
                        continue;
                    }
                case 18:
                    {
                        if (tag !== 145) {
                            break;
                        }
                        message.displayVolume = reader.double();
                        continue;
                    }
                case 19:
                    {
                        if (tag !== 154) {
                            break;
                        }
                        message.timeInForce = reader.string();
                        continue;
                    }
                case 20:
                    {
                        if (tag !== 161) {
                            break;
                        }
                        message.limitPrice = reader.double();
                        continue;
                    }
                case 21:
                    {
                        if (tag !== 169) {
                            break;
                        }
                        message.triggerPrice = reader.double();
                        continue;
                    }
                case 22:
                    {
                        if (tag !== 177) {
                            break;
                        }
                        message.trailingDelta = reader.double();
                        continue;
                    }
                case 23:
                    {
                        if (tag !== 186) {
                            break;
                        }
                        message.createdAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 24:
                    {
                        if (tag !== 194) {
                            break;
                        }
                        message.pendingAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 25:
                    {
                        if (tag !== 202) {
                            break;
                        }
                        message.openedAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 26:
                    {
                        if (tag !== 210) {
                            break;
                        }
                        message.closedAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 27:
                    {
                        if (tag !== 218) {
                            break;
                        }
                        message.canceledAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 28:
                    {
                        if (tag !== 226) {
                            break;
                        }
                        message.rejectedAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 29:
                    {
                        if (tag !== 234) {
                            break;
                        }
                        message.errorCode = reader.string();
                        continue;
                    }
                case 30:
                    {
                        if (tag !== 242) {
                            break;
                        }
                        message.errorMessage = reader.string();
                        continue;
                    }
                case 31:
                    {
                        if (tag !== 250) {
                            break;
                        }
                        message.fees.push(OrderFee.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : undefined,
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            flowId: isSet(object.flowId) ? globalThis.String(object.flowId) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            isPaper: isSet(object.isPaper) ? globalThis.Boolean(object.isPaper) : false,
            side: isSet(object.side) ? globalThis.String(object.side) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            inOrderBook: isSet(object.inOrderBook) ? globalThis.Boolean(object.inOrderBook) : false,
            volumeTraded: isSet(object.volumeTraded) ? globalThis.Number(object.volumeTraded) : 0,
            quoteVolumeTraded: isSet(object.quoteVolumeTraded) ? globalThis.Number(object.quoteVolumeTraded) : 0,
            volume: isSet(object.volume) ? globalThis.Number(object.volume) : undefined,
            quoteVolume: isSet(object.quoteVolume) ? globalThis.Number(object.quoteVolume) : undefined,
            displayVolume: isSet(object.displayVolume) ? globalThis.Number(object.displayVolume) : undefined,
            timeInForce: isSet(object.timeInForce) ? globalThis.String(object.timeInForce) : undefined,
            limitPrice: isSet(object.limitPrice) ? globalThis.Number(object.limitPrice) : undefined,
            triggerPrice: isSet(object.triggerPrice) ? globalThis.Number(object.triggerPrice) : undefined,
            trailingDelta: isSet(object.trailingDelta) ? globalThis.Number(object.trailingDelta) : undefined,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            pendingAt: isSet(object.pendingAt) ? fromJsonTimestamp(object.pendingAt) : undefined,
            openedAt: isSet(object.openedAt) ? fromJsonTimestamp(object.openedAt) : undefined,
            closedAt: isSet(object.closedAt) ? fromJsonTimestamp(object.closedAt) : undefined,
            canceledAt: isSet(object.canceledAt) ? fromJsonTimestamp(object.canceledAt) : undefined,
            rejectedAt: isSet(object.rejectedAt) ? fromJsonTimestamp(object.rejectedAt) : undefined,
            errorCode: isSet(object.errorCode) ? globalThis.String(object.errorCode) : undefined,
            errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : undefined,
            fees: globalThis.Array.isArray(object == null ? void 0 : object.fees) ? object.fees.map((e)=>OrderFee.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_fees;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.orderId !== undefined) {
            obj.orderId = message.orderId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.flowId !== "") {
            obj.flowId = message.flowId;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.quote !== "") {
            obj.quote = message.quote;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.isPaper !== false) {
            obj.isPaper = message.isPaper;
        }
        if (message.side !== "") {
            obj.side = message.side;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.inOrderBook !== false) {
            obj.inOrderBook = message.inOrderBook;
        }
        if (message.volumeTraded !== 0) {
            obj.volumeTraded = message.volumeTraded;
        }
        if (message.quoteVolumeTraded !== 0) {
            obj.quoteVolumeTraded = message.quoteVolumeTraded;
        }
        if (message.volume !== undefined) {
            obj.volume = message.volume;
        }
        if (message.quoteVolume !== undefined) {
            obj.quoteVolume = message.quoteVolume;
        }
        if (message.displayVolume !== undefined) {
            obj.displayVolume = message.displayVolume;
        }
        if (message.timeInForce !== undefined) {
            obj.timeInForce = message.timeInForce;
        }
        if (message.limitPrice !== undefined) {
            obj.limitPrice = message.limitPrice;
        }
        if (message.triggerPrice !== undefined) {
            obj.triggerPrice = message.triggerPrice;
        }
        if (message.trailingDelta !== undefined) {
            obj.trailingDelta = message.trailingDelta;
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.pendingAt !== undefined) {
            obj.pendingAt = message.pendingAt.toISOString();
        }
        if (message.openedAt !== undefined) {
            obj.openedAt = message.openedAt.toISOString();
        }
        if (message.closedAt !== undefined) {
            obj.closedAt = message.closedAt.toISOString();
        }
        if (message.canceledAt !== undefined) {
            obj.canceledAt = message.canceledAt.toISOString();
        }
        if (message.rejectedAt !== undefined) {
            obj.rejectedAt = message.rejectedAt.toISOString();
        }
        if (message.errorCode !== undefined) {
            obj.errorCode = message.errorCode;
        }
        if (message.errorMessage !== undefined) {
            obj.errorMessage = message.errorMessage;
        }
        if ((_message_fees = message.fees) == null ? void 0 : _message_fees.length) {
            obj.fees = message.fees.map((e)=>OrderFee.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return OrderResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_fees;
        const message = createBaseOrderResponse();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_orderId;
        message.orderId = (_object_orderId = object.orderId) != null ? _object_orderId : undefined;
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_flowId;
        message.flowId = (_object_flowId = object.flowId) != null ? _object_flowId : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        var _object_base;
        message.base = (_object_base = object.base) != null ? _object_base : "";
        var _object_quote;
        message.quote = (_object_quote = object.quote) != null ? _object_quote : "";
        var _object_type;
        message.type = (_object_type = object.type) != null ? _object_type : "";
        var _object_isPaper;
        message.isPaper = (_object_isPaper = object.isPaper) != null ? _object_isPaper : false;
        var _object_side;
        message.side = (_object_side = object.side) != null ? _object_side : "";
        var _object_status;
        message.status = (_object_status = object.status) != null ? _object_status : "";
        var _object_inOrderBook;
        message.inOrderBook = (_object_inOrderBook = object.inOrderBook) != null ? _object_inOrderBook : false;
        var _object_volumeTraded;
        message.volumeTraded = (_object_volumeTraded = object.volumeTraded) != null ? _object_volumeTraded : 0;
        var _object_quoteVolumeTraded;
        message.quoteVolumeTraded = (_object_quoteVolumeTraded = object.quoteVolumeTraded) != null ? _object_quoteVolumeTraded : 0;
        var _object_volume;
        message.volume = (_object_volume = object.volume) != null ? _object_volume : undefined;
        var _object_quoteVolume;
        message.quoteVolume = (_object_quoteVolume = object.quoteVolume) != null ? _object_quoteVolume : undefined;
        var _object_displayVolume;
        message.displayVolume = (_object_displayVolume = object.displayVolume) != null ? _object_displayVolume : undefined;
        var _object_timeInForce;
        message.timeInForce = (_object_timeInForce = object.timeInForce) != null ? _object_timeInForce : undefined;
        var _object_limitPrice;
        message.limitPrice = (_object_limitPrice = object.limitPrice) != null ? _object_limitPrice : undefined;
        var _object_triggerPrice;
        message.triggerPrice = (_object_triggerPrice = object.triggerPrice) != null ? _object_triggerPrice : undefined;
        var _object_trailingDelta;
        message.trailingDelta = (_object_trailingDelta = object.trailingDelta) != null ? _object_trailingDelta : undefined;
        var _object_createdAt;
        message.createdAt = (_object_createdAt = object.createdAt) != null ? _object_createdAt : undefined;
        var _object_pendingAt;
        message.pendingAt = (_object_pendingAt = object.pendingAt) != null ? _object_pendingAt : undefined;
        var _object_openedAt;
        message.openedAt = (_object_openedAt = object.openedAt) != null ? _object_openedAt : undefined;
        var _object_closedAt;
        message.closedAt = (_object_closedAt = object.closedAt) != null ? _object_closedAt : undefined;
        var _object_canceledAt;
        message.canceledAt = (_object_canceledAt = object.canceledAt) != null ? _object_canceledAt : undefined;
        var _object_rejectedAt;
        message.rejectedAt = (_object_rejectedAt = object.rejectedAt) != null ? _object_rejectedAt : undefined;
        var _object_errorCode;
        message.errorCode = (_object_errorCode = object.errorCode) != null ? _object_errorCode : undefined;
        var _object_errorMessage;
        message.errorMessage = (_object_errorMessage = object.errorMessage) != null ? _object_errorMessage : undefined;
        message.fees = ((_object_fees = object.fees) == null ? void 0 : _object_fees.map((e)=>OrderFee.fromPartial(e))) || [];
        return message;
    }
};
function createBaseOrdersListResponse() {
    return {
        orders: []
    };
}
const OrdersListResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.orders){
            OrderResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrdersListResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.orders.push(OrderResponse.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            orders: globalThis.Array.isArray(object == null ? void 0 : object.orders) ? object.orders.map((e)=>OrderResponse.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_orders;
        const obj = {};
        if ((_message_orders = message.orders) == null ? void 0 : _message_orders.length) {
            obj.orders = message.orders.map((e)=>OrderResponse.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return OrdersListResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_orders;
        const message = createBaseOrdersListResponse();
        message.orders = ((_object_orders = object.orders) == null ? void 0 : _object_orders.map((e)=>OrderResponse.fromPartial(e))) || [];
        return message;
    }
};
function createBaseDeleteOrderResponse() {
    return {
        id: ""
    };
}
const DeleteOrderResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteOrderResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create (base) {
        return DeleteOrderResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseDeleteOrderResponse();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        return message;
    }
};
function createBaseCreateOrder() {
    return {
        base: "",
        quote: "",
        side: "",
        type: "",
        volume: undefined,
        quoteVolume: undefined,
        displayVolume: undefined,
        timeInForce: undefined,
        limitPrice: undefined,
        trailingDelta: undefined,
        triggerPrice: undefined
    };
}
const CreateOrder = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.base !== "") {
            writer.uint32(10).string(message.base);
        }
        if (message.quote !== "") {
            writer.uint32(18).string(message.quote);
        }
        if (message.side !== "") {
            writer.uint32(26).string(message.side);
        }
        if (message.type !== "") {
            writer.uint32(34).string(message.type);
        }
        if (message.volume !== undefined) {
            writer.uint32(41).double(message.volume);
        }
        if (message.quoteVolume !== undefined) {
            writer.uint32(49).double(message.quoteVolume);
        }
        if (message.displayVolume !== undefined) {
            writer.uint32(57).double(message.displayVolume);
        }
        if (message.timeInForce !== undefined) {
            writer.uint32(66).string(message.timeInForce);
        }
        if (message.limitPrice !== undefined) {
            writer.uint32(73).double(message.limitPrice);
        }
        if (message.trailingDelta !== undefined) {
            writer.uint32(81).double(message.trailingDelta);
        }
        if (message.triggerPrice !== undefined) {
            writer.uint32(89).double(message.triggerPrice);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrder();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.base = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.quote = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.side = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.type = reader.string();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 41) {
                            break;
                        }
                        message.volume = reader.double();
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 49) {
                            break;
                        }
                        message.quoteVolume = reader.double();
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 57) {
                            break;
                        }
                        message.displayVolume = reader.double();
                        continue;
                    }
                case 8:
                    {
                        if (tag !== 66) {
                            break;
                        }
                        message.timeInForce = reader.string();
                        continue;
                    }
                case 9:
                    {
                        if (tag !== 73) {
                            break;
                        }
                        message.limitPrice = reader.double();
                        continue;
                    }
                case 10:
                    {
                        if (tag !== 81) {
                            break;
                        }
                        message.trailingDelta = reader.double();
                        continue;
                    }
                case 11:
                    {
                        if (tag !== 89) {
                            break;
                        }
                        message.triggerPrice = reader.double();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
            side: isSet(object.side) ? globalThis.String(object.side) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            volume: isSet(object.volume) ? globalThis.Number(object.volume) : undefined,
            quoteVolume: isSet(object.quoteVolume) ? globalThis.Number(object.quoteVolume) : undefined,
            displayVolume: isSet(object.displayVolume) ? globalThis.Number(object.displayVolume) : undefined,
            timeInForce: isSet(object.timeInForce) ? globalThis.String(object.timeInForce) : undefined,
            limitPrice: isSet(object.limitPrice) ? globalThis.Number(object.limitPrice) : undefined,
            trailingDelta: isSet(object.trailingDelta) ? globalThis.Number(object.trailingDelta) : undefined,
            triggerPrice: isSet(object.triggerPrice) ? globalThis.Number(object.triggerPrice) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.quote !== "") {
            obj.quote = message.quote;
        }
        if (message.side !== "") {
            obj.side = message.side;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.volume !== undefined) {
            obj.volume = message.volume;
        }
        if (message.quoteVolume !== undefined) {
            obj.quoteVolume = message.quoteVolume;
        }
        if (message.displayVolume !== undefined) {
            obj.displayVolume = message.displayVolume;
        }
        if (message.timeInForce !== undefined) {
            obj.timeInForce = message.timeInForce;
        }
        if (message.limitPrice !== undefined) {
            obj.limitPrice = message.limitPrice;
        }
        if (message.trailingDelta !== undefined) {
            obj.trailingDelta = message.trailingDelta;
        }
        if (message.triggerPrice !== undefined) {
            obj.triggerPrice = message.triggerPrice;
        }
        return obj;
    },
    create (base) {
        return CreateOrder.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseCreateOrder();
        var _object_base;
        message.base = (_object_base = object.base) != null ? _object_base : "";
        var _object_quote;
        message.quote = (_object_quote = object.quote) != null ? _object_quote : "";
        var _object_side;
        message.side = (_object_side = object.side) != null ? _object_side : "";
        var _object_type;
        message.type = (_object_type = object.type) != null ? _object_type : "";
        var _object_volume;
        message.volume = (_object_volume = object.volume) != null ? _object_volume : undefined;
        var _object_quoteVolume;
        message.quoteVolume = (_object_quoteVolume = object.quoteVolume) != null ? _object_quoteVolume : undefined;
        var _object_displayVolume;
        message.displayVolume = (_object_displayVolume = object.displayVolume) != null ? _object_displayVolume : undefined;
        var _object_timeInForce;
        message.timeInForce = (_object_timeInForce = object.timeInForce) != null ? _object_timeInForce : undefined;
        var _object_limitPrice;
        message.limitPrice = (_object_limitPrice = object.limitPrice) != null ? _object_limitPrice : undefined;
        var _object_trailingDelta;
        message.trailingDelta = (_object_trailingDelta = object.trailingDelta) != null ? _object_trailingDelta : undefined;
        var _object_triggerPrice;
        message.triggerPrice = (_object_triggerPrice = object.triggerPrice) != null ? _object_triggerPrice : undefined;
        return message;
    }
};
function createBaseCreateOrdersRequest() {
    return {
        userId: "",
        strategyId: "",
        flowId: "",
        expireAt: undefined,
        isPaper: false,
        broker: "",
        orders: []
    };
}
const CreateOrdersRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        if (message.flowId !== "") {
            writer.uint32(26).string(message.flowId);
        }
        if (message.expireAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.expireAt), writer.uint32(34).fork()).join();
        }
        if (message.isPaper !== false) {
            writer.uint32(40).bool(message.isPaper);
        }
        if (message.broker !== "") {
            writer.uint32(50).string(message.broker);
        }
        for (const v of message.orders){
            CreateOrder.encode(v, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateOrdersRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.flowId = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.expireAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 40) {
                            break;
                        }
                        message.isPaper = reader.bool();
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 50) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 58) {
                            break;
                        }
                        message.orders.push(CreateOrder.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            flowId: isSet(object.flowId) ? globalThis.String(object.flowId) : "",
            expireAt: isSet(object.expireAt) ? fromJsonTimestamp(object.expireAt) : undefined,
            isPaper: isSet(object.isPaper) ? globalThis.Boolean(object.isPaper) : false,
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            orders: globalThis.Array.isArray(object == null ? void 0 : object.orders) ? object.orders.map((e)=>CreateOrder.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_orders;
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.flowId !== "") {
            obj.flowId = message.flowId;
        }
        if (message.expireAt !== undefined) {
            obj.expireAt = message.expireAt.toISOString();
        }
        if (message.isPaper !== false) {
            obj.isPaper = message.isPaper;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if ((_message_orders = message.orders) == null ? void 0 : _message_orders.length) {
            obj.orders = message.orders.map((e)=>CreateOrder.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return CreateOrdersRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_orders;
        const message = createBaseCreateOrdersRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_flowId;
        message.flowId = (_object_flowId = object.flowId) != null ? _object_flowId : "";
        var _object_expireAt;
        message.expireAt = (_object_expireAt = object.expireAt) != null ? _object_expireAt : undefined;
        var _object_isPaper;
        message.isPaper = (_object_isPaper = object.isPaper) != null ? _object_isPaper : false;
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        message.orders = ((_object_orders = object.orders) == null ? void 0 : _object_orders.map((e)=>CreateOrder.fromPartial(e))) || [];
        return message;
    }
};
function createBaseCancelAllOrdersByStrategyIdRequest() {
    return {
        userId: "",
        strategyId: "",
        broker: ""
    };
}
const CancelAllOrdersByStrategyIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        if (message.broker !== "") {
            writer.uint32(26).string(message.broker);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelAllOrdersByStrategyIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        return obj;
    },
    create (base) {
        return CancelAllOrdersByStrategyIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseCancelAllOrdersByStrategyIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        return message;
    }
};
function createBaseOrderByIdRequest() {
    return {
        id: "",
        userId: ""
    };
}
const OrderByIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrderByIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create (base) {
        return OrderByIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseOrderByIdRequest();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        return message;
    }
};
function createBaseListOrdersByStrategyIdRequest() {
    return {
        strategyId: "",
        userId: "",
        status: undefined,
        startDate: undefined,
        endDate: undefined
    };
}
const ListOrdersByStrategyIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.strategyId !== "") {
            writer.uint32(10).string(message.strategyId);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.status !== undefined) {
            writer.uint32(26).string(message.status);
        }
        if (message.startDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(34).fork()).join();
        }
        if (message.endDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOrdersByStrategyIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.status = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.startDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.endDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : undefined,
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.status !== undefined) {
            obj.status = message.status;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        return obj;
    },
    create (base) {
        return ListOrdersByStrategyIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseListOrdersByStrategyIdRequest();
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_status;
        message.status = (_object_status = object.status) != null ? _object_status : undefined;
        var _object_startDate;
        message.startDate = (_object_startDate = object.startDate) != null ? _object_startDate : undefined;
        var _object_endDate;
        message.endDate = (_object_endDate = object.endDate) != null ? _object_endDate : undefined;
        return message;
    }
};
function createBaseListOrdersByUserIdRequest() {
    return {
        userId: "",
        status: undefined,
        startDate: undefined,
        endDate: undefined
    };
}
const ListOrdersByUserIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.status !== undefined) {
            writer.uint32(18).string(message.status);
        }
        if (message.startDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();
        }
        if (message.endDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOrdersByUserIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.status = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.startDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.endDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : undefined,
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.status !== undefined) {
            obj.status = message.status;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        return obj;
    },
    create (base) {
        return ListOrdersByUserIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseListOrdersByUserIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_status;
        message.status = (_object_status = object.status) != null ? _object_status : undefined;
        var _object_startDate;
        message.startDate = (_object_startDate = object.startDate) != null ? _object_startDate : undefined;
        var _object_endDate;
        message.endDate = (_object_endDate = object.endDate) != null ? _object_endDate : undefined;
        return message;
    }
};
function createBaseCandleRequest() {
    return {
        base: "",
        quote: "",
        broker: "",
        openTime: undefined,
        closeTime: undefined,
        high: 0,
        low: 0,
        isPaper: undefined
    };
}
const CandleRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.base !== "") {
            writer.uint32(10).string(message.base);
        }
        if (message.quote !== "") {
            writer.uint32(18).string(message.quote);
        }
        if (message.broker !== "") {
            writer.uint32(26).string(message.broker);
        }
        if (message.openTime !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.openTime), writer.uint32(34).fork()).join();
        }
        if (message.closeTime !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.closeTime), writer.uint32(42).fork()).join();
        }
        if (message.high !== 0) {
            writer.uint32(49).double(message.high);
        }
        if (message.low !== 0) {
            writer.uint32(57).double(message.low);
        }
        if (message.isPaper !== undefined) {
            writer.uint32(64).bool(message.isPaper);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCandleRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.base = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.quote = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.openTime = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.closeTime = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 49) {
                            break;
                        }
                        message.high = reader.double();
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 57) {
                            break;
                        }
                        message.low = reader.double();
                        continue;
                    }
                case 8:
                    {
                        if (tag !== 64) {
                            break;
                        }
                        message.isPaper = reader.bool();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            openTime: isSet(object.openTime) ? fromJsonTimestamp(object.openTime) : undefined,
            closeTime: isSet(object.closeTime) ? fromJsonTimestamp(object.closeTime) : undefined,
            high: isSet(object.high) ? globalThis.Number(object.high) : 0,
            low: isSet(object.low) ? globalThis.Number(object.low) : 0,
            isPaper: isSet(object.isPaper) ? globalThis.Boolean(object.isPaper) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.quote !== "") {
            obj.quote = message.quote;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if (message.openTime !== undefined) {
            obj.openTime = message.openTime.toISOString();
        }
        if (message.closeTime !== undefined) {
            obj.closeTime = message.closeTime.toISOString();
        }
        if (message.high !== 0) {
            obj.high = message.high;
        }
        if (message.low !== 0) {
            obj.low = message.low;
        }
        if (message.isPaper !== undefined) {
            obj.isPaper = message.isPaper;
        }
        return obj;
    },
    create (base) {
        return CandleRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseCandleRequest();
        var _object_base;
        message.base = (_object_base = object.base) != null ? _object_base : "";
        var _object_quote;
        message.quote = (_object_quote = object.quote) != null ? _object_quote : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        var _object_openTime;
        message.openTime = (_object_openTime = object.openTime) != null ? _object_openTime : undefined;
        var _object_closeTime;
        message.closeTime = (_object_closeTime = object.closeTime) != null ? _object_closeTime : undefined;
        var _object_high;
        message.high = (_object_high = object.high) != null ? _object_high : 0;
        var _object_low;
        message.low = (_object_low = object.low) != null ? _object_low : 0;
        var _object_isPaper;
        message.isPaper = (_object_isPaper = object.isPaper) != null ? _object_isPaper : undefined;
        return message;
    }
};
function createBaseExtractHasOpenedOrdersRequest() {
    return {
        strategyIds: []
    };
}
const ExtractHasOpenedOrdersRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.strategyIds){
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtractHasOpenedOrdersRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.strategyIds.push(reader.string());
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            strategyIds: globalThis.Array.isArray(object == null ? void 0 : object.strategyIds) ? object.strategyIds.map((e)=>globalThis.String(e)) : []
        };
    },
    toJSON (message) {
        var _message_strategyIds;
        const obj = {};
        if ((_message_strategyIds = message.strategyIds) == null ? void 0 : _message_strategyIds.length) {
            obj.strategyIds = message.strategyIds;
        }
        return obj;
    },
    create (base) {
        return ExtractHasOpenedOrdersRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_strategyIds;
        const message = createBaseExtractHasOpenedOrdersRequest();
        message.strategyIds = ((_object_strategyIds = object.strategyIds) == null ? void 0 : _object_strategyIds.map((e)=>e)) || [];
        return message;
    }
};
function createBaseExtractHasOpenedOrdersResponse() {
    return {
        strategyIds: [],
        base: "",
        quote: "",
        broker: ""
    };
}
const ExtractHasOpenedOrdersResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.strategyIds){
            writer.uint32(10).string(v);
        }
        if (message.base !== "") {
            writer.uint32(18).string(message.base);
        }
        if (message.quote !== "") {
            writer.uint32(26).string(message.quote);
        }
        if (message.broker !== "") {
            writer.uint32(34).string(message.broker);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtractHasOpenedOrdersResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.strategyIds.push(reader.string());
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.base = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.quote = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            strategyIds: globalThis.Array.isArray(object == null ? void 0 : object.strategyIds) ? object.strategyIds.map((e)=>globalThis.String(e)) : [],
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : ""
        };
    },
    toJSON (message) {
        var _message_strategyIds;
        const obj = {};
        if ((_message_strategyIds = message.strategyIds) == null ? void 0 : _message_strategyIds.length) {
            obj.strategyIds = message.strategyIds;
        }
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.quote !== "") {
            obj.quote = message.quote;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        return obj;
    },
    create (base) {
        return ExtractHasOpenedOrdersResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_strategyIds;
        const message = createBaseExtractHasOpenedOrdersResponse();
        message.strategyIds = ((_object_strategyIds = object.strategyIds) == null ? void 0 : _object_strategyIds.map((e)=>e)) || [];
        var _object_base;
        message.base = (_object_base = object.base) != null ? _object_base : "";
        var _object_quote;
        message.quote = (_object_quote = object.quote) != null ? _object_quote : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        return message;
    }
};
function createBaseGetBudgetImpactRequest() {
    return {
        userId: "",
        strategyId: "",
        startDate: undefined,
        endDate: undefined
    };
}
const GetBudgetImpactRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        if (message.startDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();
        }
        if (message.endDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetBudgetImpactRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.startDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.endDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        return obj;
    },
    create (base) {
        return GetBudgetImpactRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseGetBudgetImpactRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_startDate;
        message.startDate = (_object_startDate = object.startDate) != null ? _object_startDate : undefined;
        var _object_endDate;
        message.endDate = (_object_endDate = object.endDate) != null ? _object_endDate : undefined;
        return message;
    }
};
function createBaseGetBudgetImpactByFrequencyRequest() {
    return {
        userId: "",
        strategyId: "",
        startDate: undefined,
        endDate: undefined,
        frequency: ""
    };
}
const GetBudgetImpactByFrequencyRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        if (message.startDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();
        }
        if (message.endDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();
        }
        if (message.frequency !== "") {
            writer.uint32(42).string(message.frequency);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetBudgetImpactByFrequencyRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.startDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.endDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.frequency = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
            frequency: isSet(object.frequency) ? globalThis.String(object.frequency) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        if (message.frequency !== "") {
            obj.frequency = message.frequency;
        }
        return obj;
    },
    create (base) {
        return GetBudgetImpactByFrequencyRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseGetBudgetImpactByFrequencyRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_startDate;
        message.startDate = (_object_startDate = object.startDate) != null ? _object_startDate : undefined;
        var _object_endDate;
        message.endDate = (_object_endDate = object.endDate) != null ? _object_endDate : undefined;
        var _object_frequency;
        message.frequency = (_object_frequency = object.frequency) != null ? _object_frequency : "";
        return message;
    }
};
function createBaseListBudgetsImpactsRequest() {
    return {
        budgets: [],
        tradeableAssetsOnly: false
    };
}
const ListBudgetsImpactsRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.budgets){
            GetBudgetImpactRequest.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.tradeableAssetsOnly !== false) {
            writer.uint32(16).bool(message.tradeableAssetsOnly);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListBudgetsImpactsRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.budgets.push(GetBudgetImpactRequest.decode(reader, reader.uint32()));
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 16) {
                            break;
                        }
                        message.tradeableAssetsOnly = reader.bool();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            budgets: globalThis.Array.isArray(object == null ? void 0 : object.budgets) ? object.budgets.map((e)=>GetBudgetImpactRequest.fromJSON(e)) : [],
            tradeableAssetsOnly: isSet(object.tradeableAssetsOnly) ? globalThis.Boolean(object.tradeableAssetsOnly) : false
        };
    },
    toJSON (message) {
        var _message_budgets;
        const obj = {};
        if ((_message_budgets = message.budgets) == null ? void 0 : _message_budgets.length) {
            obj.budgets = message.budgets.map((e)=>GetBudgetImpactRequest.toJSON(e));
        }
        if (message.tradeableAssetsOnly !== false) {
            obj.tradeableAssetsOnly = message.tradeableAssetsOnly;
        }
        return obj;
    },
    create (base) {
        return ListBudgetsImpactsRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_budgets;
        const message = createBaseListBudgetsImpactsRequest();
        message.budgets = ((_object_budgets = object.budgets) == null ? void 0 : _object_budgets.map((e)=>GetBudgetImpactRequest.fromPartial(e))) || [];
        var _object_tradeableAssetsOnly;
        message.tradeableAssetsOnly = (_object_tradeableAssetsOnly = object.tradeableAssetsOnly) != null ? _object_tradeableAssetsOnly : false;
        return message;
    }
};
function createBaseGetProfitsAndLossesRequest() {
    return {
        userId: "",
        strategyId: "",
        startDate: undefined,
        endDate: undefined,
        frequency: ""
    };
}
const GetProfitsAndLossesRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        if (message.startDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();
        }
        if (message.endDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();
        }
        if (message.frequency !== "") {
            writer.uint32(42).string(message.frequency);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProfitsAndLossesRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.startDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.endDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.frequency = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
            frequency: isSet(object.frequency) ? globalThis.String(object.frequency) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        if (message.frequency !== "") {
            obj.frequency = message.frequency;
        }
        return obj;
    },
    create (base) {
        return GetProfitsAndLossesRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseGetProfitsAndLossesRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_startDate;
        message.startDate = (_object_startDate = object.startDate) != null ? _object_startDate : undefined;
        var _object_endDate;
        message.endDate = (_object_endDate = object.endDate) != null ? _object_endDate : undefined;
        var _object_frequency;
        message.frequency = (_object_frequency = object.frequency) != null ? _object_frequency : "";
        return message;
    }
};
function createBaseUpdateOrderRequest() {
    return {
        id: "",
        userId: "",
        status: "",
        date: undefined,
        orderId: undefined,
        volumeTraded: undefined,
        quoteVolumeTraded: undefined,
        inOrderBook: undefined,
        errorCode: undefined,
        errorMessage: undefined
    };
}
const UpdateOrderRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.status !== "") {
            writer.uint32(26).string(message.status);
        }
        if (message.date !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.date), writer.uint32(34).fork()).join();
        }
        if (message.orderId !== undefined) {
            writer.uint32(42).string(message.orderId);
        }
        if (message.volumeTraded !== undefined) {
            writer.uint32(49).double(message.volumeTraded);
        }
        if (message.quoteVolumeTraded !== undefined) {
            writer.uint32(57).double(message.quoteVolumeTraded);
        }
        if (message.inOrderBook !== undefined) {
            writer.uint32(64).bool(message.inOrderBook);
        }
        if (message.errorCode !== undefined) {
            writer.uint32(74).string(message.errorCode);
        }
        if (message.errorMessage !== undefined) {
            writer.uint32(82).string(message.errorMessage);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrderRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.status = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.date = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.orderId = reader.string();
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 49) {
                            break;
                        }
                        message.volumeTraded = reader.double();
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 57) {
                            break;
                        }
                        message.quoteVolumeTraded = reader.double();
                        continue;
                    }
                case 8:
                    {
                        if (tag !== 64) {
                            break;
                        }
                        message.inOrderBook = reader.bool();
                        continue;
                    }
                case 9:
                    {
                        if (tag !== 74) {
                            break;
                        }
                        message.errorCode = reader.string();
                        continue;
                    }
                case 10:
                    {
                        if (tag !== 82) {
                            break;
                        }
                        message.errorMessage = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            date: isSet(object.date) ? fromJsonTimestamp(object.date) : undefined,
            orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : undefined,
            volumeTraded: isSet(object.volumeTraded) ? globalThis.Number(object.volumeTraded) : undefined,
            quoteVolumeTraded: isSet(object.quoteVolumeTraded) ? globalThis.Number(object.quoteVolumeTraded) : undefined,
            inOrderBook: isSet(object.inOrderBook) ? globalThis.Boolean(object.inOrderBook) : undefined,
            errorCode: isSet(object.errorCode) ? globalThis.String(object.errorCode) : undefined,
            errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.date !== undefined) {
            obj.date = message.date.toISOString();
        }
        if (message.orderId !== undefined) {
            obj.orderId = message.orderId;
        }
        if (message.volumeTraded !== undefined) {
            obj.volumeTraded = message.volumeTraded;
        }
        if (message.quoteVolumeTraded !== undefined) {
            obj.quoteVolumeTraded = message.quoteVolumeTraded;
        }
        if (message.inOrderBook !== undefined) {
            obj.inOrderBook = message.inOrderBook;
        }
        if (message.errorCode !== undefined) {
            obj.errorCode = message.errorCode;
        }
        if (message.errorMessage !== undefined) {
            obj.errorMessage = message.errorMessage;
        }
        return obj;
    },
    create (base) {
        return UpdateOrderRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseUpdateOrderRequest();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_status;
        message.status = (_object_status = object.status) != null ? _object_status : "";
        var _object_date;
        message.date = (_object_date = object.date) != null ? _object_date : undefined;
        var _object_orderId;
        message.orderId = (_object_orderId = object.orderId) != null ? _object_orderId : undefined;
        var _object_volumeTraded;
        message.volumeTraded = (_object_volumeTraded = object.volumeTraded) != null ? _object_volumeTraded : undefined;
        var _object_quoteVolumeTraded;
        message.quoteVolumeTraded = (_object_quoteVolumeTraded = object.quoteVolumeTraded) != null ? _object_quoteVolumeTraded : undefined;
        var _object_inOrderBook;
        message.inOrderBook = (_object_inOrderBook = object.inOrderBook) != null ? _object_inOrderBook : undefined;
        var _object_errorCode;
        message.errorCode = (_object_errorCode = object.errorCode) != null ? _object_errorCode : undefined;
        var _object_errorMessage;
        message.errorMessage = (_object_errorMessage = object.errorMessage) != null ? _object_errorMessage : undefined;
        return message;
    }
};
function createBaseUpdateOrdersBulkRequest() {
    return {
        orders: []
    };
}
const UpdateOrdersBulkRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.orders){
            UpdateOrderRequest.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrdersBulkRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.orders.push(UpdateOrderRequest.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            orders: globalThis.Array.isArray(object == null ? void 0 : object.orders) ? object.orders.map((e)=>UpdateOrderRequest.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_orders;
        const obj = {};
        if ((_message_orders = message.orders) == null ? void 0 : _message_orders.length) {
            obj.orders = message.orders.map((e)=>UpdateOrderRequest.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return UpdateOrdersBulkRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_orders;
        const message = createBaseUpdateOrdersBulkRequest();
        message.orders = ((_object_orders = object.orders) == null ? void 0 : _object_orders.map((e)=>UpdateOrderRequest.fromPartial(e))) || [];
        return message;
    }
};
const OrdersService = {
    createOrders: {
        path: "/spotlight.Orders/CreateOrders",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(CreateOrdersRequest.encode(value).finish()),
        requestDeserialize: (value)=>CreateOrdersRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(OrdersListResponse.encode(value).finish()),
        responseDeserialize: (value)=>OrdersListResponse.decode(value)
    },
    cancelAllOrdersByStrategyId: {
        path: "/spotlight.Orders/CancelAllOrdersByStrategyId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(CancelAllOrdersByStrategyIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>CancelAllOrdersByStrategyIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(OrdersListResponse.encode(value).finish()),
        responseDeserialize: (value)=>OrdersListResponse.decode(value)
    },
    getOrderById: {
        path: "/spotlight.Orders/GetOrderById",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(OrderByIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>OrderByIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(OrderResponse.encode(value).finish()),
        responseDeserialize: (value)=>OrderResponse.decode(value)
    },
    listOrdersByStrategyId: {
        path: "/spotlight.Orders/ListOrdersByStrategyId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ListOrdersByStrategyIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>ListOrdersByStrategyIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(OrdersListResponse.encode(value).finish()),
        responseDeserialize: (value)=>OrdersListResponse.decode(value)
    },
    listOrdersByUserId: {
        path: "/spotlight.Orders/ListOrdersByUserId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ListOrdersByUserIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>ListOrdersByUserIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(OrdersListResponse.encode(value).finish()),
        responseDeserialize: (value)=>OrdersListResponse.decode(value)
    },
    listPendingOrdersTriggeredByCandle: {
        path: "/spotlight.Orders/ListPendingOrdersTriggeredByCandle",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(CandleRequest.encode(value).finish()),
        requestDeserialize: (value)=>CandleRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(OrdersListResponse.encode(value).finish()),
        responseDeserialize: (value)=>OrdersListResponse.decode(value)
    },
    extractHasOpenedOrders: {
        path: "/spotlight.Orders/ExtractHasOpenedOrders",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ExtractHasOpenedOrdersRequest.encode(value).finish()),
        requestDeserialize: (value)=>ExtractHasOpenedOrdersRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(ExtractHasOpenedOrdersResponse.encode(value).finish()),
        responseDeserialize: (value)=>ExtractHasOpenedOrdersResponse.decode(value)
    },
    getBudgetImpact: {
        path: "/spotlight.Orders/GetBudgetImpact",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(GetBudgetImpactRequest.encode(value).finish()),
        requestDeserialize: (value)=>GetBudgetImpactRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(_struct.Struct.encode(_struct.Struct.wrap(value)).finish()),
        responseDeserialize: (value)=>_struct.Struct.unwrap(_struct.Struct.decode(value))
    },
    getBudgetImpactByFrequency: {
        path: "/spotlight.Orders/GetBudgetImpactByFrequency",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(GetBudgetImpactByFrequencyRequest.encode(value).finish()),
        requestDeserialize: (value)=>GetBudgetImpactByFrequencyRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(_struct.Struct.encode(_struct.Struct.wrap(value)).finish()),
        responseDeserialize: (value)=>_struct.Struct.unwrap(_struct.Struct.decode(value))
    },
    listBudgetsImpacts: {
        path: "/spotlight.Orders/ListBudgetsImpacts",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ListBudgetsImpactsRequest.encode(value).finish()),
        requestDeserialize: (value)=>ListBudgetsImpactsRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(_struct.Struct.encode(_struct.Struct.wrap(value)).finish()),
        responseDeserialize: (value)=>_struct.Struct.unwrap(_struct.Struct.decode(value))
    },
    getProfitsAndLosses: {
        path: "/spotlight.Orders/GetProfitsAndLosses",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(GetProfitsAndLossesRequest.encode(value).finish()),
        requestDeserialize: (value)=>GetProfitsAndLossesRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(_struct.Struct.encode(_struct.Struct.wrap(value)).finish()),
        responseDeserialize: (value)=>_struct.Struct.unwrap(_struct.Struct.decode(value))
    },
    updateOrder: {
        path: "/spotlight.Orders/UpdateOrder",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(UpdateOrderRequest.encode(value).finish()),
        requestDeserialize: (value)=>UpdateOrderRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(OrderResponse.encode(value).finish()),
        responseDeserialize: (value)=>OrderResponse.decode(value)
    },
    updateOrdersBulk: {
        path: "/spotlight.Orders/UpdateOrdersBulk",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(UpdateOrdersBulkRequest.encode(value).finish()),
        requestDeserialize: (value)=>UpdateOrdersBulkRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(OrdersListResponse.encode(value).finish()),
        responseDeserialize: (value)=>OrdersListResponse.decode(value)
    }
};
const OrdersClient = (0, _grpcjs.makeGenericClientConstructor)(OrdersService, "spotlight.Orders");
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = date.getTime() % 1000 * 1000000;
    return {
        seconds,
        nanos
    };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    } else if (typeof o === "string") {
        return new globalThis.Date(o);
    } else {
        return fromTimestamp(_timestamp.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

//# sourceMappingURL=orders.js.map