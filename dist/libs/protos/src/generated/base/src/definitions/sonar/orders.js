// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: src/definitions/sonar/orders.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CancelOrdersRequest: function() {
        return CancelOrdersRequest;
    },
    CancelRequest: function() {
        return CancelRequest;
    },
    Order: function() {
        return Order;
    },
    OrdersClient: function() {
        return OrdersClient;
    },
    OrdersListResponse: function() {
        return OrdersListResponse;
    },
    OrdersService: function() {
        return OrdersService;
    },
    PlaceOrdersRequest: function() {
        return PlaceOrdersRequest;
    }
});
const _wire = require("@bufbuild/protobuf/wire");
const _grpcjs = require("@grpc/grpc-js");
const _empty = require("../../../google/protobuf/empty");
const _timestamp = require("../../../google/protobuf/timestamp");
function createBaseOrder() {
    return {
        id: "",
        base: "",
        quote: "",
        side: "",
        type: "",
        volume: undefined,
        quoteVolume: undefined,
        displayVolume: undefined,
        timeInForce: undefined,
        limitPrice: undefined,
        trailingDelta: undefined,
        triggerPrice: undefined
    };
}
const Order = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.base !== "") {
            writer.uint32(18).string(message.base);
        }
        if (message.quote !== "") {
            writer.uint32(26).string(message.quote);
        }
        if (message.side !== "") {
            writer.uint32(34).string(message.side);
        }
        if (message.type !== "") {
            writer.uint32(42).string(message.type);
        }
        if (message.volume !== undefined) {
            writer.uint32(49).double(message.volume);
        }
        if (message.quoteVolume !== undefined) {
            writer.uint32(57).double(message.quoteVolume);
        }
        if (message.displayVolume !== undefined) {
            writer.uint32(65).double(message.displayVolume);
        }
        if (message.timeInForce !== undefined) {
            writer.uint32(74).string(message.timeInForce);
        }
        if (message.limitPrice !== undefined) {
            writer.uint32(81).double(message.limitPrice);
        }
        if (message.trailingDelta !== undefined) {
            writer.uint32(89).double(message.trailingDelta);
        }
        if (message.triggerPrice !== undefined) {
            writer.uint32(97).double(message.triggerPrice);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrder();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.base = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.quote = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.side = reader.string();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.type = reader.string();
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 49) {
                            break;
                        }
                        message.volume = reader.double();
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 57) {
                            break;
                        }
                        message.quoteVolume = reader.double();
                        continue;
                    }
                case 8:
                    {
                        if (tag !== 65) {
                            break;
                        }
                        message.displayVolume = reader.double();
                        continue;
                    }
                case 9:
                    {
                        if (tag !== 74) {
                            break;
                        }
                        message.timeInForce = reader.string();
                        continue;
                    }
                case 10:
                    {
                        if (tag !== 81) {
                            break;
                        }
                        message.limitPrice = reader.double();
                        continue;
                    }
                case 11:
                    {
                        if (tag !== 89) {
                            break;
                        }
                        message.trailingDelta = reader.double();
                        continue;
                    }
                case 12:
                    {
                        if (tag !== 97) {
                            break;
                        }
                        message.triggerPrice = reader.double();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
            side: isSet(object.side) ? globalThis.String(object.side) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            volume: isSet(object.volume) ? globalThis.Number(object.volume) : undefined,
            quoteVolume: isSet(object.quoteVolume) ? globalThis.Number(object.quoteVolume) : undefined,
            displayVolume: isSet(object.displayVolume) ? globalThis.Number(object.displayVolume) : undefined,
            timeInForce: isSet(object.timeInForce) ? globalThis.String(object.timeInForce) : undefined,
            limitPrice: isSet(object.limitPrice) ? globalThis.Number(object.limitPrice) : undefined,
            trailingDelta: isSet(object.trailingDelta) ? globalThis.Number(object.trailingDelta) : undefined,
            triggerPrice: isSet(object.triggerPrice) ? globalThis.Number(object.triggerPrice) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.quote !== "") {
            obj.quote = message.quote;
        }
        if (message.side !== "") {
            obj.side = message.side;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.volume !== undefined) {
            obj.volume = message.volume;
        }
        if (message.quoteVolume !== undefined) {
            obj.quoteVolume = message.quoteVolume;
        }
        if (message.displayVolume !== undefined) {
            obj.displayVolume = message.displayVolume;
        }
        if (message.timeInForce !== undefined) {
            obj.timeInForce = message.timeInForce;
        }
        if (message.limitPrice !== undefined) {
            obj.limitPrice = message.limitPrice;
        }
        if (message.trailingDelta !== undefined) {
            obj.trailingDelta = message.trailingDelta;
        }
        if (message.triggerPrice !== undefined) {
            obj.triggerPrice = message.triggerPrice;
        }
        return obj;
    },
    create (base) {
        return Order.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseOrder();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_base;
        message.base = (_object_base = object.base) != null ? _object_base : "";
        var _object_quote;
        message.quote = (_object_quote = object.quote) != null ? _object_quote : "";
        var _object_side;
        message.side = (_object_side = object.side) != null ? _object_side : "";
        var _object_type;
        message.type = (_object_type = object.type) != null ? _object_type : "";
        var _object_volume;
        message.volume = (_object_volume = object.volume) != null ? _object_volume : undefined;
        var _object_quoteVolume;
        message.quoteVolume = (_object_quoteVolume = object.quoteVolume) != null ? _object_quoteVolume : undefined;
        var _object_displayVolume;
        message.displayVolume = (_object_displayVolume = object.displayVolume) != null ? _object_displayVolume : undefined;
        var _object_timeInForce;
        message.timeInForce = (_object_timeInForce = object.timeInForce) != null ? _object_timeInForce : undefined;
        var _object_limitPrice;
        message.limitPrice = (_object_limitPrice = object.limitPrice) != null ? _object_limitPrice : undefined;
        var _object_trailingDelta;
        message.trailingDelta = (_object_trailingDelta = object.trailingDelta) != null ? _object_trailingDelta : undefined;
        var _object_triggerPrice;
        message.triggerPrice = (_object_triggerPrice = object.triggerPrice) != null ? _object_triggerPrice : undefined;
        return message;
    }
};
function createBasePlaceOrdersRequest() {
    return {
        userId: "",
        broker: "",
        expireAt: undefined,
        orders: []
    };
}
const PlaceOrdersRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.broker !== "") {
            writer.uint32(18).string(message.broker);
        }
        if (message.expireAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.expireAt), writer.uint32(26).fork()).join();
        }
        for (const v of message.orders){
            Order.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlaceOrdersRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.expireAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.orders.push(Order.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            expireAt: isSet(object.expireAt) ? fromJsonTimestamp(object.expireAt) : undefined,
            orders: globalThis.Array.isArray(object == null ? void 0 : object.orders) ? object.orders.map((e)=>Order.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_orders;
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if (message.expireAt !== undefined) {
            obj.expireAt = message.expireAt.toISOString();
        }
        if ((_message_orders = message.orders) == null ? void 0 : _message_orders.length) {
            obj.orders = message.orders.map((e)=>Order.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return PlaceOrdersRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_orders;
        const message = createBasePlaceOrdersRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        var _object_expireAt;
        message.expireAt = (_object_expireAt = object.expireAt) != null ? _object_expireAt : undefined;
        message.orders = ((_object_orders = object.orders) == null ? void 0 : _object_orders.map((e)=>Order.fromPartial(e))) || [];
        return message;
    }
};
function createBaseOrdersListResponse() {
    return {
        orders: []
    };
}
const OrdersListResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.orders){
            Order.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOrdersListResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.orders.push(Order.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            orders: globalThis.Array.isArray(object == null ? void 0 : object.orders) ? object.orders.map((e)=>Order.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_orders;
        const obj = {};
        if ((_message_orders = message.orders) == null ? void 0 : _message_orders.length) {
            obj.orders = message.orders.map((e)=>Order.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return OrdersListResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_orders;
        const message = createBaseOrdersListResponse();
        message.orders = ((_object_orders = object.orders) == null ? void 0 : _object_orders.map((e)=>Order.fromPartial(e))) || [];
        return message;
    }
};
function createBaseCancelRequest() {
    return {
        id: "",
        base: "",
        quote: ""
    };
}
const CancelRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.base !== "") {
            writer.uint32(18).string(message.base);
        }
        if (message.quote !== "") {
            writer.uint32(26).string(message.quote);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.base = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.quote = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            base: isSet(object.base) ? globalThis.String(object.base) : "",
            quote: isSet(object.quote) ? globalThis.String(object.quote) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.base !== "") {
            obj.base = message.base;
        }
        if (message.quote !== "") {
            obj.quote = message.quote;
        }
        return obj;
    },
    create (base) {
        return CancelRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseCancelRequest();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_base;
        message.base = (_object_base = object.base) != null ? _object_base : "";
        var _object_quote;
        message.quote = (_object_quote = object.quote) != null ? _object_quote : "";
        return message;
    }
};
function createBaseCancelOrdersRequest() {
    return {
        userId: "",
        broker: "",
        orders: []
    };
}
const CancelOrdersRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.broker !== "") {
            writer.uint32(18).string(message.broker);
        }
        for (const v of message.orders){
            CancelRequest.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelOrdersRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.orders.push(CancelRequest.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            orders: globalThis.Array.isArray(object == null ? void 0 : object.orders) ? object.orders.map((e)=>CancelRequest.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_orders;
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if ((_message_orders = message.orders) == null ? void 0 : _message_orders.length) {
            obj.orders = message.orders.map((e)=>CancelRequest.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return CancelOrdersRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_orders;
        const message = createBaseCancelOrdersRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        message.orders = ((_object_orders = object.orders) == null ? void 0 : _object_orders.map((e)=>CancelRequest.fromPartial(e))) || [];
        return message;
    }
};
const OrdersService = {
    placeOrders: {
        path: "/sonar.Orders/PlaceOrders",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(PlaceOrdersRequest.encode(value).finish()),
        requestDeserialize: (value)=>PlaceOrdersRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(OrdersListResponse.encode(value).finish()),
        responseDeserialize: (value)=>OrdersListResponse.decode(value)
    },
    cancelOrders: {
        path: "/sonar.Orders/CancelOrders",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(CancelOrdersRequest.encode(value).finish()),
        requestDeserialize: (value)=>CancelOrdersRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(_empty.Empty.encode(value).finish()),
        responseDeserialize: (value)=>_empty.Empty.decode(value)
    }
};
const OrdersClient = (0, _grpcjs.makeGenericClientConstructor)(OrdersService, "sonar.Orders");
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = date.getTime() % 1000 * 1000000;
    return {
        seconds,
        nanos
    };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    } else if (typeof o === "string") {
        return new globalThis.Date(o);
    } else {
        return fromTimestamp(_timestamp.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

//# sourceMappingURL=orders.js.map