// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: src/definitions/spotlight/fees.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Fee: function() {
        return Fee;
    },
    FeeByIdRequest: function() {
        return FeeByIdRequest;
    },
    FeeResponse: function() {
        return FeeResponse;
    },
    FeesClient: function() {
        return FeesClient;
    },
    FeesListResponse: function() {
        return FeesListResponse;
    },
    FeesService: function() {
        return FeesService;
    },
    ListFeesByOrderIdRequest: function() {
        return ListFeesByOrderIdRequest;
    },
    ListFeesByStrategyIdRequest: function() {
        return ListFeesByStrategyIdRequest;
    },
    SetOrderFeesRequest: function() {
        return SetOrderFeesRequest;
    }
});
const _wire = require("@bufbuild/protobuf/wire");
const _grpcjs = require("@grpc/grpc-js");
const _timestamp = require("../../../google/protobuf/timestamp");
function createBaseFee() {
    return {
        asset: "",
        broker: "",
        amount: 0
    };
}
const Fee = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.asset !== "") {
            writer.uint32(10).string(message.asset);
        }
        if (message.broker !== "") {
            writer.uint32(18).string(message.broker);
        }
        if (message.amount !== 0) {
            writer.uint32(25).double(message.amount);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFee();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.asset = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 25) {
                            break;
                        }
                        message.amount = reader.double();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.asset !== "") {
            obj.asset = message.asset;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        return obj;
    },
    create (base) {
        return Fee.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseFee();
        var _object_asset;
        message.asset = (_object_asset = object.asset) != null ? _object_asset : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        var _object_amount;
        message.amount = (_object_amount = object.amount) != null ? _object_amount : 0;
        return message;
    }
};
function createBaseFeeResponse() {
    return {
        id: "",
        userId: "",
        orderId: undefined,
        asset: "",
        broker: "",
        amount: 0
    };
}
const FeeResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.orderId !== undefined) {
            writer.uint32(26).string(message.orderId);
        }
        if (message.asset !== "") {
            writer.uint32(34).string(message.asset);
        }
        if (message.broker !== "") {
            writer.uint32(42).string(message.broker);
        }
        if (message.amount !== 0) {
            writer.uint32(49).double(message.amount);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeeResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.orderId = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.asset = reader.string();
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.broker = reader.string();
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 49) {
                            break;
                        }
                        message.amount = reader.double();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : undefined,
            asset: isSet(object.asset) ? globalThis.String(object.asset) : "",
            broker: isSet(object.broker) ? globalThis.String(object.broker) : "",
            amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.orderId !== undefined) {
            obj.orderId = message.orderId;
        }
        if (message.asset !== "") {
            obj.asset = message.asset;
        }
        if (message.broker !== "") {
            obj.broker = message.broker;
        }
        if (message.amount !== 0) {
            obj.amount = message.amount;
        }
        return obj;
    },
    create (base) {
        return FeeResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseFeeResponse();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_orderId;
        message.orderId = (_object_orderId = object.orderId) != null ? _object_orderId : undefined;
        var _object_asset;
        message.asset = (_object_asset = object.asset) != null ? _object_asset : "";
        var _object_broker;
        message.broker = (_object_broker = object.broker) != null ? _object_broker : "";
        var _object_amount;
        message.amount = (_object_amount = object.amount) != null ? _object_amount : 0;
        return message;
    }
};
function createBaseFeesListResponse() {
    return {
        fees: []
    };
}
const FeesListResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.fees){
            FeeResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeesListResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.fees.push(FeeResponse.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            fees: globalThis.Array.isArray(object == null ? void 0 : object.fees) ? object.fees.map((e)=>FeeResponse.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_fees;
        const obj = {};
        if ((_message_fees = message.fees) == null ? void 0 : _message_fees.length) {
            obj.fees = message.fees.map((e)=>FeeResponse.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return FeesListResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_fees;
        const message = createBaseFeesListResponse();
        message.fees = ((_object_fees = object.fees) == null ? void 0 : _object_fees.map((e)=>FeeResponse.fromPartial(e))) || [];
        return message;
    }
};
function createBaseFeeByIdRequest() {
    return {
        id: "",
        userId: ""
    };
}
const FeeByIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeeByIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create (base) {
        return FeeByIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseFeeByIdRequest();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        return message;
    }
};
function createBaseListFeesByOrderIdRequest() {
    return {
        userId: "",
        orderId: ""
    };
}
const ListFeesByOrderIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.orderId !== "") {
            writer.uint32(18).string(message.orderId);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFeesByOrderIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.orderId = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.orderId !== "") {
            obj.orderId = message.orderId;
        }
        return obj;
    },
    create (base) {
        return ListFeesByOrderIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseListFeesByOrderIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_orderId;
        message.orderId = (_object_orderId = object.orderId) != null ? _object_orderId : "";
        return message;
    }
};
function createBaseListFeesByStrategyIdRequest() {
    return {
        userId: "",
        strategyId: "",
        startDate: undefined,
        endDate: undefined
    };
}
const ListFeesByStrategyIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        if (message.startDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();
        }
        if (message.endDate !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFeesByStrategyIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.startDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.endDate = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
            endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.startDate !== undefined) {
            obj.startDate = message.startDate.toISOString();
        }
        if (message.endDate !== undefined) {
            obj.endDate = message.endDate.toISOString();
        }
        return obj;
    },
    create (base) {
        return ListFeesByStrategyIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseListFeesByStrategyIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_startDate;
        message.startDate = (_object_startDate = object.startDate) != null ? _object_startDate : undefined;
        var _object_endDate;
        message.endDate = (_object_endDate = object.endDate) != null ? _object_endDate : undefined;
        return message;
    }
};
function createBaseSetOrderFeesRequest() {
    return {
        userId: "",
        orderId: "",
        fees: []
    };
}
const SetOrderFeesRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.orderId !== "") {
            writer.uint32(18).string(message.orderId);
        }
        for (const v of message.fees){
            Fee.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetOrderFeesRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.orderId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.fees.push(Fee.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
            fees: globalThis.Array.isArray(object == null ? void 0 : object.fees) ? object.fees.map((e)=>Fee.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_fees;
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.orderId !== "") {
            obj.orderId = message.orderId;
        }
        if ((_message_fees = message.fees) == null ? void 0 : _message_fees.length) {
            obj.fees = message.fees.map((e)=>Fee.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return SetOrderFeesRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_fees;
        const message = createBaseSetOrderFeesRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_orderId;
        message.orderId = (_object_orderId = object.orderId) != null ? _object_orderId : "";
        message.fees = ((_object_fees = object.fees) == null ? void 0 : _object_fees.map((e)=>Fee.fromPartial(e))) || [];
        return message;
    }
};
const FeesService = {
    getFeeById: {
        path: "/spotlight.Fees/GetFeeById",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(FeeByIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>FeeByIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FeeResponse.encode(value).finish()),
        responseDeserialize: (value)=>FeeResponse.decode(value)
    },
    listFeesByOrderId: {
        path: "/spotlight.Fees/ListFeesByOrderId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ListFeesByOrderIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>ListFeesByOrderIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FeesListResponse.encode(value).finish()),
        responseDeserialize: (value)=>FeesListResponse.decode(value)
    },
    listFeesByStrategyId: {
        path: "/spotlight.Fees/ListFeesByStrategyId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ListFeesByStrategyIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>ListFeesByStrategyIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FeesListResponse.encode(value).finish()),
        responseDeserialize: (value)=>FeesListResponse.decode(value)
    },
    setOrderFees: {
        path: "/spotlight.Fees/SetOrderFees",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(SetOrderFeesRequest.encode(value).finish()),
        requestDeserialize: (value)=>SetOrderFeesRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FeesListResponse.encode(value).finish()),
        responseDeserialize: (value)=>FeesListResponse.decode(value)
    }
};
const FeesClient = (0, _grpcjs.makeGenericClientConstructor)(FeesService, "spotlight.Fees");
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = date.getTime() % 1000 * 1000000;
    return {
        seconds,
        nanos
    };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    } else if (typeof o === "string") {
        return new globalThis.Date(o);
    } else {
        return fromTimestamp(_timestamp.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}

//# sourceMappingURL=fees.js.map