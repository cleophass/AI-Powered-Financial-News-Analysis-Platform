// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.1
// source: src/definitions/minerva/flows.proto
/* eslint-disable */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ArchivedFlowsByStrategyIdRequest: function() {
        return ArchivedFlowsByStrategyIdRequest;
    },
    CreateDraftFlowRequest: function() {
        return CreateDraftFlowRequest;
    },
    FlowByIdRequest: function() {
        return FlowByIdRequest;
    },
    FlowByStrategyIdRequest: function() {
        return FlowByStrategyIdRequest;
    },
    FlowResponse: function() {
        return FlowResponse;
    },
    FlowsByStrategyIdRequest: function() {
        return FlowsByStrategyIdRequest;
    },
    FlowsClient: function() {
        return FlowsClient;
    },
    FlowsListResponse: function() {
        return FlowsListResponse;
    },
    FlowsService: function() {
        return FlowsService;
    },
    ListFlowsByStrategyIdsRequest: function() {
        return ListFlowsByStrategyIdsRequest;
    },
    PromoteDraftFlowRequest: function() {
        return PromoteDraftFlowRequest;
    }
});
const _wire = require("@bufbuild/protobuf/wire");
const _grpcjs = require("@grpc/grpc-js");
const _struct = require("../../../google/protobuf/struct");
const _timestamp = require("../../../google/protobuf/timestamp");
function createBaseFlowResponse() {
    return {
        id: "",
        userId: "",
        strategyId: "",
        graph: undefined,
        ast: undefined,
        status: "",
        isArchived: false,
        backtestsCount: 0,
        executionsCount: 0,
        createdAt: undefined,
        updatedAt: undefined
    };
}
const FlowResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(26).string(message.strategyId);
        }
        if (message.graph !== undefined) {
            _struct.Struct.encode(_struct.Struct.wrap(message.graph), writer.uint32(34).fork()).join();
        }
        if (message.ast !== undefined) {
            _struct.Struct.encode(_struct.Struct.wrap(message.ast), writer.uint32(42).fork()).join();
        }
        if (message.status !== "") {
            writer.uint32(50).string(message.status);
        }
        if (message.isArchived !== false) {
            writer.uint32(56).bool(message.isArchived);
        }
        if (message.backtestsCount !== 0) {
            writer.uint32(64).int32(message.backtestsCount);
        }
        if (message.executionsCount !== 0) {
            writer.uint32(72).int32(message.executionsCount);
        }
        if (message.createdAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(82).fork()).join();
        }
        if (message.updatedAt !== undefined) {
            _timestamp.Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlowResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 4:
                    {
                        if (tag !== 34) {
                            break;
                        }
                        message.graph = _struct.Struct.unwrap(_struct.Struct.decode(reader, reader.uint32()));
                        continue;
                    }
                case 5:
                    {
                        if (tag !== 42) {
                            break;
                        }
                        message.ast = _struct.Struct.unwrap(_struct.Struct.decode(reader, reader.uint32()));
                        continue;
                    }
                case 6:
                    {
                        if (tag !== 50) {
                            break;
                        }
                        message.status = reader.string();
                        continue;
                    }
                case 7:
                    {
                        if (tag !== 56) {
                            break;
                        }
                        message.isArchived = reader.bool();
                        continue;
                    }
                case 8:
                    {
                        if (tag !== 64) {
                            break;
                        }
                        message.backtestsCount = reader.int32();
                        continue;
                    }
                case 9:
                    {
                        if (tag !== 72) {
                            break;
                        }
                        message.executionsCount = reader.int32();
                        continue;
                    }
                case 10:
                    {
                        if (tag !== 82) {
                            break;
                        }
                        message.createdAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
                case 11:
                    {
                        if (tag !== 90) {
                            break;
                        }
                        message.updatedAt = fromTimestamp(_timestamp.Timestamp.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            graph: isObject(object.graph) ? object.graph : undefined,
            ast: isObject(object.ast) ? object.ast : undefined,
            status: isSet(object.status) ? globalThis.String(object.status) : "",
            isArchived: isSet(object.isArchived) ? globalThis.Boolean(object.isArchived) : false,
            backtestsCount: isSet(object.backtestsCount) ? globalThis.Number(object.backtestsCount) : 0,
            executionsCount: isSet(object.executionsCount) ? globalThis.Number(object.executionsCount) : 0,
            createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.graph !== undefined) {
            obj.graph = message.graph;
        }
        if (message.ast !== undefined) {
            obj.ast = message.ast;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        if (message.isArchived !== false) {
            obj.isArchived = message.isArchived;
        }
        if (message.backtestsCount !== 0) {
            obj.backtestsCount = Math.round(message.backtestsCount);
        }
        if (message.executionsCount !== 0) {
            obj.executionsCount = Math.round(message.executionsCount);
        }
        if (message.createdAt !== undefined) {
            obj.createdAt = message.createdAt.toISOString();
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = message.updatedAt.toISOString();
        }
        return obj;
    },
    create (base) {
        return FlowResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseFlowResponse();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_graph;
        message.graph = (_object_graph = object.graph) != null ? _object_graph : undefined;
        var _object_ast;
        message.ast = (_object_ast = object.ast) != null ? _object_ast : undefined;
        var _object_status;
        message.status = (_object_status = object.status) != null ? _object_status : "";
        var _object_isArchived;
        message.isArchived = (_object_isArchived = object.isArchived) != null ? _object_isArchived : false;
        var _object_backtestsCount;
        message.backtestsCount = (_object_backtestsCount = object.backtestsCount) != null ? _object_backtestsCount : 0;
        var _object_executionsCount;
        message.executionsCount = (_object_executionsCount = object.executionsCount) != null ? _object_executionsCount : 0;
        var _object_createdAt;
        message.createdAt = (_object_createdAt = object.createdAt) != null ? _object_createdAt : undefined;
        var _object_updatedAt;
        message.updatedAt = (_object_updatedAt = object.updatedAt) != null ? _object_updatedAt : undefined;
        return message;
    }
};
function createBaseFlowsListResponse() {
    return {
        flows: []
    };
}
const FlowsListResponse = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.flows){
            FlowResponse.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlowsListResponse();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.flows.push(FlowResponse.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            flows: globalThis.Array.isArray(object == null ? void 0 : object.flows) ? object.flows.map((e)=>FlowResponse.fromJSON(e)) : []
        };
    },
    toJSON (message) {
        var _message_flows;
        const obj = {};
        if ((_message_flows = message.flows) == null ? void 0 : _message_flows.length) {
            obj.flows = message.flows.map((e)=>FlowResponse.toJSON(e));
        }
        return obj;
    },
    create (base) {
        return FlowsListResponse.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_flows;
        const message = createBaseFlowsListResponse();
        message.flows = ((_object_flows = object.flows) == null ? void 0 : _object_flows.map((e)=>FlowResponse.fromPartial(e))) || [];
        return message;
    }
};
function createBaseCreateDraftFlowRequest() {
    return {
        userId: "",
        strategyId: "",
        graph: undefined
    };
}
const CreateDraftFlowRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        if (message.graph !== undefined) {
            _struct.Struct.encode(_struct.Struct.wrap(message.graph), writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateDraftFlowRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.graph = _struct.Struct.unwrap(_struct.Struct.decode(reader, reader.uint32()));
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            graph: isObject(object.graph) ? object.graph : undefined
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.graph !== undefined) {
            obj.graph = message.graph;
        }
        return obj;
    },
    create (base) {
        return CreateDraftFlowRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseCreateDraftFlowRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_graph;
        message.graph = (_object_graph = object.graph) != null ? _object_graph : undefined;
        return message;
    }
};
function createBasePromoteDraftFlowRequest() {
    return {
        strategyId: "",
        userId: ""
    };
}
const PromoteDraftFlowRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.strategyId !== "") {
            writer.uint32(10).string(message.strategyId);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePromoteDraftFlowRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create (base) {
        return PromoteDraftFlowRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBasePromoteDraftFlowRequest();
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        return message;
    }
};
function createBaseArchivedFlowsByStrategyIdRequest() {
    return {
        userId: "",
        strategyId: "",
        status: ""
    };
}
const ArchivedFlowsByStrategyIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        if (message.status !== "") {
            writer.uint32(26).string(message.status);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseArchivedFlowsByStrategyIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.status = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        return obj;
    },
    create (base) {
        return ArchivedFlowsByStrategyIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseArchivedFlowsByStrategyIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_status;
        message.status = (_object_status = object.status) != null ? _object_status : "";
        return message;
    }
};
function createBaseFlowByStrategyIdRequest() {
    return {
        userId: "",
        strategyId: "",
        status: ""
    };
}
const FlowByStrategyIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        if (message.status !== "") {
            writer.uint32(26).string(message.status);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlowByStrategyIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
                case 3:
                    {
                        if (tag !== 26) {
                            break;
                        }
                        message.status = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : "",
            status: isSet(object.status) ? globalThis.String(object.status) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        if (message.status !== "") {
            obj.status = message.status;
        }
        return obj;
    },
    create (base) {
        return FlowByStrategyIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseFlowByStrategyIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        var _object_status;
        message.status = (_object_status = object.status) != null ? _object_status : "";
        return message;
    }
};
function createBaseFlowsByStrategyIdRequest() {
    return {
        userId: "",
        strategyId: ""
    };
}
const FlowsByStrategyIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.strategyId !== "") {
            writer.uint32(18).string(message.strategyId);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlowsByStrategyIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.strategyId = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.strategyId !== "") {
            obj.strategyId = message.strategyId;
        }
        return obj;
    },
    create (base) {
        return FlowsByStrategyIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseFlowsByStrategyIdRequest();
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        var _object_strategyId;
        message.strategyId = (_object_strategyId = object.strategyId) != null ? _object_strategyId : "";
        return message;
    }
};
function createBaseFlowByIdRequest() {
    return {
        id: "",
        userId: ""
    };
}
const FlowByIdRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFlowByIdRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.id = reader.string();
                        continue;
                    }
                case 2:
                    {
                        if (tag !== 18) {
                            break;
                        }
                        message.userId = reader.string();
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : ""
        };
    },
    toJSON (message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create (base) {
        return FlowByIdRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        const message = createBaseFlowByIdRequest();
        var _object_id;
        message.id = (_object_id = object.id) != null ? _object_id : "";
        var _object_userId;
        message.userId = (_object_userId = object.userId) != null ? _object_userId : "";
        return message;
    }
};
function createBaseListFlowsByStrategyIdsRequest() {
    return {
        ids: []
    };
}
const ListFlowsByStrategyIdsRequest = {
    encode (message, writer = new _wire.BinaryWriter()) {
        for (const v of message.ids){
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode (input, length) {
        const reader = input instanceof _wire.BinaryReader ? input : new _wire.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFlowsByStrategyIdsRequest();
        while(reader.pos < end){
            const tag = reader.uint32();
            switch(tag >>> 3){
                case 1:
                    {
                        if (tag !== 10) {
                            break;
                        }
                        message.ids.push(reader.string());
                        continue;
                    }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON (object) {
        return {
            ids: globalThis.Array.isArray(object == null ? void 0 : object.ids) ? object.ids.map((e)=>globalThis.String(e)) : []
        };
    },
    toJSON (message) {
        var _message_ids;
        const obj = {};
        if ((_message_ids = message.ids) == null ? void 0 : _message_ids.length) {
            obj.ids = message.ids;
        }
        return obj;
    },
    create (base) {
        return ListFlowsByStrategyIdsRequest.fromPartial(base != null ? base : {});
    },
    fromPartial (object) {
        var _object_ids;
        const message = createBaseListFlowsByStrategyIdsRequest();
        message.ids = ((_object_ids = object.ids) == null ? void 0 : _object_ids.map((e)=>e)) || [];
        return message;
    }
};
const FlowsService = {
    createDraftFlow: {
        path: "/minerva.Flows/CreateDraftFlow",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(CreateDraftFlowRequest.encode(value).finish()),
        requestDeserialize: (value)=>CreateDraftFlowRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FlowResponse.encode(value).finish()),
        responseDeserialize: (value)=>FlowResponse.decode(value)
    },
    promoteDraftFlow: {
        path: "/minerva.Flows/PromoteDraftFlow",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(PromoteDraftFlowRequest.encode(value).finish()),
        requestDeserialize: (value)=>PromoteDraftFlowRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FlowResponse.encode(value).finish()),
        responseDeserialize: (value)=>FlowResponse.decode(value)
    },
    listArchivedFlowsByStrategyId: {
        path: "/minerva.Flows/ListArchivedFlowsByStrategyId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ArchivedFlowsByStrategyIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>ArchivedFlowsByStrategyIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FlowsListResponse.encode(value).finish()),
        responseDeserialize: (value)=>FlowsListResponse.decode(value)
    },
    getFlowByStrategyId: {
        path: "/minerva.Flows/GetFlowByStrategyId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(FlowByStrategyIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>FlowByStrategyIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FlowResponse.encode(value).finish()),
        responseDeserialize: (value)=>FlowResponse.decode(value)
    },
    listFlowsByStrategyId: {
        path: "/minerva.Flows/ListFlowsByStrategyId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(FlowsByStrategyIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>FlowsByStrategyIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FlowsListResponse.encode(value).finish()),
        responseDeserialize: (value)=>FlowsListResponse.decode(value)
    },
    getFlowById: {
        path: "/minerva.Flows/GetFlowById",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(FlowByIdRequest.encode(value).finish()),
        requestDeserialize: (value)=>FlowByIdRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FlowResponse.encode(value).finish()),
        responseDeserialize: (value)=>FlowResponse.decode(value)
    },
    listFlowsByStrategyIds: {
        path: "/minerva.Flows/ListFlowsByStrategyIds",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value)=>Buffer.from(ListFlowsByStrategyIdsRequest.encode(value).finish()),
        requestDeserialize: (value)=>ListFlowsByStrategyIdsRequest.decode(value),
        responseSerialize: (value)=>Buffer.from(FlowsListResponse.encode(value).finish()),
        responseDeserialize: (value)=>FlowsListResponse.decode(value)
    }
};
const FlowsClient = (0, _grpcjs.makeGenericClientConstructor)(FlowsService, "minerva.Flows");
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000);
    const nanos = date.getTime() % 1000 * 1000000;
    return {
        seconds,
        nanos
    };
}
function fromTimestamp(t) {
    let millis = (t.seconds || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    } else if (typeof o === "string") {
        return new globalThis.Date(o);
    } else {
        return fromTimestamp(_timestamp.Timestamp.fromJSON(o));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}

//# sourceMappingURL=flows.js.map