{"version":3,"sources":["../../../../../../../../../libs/protos/src/generated/base/src/definitions/minerva/backtests.ts"],"sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.5.0\n//   protoc               v5.29.1\n// source: src/definitions/minerva/backtests.proto\n\n/* eslint-disable */\nimport { BinaryReader, BinaryWriter } from \"@bufbuild/protobuf/wire\";\nimport {\n  type CallOptions,\n  ChannelCredentials,\n  Client,\n  type ClientOptions,\n  type ClientUnaryCall,\n  type handleUnaryCall,\n  makeGenericClientConstructor,\n  Metadata,\n  type ServiceError,\n  type UntypedServiceImplementation,\n} from \"@grpc/grpc-js\";\nimport { Struct } from \"../../../google/protobuf/struct\";\nimport { Timestamp } from \"../../../google/protobuf/timestamp\";\n\nexport interface BacktestResponse {\n  id: string;\n  startDate: Date | undefined;\n  baseBudget: number;\n  frequency: string;\n  runIfOrdersActive: boolean;\n  base: string;\n  quote: string;\n  broker: string;\n  createdAt: Date | undefined;\n  updatedAt: Date | undefined;\n  finishedAt?: Date | undefined;\n  isFinished: boolean;\n  trades: { [key: string]: any }[];\n  errors: { [key: string]: any }[];\n  metrics: { [key: string]: any } | undefined;\n}\n\nexport interface BacktestsListResponse {\n  backtests: BacktestResponse[];\n}\n\nexport interface BacktestByIdRequest {\n  userId: string;\n  id: string;\n}\n\nexport interface BacktestsByFlowIdRequest {\n  userId: string;\n  flowId: string;\n}\n\nexport interface BacktestsByStrategyIdRequest {\n  userId: string;\n  strategyId: string;\n}\n\nexport interface BacktestsByUserIdRequest {\n  userId: string;\n}\n\nexport interface CreateBacktestRequest {\n  userId: string;\n  flowId: string;\n  startDate: Date | undefined;\n  endDate: Date | undefined;\n  baseBudget: number;\n  frequency: string;\n  runIfOrdersActive: boolean;\n  base: string;\n  quote: string;\n  broker: string;\n}\n\nexport interface UpdateBacktestRequest {\n  id: string;\n  userId: string;\n  finishedAt: Date | undefined;\n  trades: { [key: string]: any }[];\n  errors: { [key: string]: any }[];\n  metrics: { [key: string]: any } | undefined;\n}\n\nfunction createBaseBacktestResponse(): BacktestResponse {\n  return {\n    id: \"\",\n    startDate: undefined,\n    baseBudget: 0,\n    frequency: \"\",\n    runIfOrdersActive: false,\n    base: \"\",\n    quote: \"\",\n    broker: \"\",\n    createdAt: undefined,\n    updatedAt: undefined,\n    finishedAt: undefined,\n    isFinished: false,\n    trades: [],\n    errors: [],\n    metrics: undefined,\n  };\n}\n\nexport const BacktestResponse: MessageFns<BacktestResponse> = {\n  encode(message: BacktestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n    if (message.startDate !== undefined) {\n      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(18).fork()).join();\n    }\n    if (message.baseBudget !== 0) {\n      writer.uint32(25).double(message.baseBudget);\n    }\n    if (message.frequency !== \"\") {\n      writer.uint32(34).string(message.frequency);\n    }\n    if (message.runIfOrdersActive !== false) {\n      writer.uint32(40).bool(message.runIfOrdersActive);\n    }\n    if (message.base !== \"\") {\n      writer.uint32(50).string(message.base);\n    }\n    if (message.quote !== \"\") {\n      writer.uint32(58).string(message.quote);\n    }\n    if (message.broker !== \"\") {\n      writer.uint32(66).string(message.broker);\n    }\n    if (message.createdAt !== undefined) {\n      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(74).fork()).join();\n    }\n    if (message.updatedAt !== undefined) {\n      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(82).fork()).join();\n    }\n    if (message.finishedAt !== undefined) {\n      Timestamp.encode(toTimestamp(message.finishedAt), writer.uint32(90).fork()).join();\n    }\n    if (message.isFinished !== false) {\n      writer.uint32(96).bool(message.isFinished);\n    }\n    for (const v of message.trades) {\n      Struct.encode(Struct.wrap(v!), writer.uint32(106).fork()).join();\n    }\n    for (const v of message.errors) {\n      Struct.encode(Struct.wrap(v!), writer.uint32(114).fork()).join();\n    }\n    if (message.metrics !== undefined) {\n      Struct.encode(Struct.wrap(message.metrics), writer.uint32(122).fork()).join();\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): BacktestResponse {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBacktestResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.id = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n\n          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 3: {\n          if (tag !== 25) {\n            break;\n          }\n\n          message.baseBudget = reader.double();\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n\n          message.frequency = reader.string();\n          continue;\n        }\n        case 5: {\n          if (tag !== 40) {\n            break;\n          }\n\n          message.runIfOrdersActive = reader.bool();\n          continue;\n        }\n        case 6: {\n          if (tag !== 50) {\n            break;\n          }\n\n          message.base = reader.string();\n          continue;\n        }\n        case 7: {\n          if (tag !== 58) {\n            break;\n          }\n\n          message.quote = reader.string();\n          continue;\n        }\n        case 8: {\n          if (tag !== 66) {\n            break;\n          }\n\n          message.broker = reader.string();\n          continue;\n        }\n        case 9: {\n          if (tag !== 74) {\n            break;\n          }\n\n          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 10: {\n          if (tag !== 82) {\n            break;\n          }\n\n          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 11: {\n          if (tag !== 90) {\n            break;\n          }\n\n          message.finishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 12: {\n          if (tag !== 96) {\n            break;\n          }\n\n          message.isFinished = reader.bool();\n          continue;\n        }\n        case 13: {\n          if (tag !== 106) {\n            break;\n          }\n\n          message.trades.push(Struct.unwrap(Struct.decode(reader, reader.uint32())));\n          continue;\n        }\n        case 14: {\n          if (tag !== 114) {\n            break;\n          }\n\n          message.errors.push(Struct.unwrap(Struct.decode(reader, reader.uint32())));\n          continue;\n        }\n        case 15: {\n          if (tag !== 122) {\n            break;\n          }\n\n          message.metrics = Struct.unwrap(Struct.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): BacktestResponse {\n    return {\n      id: isSet(object.id) ? globalThis.String(object.id) : \"\",\n      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,\n      baseBudget: isSet(object.baseBudget) ? globalThis.Number(object.baseBudget) : 0,\n      frequency: isSet(object.frequency) ? globalThis.String(object.frequency) : \"\",\n      runIfOrdersActive: isSet(object.runIfOrdersActive) ? globalThis.Boolean(object.runIfOrdersActive) : false,\n      base: isSet(object.base) ? globalThis.String(object.base) : \"\",\n      quote: isSet(object.quote) ? globalThis.String(object.quote) : \"\",\n      broker: isSet(object.broker) ? globalThis.String(object.broker) : \"\",\n      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,\n      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,\n      finishedAt: isSet(object.finishedAt) ? fromJsonTimestamp(object.finishedAt) : undefined,\n      isFinished: isSet(object.isFinished) ? globalThis.Boolean(object.isFinished) : false,\n      trades: globalThis.Array.isArray(object?.trades) ? [...object.trades] : [],\n      errors: globalThis.Array.isArray(object?.errors) ? [...object.errors] : [],\n      metrics: isObject(object.metrics) ? object.metrics : undefined,\n    };\n  },\n\n  toJSON(message: BacktestResponse): unknown {\n    const obj: any = {};\n    if (message.id !== \"\") {\n      obj.id = message.id;\n    }\n    if (message.startDate !== undefined) {\n      obj.startDate = message.startDate.toISOString();\n    }\n    if (message.baseBudget !== 0) {\n      obj.baseBudget = message.baseBudget;\n    }\n    if (message.frequency !== \"\") {\n      obj.frequency = message.frequency;\n    }\n    if (message.runIfOrdersActive !== false) {\n      obj.runIfOrdersActive = message.runIfOrdersActive;\n    }\n    if (message.base !== \"\") {\n      obj.base = message.base;\n    }\n    if (message.quote !== \"\") {\n      obj.quote = message.quote;\n    }\n    if (message.broker !== \"\") {\n      obj.broker = message.broker;\n    }\n    if (message.createdAt !== undefined) {\n      obj.createdAt = message.createdAt.toISOString();\n    }\n    if (message.updatedAt !== undefined) {\n      obj.updatedAt = message.updatedAt.toISOString();\n    }\n    if (message.finishedAt !== undefined) {\n      obj.finishedAt = message.finishedAt.toISOString();\n    }\n    if (message.isFinished !== false) {\n      obj.isFinished = message.isFinished;\n    }\n    if (message.trades?.length) {\n      obj.trades = message.trades;\n    }\n    if (message.errors?.length) {\n      obj.errors = message.errors;\n    }\n    if (message.metrics !== undefined) {\n      obj.metrics = message.metrics;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<BacktestResponse>, I>>(base?: I): BacktestResponse {\n    return BacktestResponse.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<BacktestResponse>, I>>(object: I): BacktestResponse {\n    const message = createBaseBacktestResponse();\n    message.id = object.id ?? \"\";\n    message.startDate = object.startDate ?? undefined;\n    message.baseBudget = object.baseBudget ?? 0;\n    message.frequency = object.frequency ?? \"\";\n    message.runIfOrdersActive = object.runIfOrdersActive ?? false;\n    message.base = object.base ?? \"\";\n    message.quote = object.quote ?? \"\";\n    message.broker = object.broker ?? \"\";\n    message.createdAt = object.createdAt ?? undefined;\n    message.updatedAt = object.updatedAt ?? undefined;\n    message.finishedAt = object.finishedAt ?? undefined;\n    message.isFinished = object.isFinished ?? false;\n    message.trades = object.trades?.map((e) => e) || [];\n    message.errors = object.errors?.map((e) => e) || [];\n    message.metrics = object.metrics ?? undefined;\n    return message;\n  },\n};\n\nfunction createBaseBacktestsListResponse(): BacktestsListResponse {\n  return { backtests: [] };\n}\n\nexport const BacktestsListResponse: MessageFns<BacktestsListResponse> = {\n  encode(message: BacktestsListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    for (const v of message.backtests) {\n      BacktestResponse.encode(v!, writer.uint32(10).fork()).join();\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): BacktestsListResponse {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBacktestsListResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.backtests.push(BacktestResponse.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): BacktestsListResponse {\n    return {\n      backtests: globalThis.Array.isArray(object?.backtests)\n        ? object.backtests.map((e: any) => BacktestResponse.fromJSON(e))\n        : [],\n    };\n  },\n\n  toJSON(message: BacktestsListResponse): unknown {\n    const obj: any = {};\n    if (message.backtests?.length) {\n      obj.backtests = message.backtests.map((e) => BacktestResponse.toJSON(e));\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<BacktestsListResponse>, I>>(base?: I): BacktestsListResponse {\n    return BacktestsListResponse.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<BacktestsListResponse>, I>>(object: I): BacktestsListResponse {\n    const message = createBaseBacktestsListResponse();\n    message.backtests = object.backtests?.map((e) => BacktestResponse.fromPartial(e)) || [];\n    return message;\n  },\n};\n\nfunction createBaseBacktestByIdRequest(): BacktestByIdRequest {\n  return { userId: \"\", id: \"\" };\n}\n\nexport const BacktestByIdRequest: MessageFns<BacktestByIdRequest> = {\n  encode(message: BacktestByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.userId !== \"\") {\n      writer.uint32(10).string(message.userId);\n    }\n    if (message.id !== \"\") {\n      writer.uint32(18).string(message.id);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): BacktestByIdRequest {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBacktestByIdRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.userId = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n\n          message.id = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): BacktestByIdRequest {\n    return {\n      userId: isSet(object.userId) ? globalThis.String(object.userId) : \"\",\n      id: isSet(object.id) ? globalThis.String(object.id) : \"\",\n    };\n  },\n\n  toJSON(message: BacktestByIdRequest): unknown {\n    const obj: any = {};\n    if (message.userId !== \"\") {\n      obj.userId = message.userId;\n    }\n    if (message.id !== \"\") {\n      obj.id = message.id;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<BacktestByIdRequest>, I>>(base?: I): BacktestByIdRequest {\n    return BacktestByIdRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<BacktestByIdRequest>, I>>(object: I): BacktestByIdRequest {\n    const message = createBaseBacktestByIdRequest();\n    message.userId = object.userId ?? \"\";\n    message.id = object.id ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseBacktestsByFlowIdRequest(): BacktestsByFlowIdRequest {\n  return { userId: \"\", flowId: \"\" };\n}\n\nexport const BacktestsByFlowIdRequest: MessageFns<BacktestsByFlowIdRequest> = {\n  encode(message: BacktestsByFlowIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.userId !== \"\") {\n      writer.uint32(10).string(message.userId);\n    }\n    if (message.flowId !== \"\") {\n      writer.uint32(18).string(message.flowId);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): BacktestsByFlowIdRequest {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBacktestsByFlowIdRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.userId = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n\n          message.flowId = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): BacktestsByFlowIdRequest {\n    return {\n      userId: isSet(object.userId) ? globalThis.String(object.userId) : \"\",\n      flowId: isSet(object.flowId) ? globalThis.String(object.flowId) : \"\",\n    };\n  },\n\n  toJSON(message: BacktestsByFlowIdRequest): unknown {\n    const obj: any = {};\n    if (message.userId !== \"\") {\n      obj.userId = message.userId;\n    }\n    if (message.flowId !== \"\") {\n      obj.flowId = message.flowId;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<BacktestsByFlowIdRequest>, I>>(base?: I): BacktestsByFlowIdRequest {\n    return BacktestsByFlowIdRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<BacktestsByFlowIdRequest>, I>>(object: I): BacktestsByFlowIdRequest {\n    const message = createBaseBacktestsByFlowIdRequest();\n    message.userId = object.userId ?? \"\";\n    message.flowId = object.flowId ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseBacktestsByStrategyIdRequest(): BacktestsByStrategyIdRequest {\n  return { userId: \"\", strategyId: \"\" };\n}\n\nexport const BacktestsByStrategyIdRequest: MessageFns<BacktestsByStrategyIdRequest> = {\n  encode(message: BacktestsByStrategyIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.userId !== \"\") {\n      writer.uint32(10).string(message.userId);\n    }\n    if (message.strategyId !== \"\") {\n      writer.uint32(18).string(message.strategyId);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): BacktestsByStrategyIdRequest {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBacktestsByStrategyIdRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.userId = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n\n          message.strategyId = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): BacktestsByStrategyIdRequest {\n    return {\n      userId: isSet(object.userId) ? globalThis.String(object.userId) : \"\",\n      strategyId: isSet(object.strategyId) ? globalThis.String(object.strategyId) : \"\",\n    };\n  },\n\n  toJSON(message: BacktestsByStrategyIdRequest): unknown {\n    const obj: any = {};\n    if (message.userId !== \"\") {\n      obj.userId = message.userId;\n    }\n    if (message.strategyId !== \"\") {\n      obj.strategyId = message.strategyId;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<BacktestsByStrategyIdRequest>, I>>(base?: I): BacktestsByStrategyIdRequest {\n    return BacktestsByStrategyIdRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<BacktestsByStrategyIdRequest>, I>>(object: I): BacktestsByStrategyIdRequest {\n    const message = createBaseBacktestsByStrategyIdRequest();\n    message.userId = object.userId ?? \"\";\n    message.strategyId = object.strategyId ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseBacktestsByUserIdRequest(): BacktestsByUserIdRequest {\n  return { userId: \"\" };\n}\n\nexport const BacktestsByUserIdRequest: MessageFns<BacktestsByUserIdRequest> = {\n  encode(message: BacktestsByUserIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.userId !== \"\") {\n      writer.uint32(10).string(message.userId);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): BacktestsByUserIdRequest {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseBacktestsByUserIdRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.userId = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): BacktestsByUserIdRequest {\n    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : \"\" };\n  },\n\n  toJSON(message: BacktestsByUserIdRequest): unknown {\n    const obj: any = {};\n    if (message.userId !== \"\") {\n      obj.userId = message.userId;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<BacktestsByUserIdRequest>, I>>(base?: I): BacktestsByUserIdRequest {\n    return BacktestsByUserIdRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<BacktestsByUserIdRequest>, I>>(object: I): BacktestsByUserIdRequest {\n    const message = createBaseBacktestsByUserIdRequest();\n    message.userId = object.userId ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseCreateBacktestRequest(): CreateBacktestRequest {\n  return {\n    userId: \"\",\n    flowId: \"\",\n    startDate: undefined,\n    endDate: undefined,\n    baseBudget: 0,\n    frequency: \"\",\n    runIfOrdersActive: false,\n    base: \"\",\n    quote: \"\",\n    broker: \"\",\n  };\n}\n\nexport const CreateBacktestRequest: MessageFns<CreateBacktestRequest> = {\n  encode(message: CreateBacktestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.userId !== \"\") {\n      writer.uint32(10).string(message.userId);\n    }\n    if (message.flowId !== \"\") {\n      writer.uint32(18).string(message.flowId);\n    }\n    if (message.startDate !== undefined) {\n      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(26).fork()).join();\n    }\n    if (message.endDate !== undefined) {\n      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(34).fork()).join();\n    }\n    if (message.baseBudget !== 0) {\n      writer.uint32(41).double(message.baseBudget);\n    }\n    if (message.frequency !== \"\") {\n      writer.uint32(50).string(message.frequency);\n    }\n    if (message.runIfOrdersActive !== false) {\n      writer.uint32(56).bool(message.runIfOrdersActive);\n    }\n    if (message.base !== \"\") {\n      writer.uint32(66).string(message.base);\n    }\n    if (message.quote !== \"\") {\n      writer.uint32(74).string(message.quote);\n    }\n    if (message.broker !== \"\") {\n      writer.uint32(82).string(message.broker);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): CreateBacktestRequest {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCreateBacktestRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.userId = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n\n          message.flowId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n\n          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n\n          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 5: {\n          if (tag !== 41) {\n            break;\n          }\n\n          message.baseBudget = reader.double();\n          continue;\n        }\n        case 6: {\n          if (tag !== 50) {\n            break;\n          }\n\n          message.frequency = reader.string();\n          continue;\n        }\n        case 7: {\n          if (tag !== 56) {\n            break;\n          }\n\n          message.runIfOrdersActive = reader.bool();\n          continue;\n        }\n        case 8: {\n          if (tag !== 66) {\n            break;\n          }\n\n          message.base = reader.string();\n          continue;\n        }\n        case 9: {\n          if (tag !== 74) {\n            break;\n          }\n\n          message.quote = reader.string();\n          continue;\n        }\n        case 10: {\n          if (tag !== 82) {\n            break;\n          }\n\n          message.broker = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): CreateBacktestRequest {\n    return {\n      userId: isSet(object.userId) ? globalThis.String(object.userId) : \"\",\n      flowId: isSet(object.flowId) ? globalThis.String(object.flowId) : \"\",\n      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,\n      endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,\n      baseBudget: isSet(object.baseBudget) ? globalThis.Number(object.baseBudget) : 0,\n      frequency: isSet(object.frequency) ? globalThis.String(object.frequency) : \"\",\n      runIfOrdersActive: isSet(object.runIfOrdersActive) ? globalThis.Boolean(object.runIfOrdersActive) : false,\n      base: isSet(object.base) ? globalThis.String(object.base) : \"\",\n      quote: isSet(object.quote) ? globalThis.String(object.quote) : \"\",\n      broker: isSet(object.broker) ? globalThis.String(object.broker) : \"\",\n    };\n  },\n\n  toJSON(message: CreateBacktestRequest): unknown {\n    const obj: any = {};\n    if (message.userId !== \"\") {\n      obj.userId = message.userId;\n    }\n    if (message.flowId !== \"\") {\n      obj.flowId = message.flowId;\n    }\n    if (message.startDate !== undefined) {\n      obj.startDate = message.startDate.toISOString();\n    }\n    if (message.endDate !== undefined) {\n      obj.endDate = message.endDate.toISOString();\n    }\n    if (message.baseBudget !== 0) {\n      obj.baseBudget = message.baseBudget;\n    }\n    if (message.frequency !== \"\") {\n      obj.frequency = message.frequency;\n    }\n    if (message.runIfOrdersActive !== false) {\n      obj.runIfOrdersActive = message.runIfOrdersActive;\n    }\n    if (message.base !== \"\") {\n      obj.base = message.base;\n    }\n    if (message.quote !== \"\") {\n      obj.quote = message.quote;\n    }\n    if (message.broker !== \"\") {\n      obj.broker = message.broker;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<CreateBacktestRequest>, I>>(base?: I): CreateBacktestRequest {\n    return CreateBacktestRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<CreateBacktestRequest>, I>>(object: I): CreateBacktestRequest {\n    const message = createBaseCreateBacktestRequest();\n    message.userId = object.userId ?? \"\";\n    message.flowId = object.flowId ?? \"\";\n    message.startDate = object.startDate ?? undefined;\n    message.endDate = object.endDate ?? undefined;\n    message.baseBudget = object.baseBudget ?? 0;\n    message.frequency = object.frequency ?? \"\";\n    message.runIfOrdersActive = object.runIfOrdersActive ?? false;\n    message.base = object.base ?? \"\";\n    message.quote = object.quote ?? \"\";\n    message.broker = object.broker ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseUpdateBacktestRequest(): UpdateBacktestRequest {\n  return { id: \"\", userId: \"\", finishedAt: undefined, trades: [], errors: [], metrics: undefined };\n}\n\nexport const UpdateBacktestRequest: MessageFns<UpdateBacktestRequest> = {\n  encode(message: UpdateBacktestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n    if (message.userId !== \"\") {\n      writer.uint32(18).string(message.userId);\n    }\n    if (message.finishedAt !== undefined) {\n      Timestamp.encode(toTimestamp(message.finishedAt), writer.uint32(26).fork()).join();\n    }\n    for (const v of message.trades) {\n      Struct.encode(Struct.wrap(v!), writer.uint32(34).fork()).join();\n    }\n    for (const v of message.errors) {\n      Struct.encode(Struct.wrap(v!), writer.uint32(42).fork()).join();\n    }\n    if (message.metrics !== undefined) {\n      Struct.encode(Struct.wrap(message.metrics), writer.uint32(50).fork()).join();\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): UpdateBacktestRequest {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseUpdateBacktestRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.id = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n\n          message.userId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n\n          message.finishedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 4: {\n          if (tag !== 34) {\n            break;\n          }\n\n          message.trades.push(Struct.unwrap(Struct.decode(reader, reader.uint32())));\n          continue;\n        }\n        case 5: {\n          if (tag !== 42) {\n            break;\n          }\n\n          message.errors.push(Struct.unwrap(Struct.decode(reader, reader.uint32())));\n          continue;\n        }\n        case 6: {\n          if (tag !== 50) {\n            break;\n          }\n\n          message.metrics = Struct.unwrap(Struct.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): UpdateBacktestRequest {\n    return {\n      id: isSet(object.id) ? globalThis.String(object.id) : \"\",\n      userId: isSet(object.userId) ? globalThis.String(object.userId) : \"\",\n      finishedAt: isSet(object.finishedAt) ? fromJsonTimestamp(object.finishedAt) : undefined,\n      trades: globalThis.Array.isArray(object?.trades) ? [...object.trades] : [],\n      errors: globalThis.Array.isArray(object?.errors) ? [...object.errors] : [],\n      metrics: isObject(object.metrics) ? object.metrics : undefined,\n    };\n  },\n\n  toJSON(message: UpdateBacktestRequest): unknown {\n    const obj: any = {};\n    if (message.id !== \"\") {\n      obj.id = message.id;\n    }\n    if (message.userId !== \"\") {\n      obj.userId = message.userId;\n    }\n    if (message.finishedAt !== undefined) {\n      obj.finishedAt = message.finishedAt.toISOString();\n    }\n    if (message.trades?.length) {\n      obj.trades = message.trades;\n    }\n    if (message.errors?.length) {\n      obj.errors = message.errors;\n    }\n    if (message.metrics !== undefined) {\n      obj.metrics = message.metrics;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<UpdateBacktestRequest>, I>>(base?: I): UpdateBacktestRequest {\n    return UpdateBacktestRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<UpdateBacktestRequest>, I>>(object: I): UpdateBacktestRequest {\n    const message = createBaseUpdateBacktestRequest();\n    message.id = object.id ?? \"\";\n    message.userId = object.userId ?? \"\";\n    message.finishedAt = object.finishedAt ?? undefined;\n    message.trades = object.trades?.map((e) => e) || [];\n    message.errors = object.errors?.map((e) => e) || [];\n    message.metrics = object.metrics ?? undefined;\n    return message;\n  },\n};\n\nexport type BacktestsService = typeof BacktestsService;\nexport const BacktestsService = {\n  createBacktest: {\n    path: \"/minerva.Backtests/CreateBacktest\",\n    requestStream: false,\n    responseStream: false,\n    requestSerialize: (value: CreateBacktestRequest) => Buffer.from(CreateBacktestRequest.encode(value).finish()),\n    requestDeserialize: (value: Buffer) => CreateBacktestRequest.decode(value),\n    responseSerialize: (value: BacktestResponse) => Buffer.from(BacktestResponse.encode(value).finish()),\n    responseDeserialize: (value: Buffer) => BacktestResponse.decode(value),\n  },\n  updateBacktest: {\n    path: \"/minerva.Backtests/UpdateBacktest\",\n    requestStream: false,\n    responseStream: false,\n    requestSerialize: (value: UpdateBacktestRequest) => Buffer.from(UpdateBacktestRequest.encode(value).finish()),\n    requestDeserialize: (value: Buffer) => UpdateBacktestRequest.decode(value),\n    responseSerialize: (value: BacktestResponse) => Buffer.from(BacktestResponse.encode(value).finish()),\n    responseDeserialize: (value: Buffer) => BacktestResponse.decode(value),\n  },\n  getBacktestById: {\n    path: \"/minerva.Backtests/GetBacktestById\",\n    requestStream: false,\n    responseStream: false,\n    requestSerialize: (value: BacktestByIdRequest) => Buffer.from(BacktestByIdRequest.encode(value).finish()),\n    requestDeserialize: (value: Buffer) => BacktestByIdRequest.decode(value),\n    responseSerialize: (value: BacktestResponse) => Buffer.from(BacktestResponse.encode(value).finish()),\n    responseDeserialize: (value: Buffer) => BacktestResponse.decode(value),\n  },\n  listBacktestsByFlowId: {\n    path: \"/minerva.Backtests/ListBacktestsByFlowId\",\n    requestStream: false,\n    responseStream: false,\n    requestSerialize: (value: BacktestsByFlowIdRequest) => Buffer.from(BacktestsByFlowIdRequest.encode(value).finish()),\n    requestDeserialize: (value: Buffer) => BacktestsByFlowIdRequest.decode(value),\n    responseSerialize: (value: BacktestsListResponse) => Buffer.from(BacktestsListResponse.encode(value).finish()),\n    responseDeserialize: (value: Buffer) => BacktestsListResponse.decode(value),\n  },\n  listBacktestsByStrategyId: {\n    path: \"/minerva.Backtests/ListBacktestsByStrategyId\",\n    requestStream: false,\n    responseStream: false,\n    requestSerialize: (value: BacktestsByStrategyIdRequest) =>\n      Buffer.from(BacktestsByStrategyIdRequest.encode(value).finish()),\n    requestDeserialize: (value: Buffer) => BacktestsByStrategyIdRequest.decode(value),\n    responseSerialize: (value: BacktestsListResponse) => Buffer.from(BacktestsListResponse.encode(value).finish()),\n    responseDeserialize: (value: Buffer) => BacktestsListResponse.decode(value),\n  },\n  listBacktestsByUserId: {\n    path: \"/minerva.Backtests/ListBacktestsByUserId\",\n    requestStream: false,\n    responseStream: false,\n    requestSerialize: (value: BacktestsByUserIdRequest) => Buffer.from(BacktestsByUserIdRequest.encode(value).finish()),\n    requestDeserialize: (value: Buffer) => BacktestsByUserIdRequest.decode(value),\n    responseSerialize: (value: BacktestsListResponse) => Buffer.from(BacktestsListResponse.encode(value).finish()),\n    responseDeserialize: (value: Buffer) => BacktestsListResponse.decode(value),\n  },\n} as const;\n\nexport interface BacktestsServer extends UntypedServiceImplementation {\n  createBacktest: handleUnaryCall<CreateBacktestRequest, BacktestResponse>;\n  updateBacktest: handleUnaryCall<UpdateBacktestRequest, BacktestResponse>;\n  getBacktestById: handleUnaryCall<BacktestByIdRequest, BacktestResponse>;\n  listBacktestsByFlowId: handleUnaryCall<BacktestsByFlowIdRequest, BacktestsListResponse>;\n  listBacktestsByStrategyId: handleUnaryCall<BacktestsByStrategyIdRequest, BacktestsListResponse>;\n  listBacktestsByUserId: handleUnaryCall<BacktestsByUserIdRequest, BacktestsListResponse>;\n}\n\nexport interface BacktestsClient extends Client {\n  createBacktest(\n    request: CreateBacktestRequest,\n    callback: (error: ServiceError | null, response: BacktestResponse) => void,\n  ): ClientUnaryCall;\n  createBacktest(\n    request: CreateBacktestRequest,\n    metadata: Metadata,\n    callback: (error: ServiceError | null, response: BacktestResponse) => void,\n  ): ClientUnaryCall;\n  createBacktest(\n    request: CreateBacktestRequest,\n    metadata: Metadata,\n    options: Partial<CallOptions>,\n    callback: (error: ServiceError | null, response: BacktestResponse) => void,\n  ): ClientUnaryCall;\n  updateBacktest(\n    request: UpdateBacktestRequest,\n    callback: (error: ServiceError | null, response: BacktestResponse) => void,\n  ): ClientUnaryCall;\n  updateBacktest(\n    request: UpdateBacktestRequest,\n    metadata: Metadata,\n    callback: (error: ServiceError | null, response: BacktestResponse) => void,\n  ): ClientUnaryCall;\n  updateBacktest(\n    request: UpdateBacktestRequest,\n    metadata: Metadata,\n    options: Partial<CallOptions>,\n    callback: (error: ServiceError | null, response: BacktestResponse) => void,\n  ): ClientUnaryCall;\n  getBacktestById(\n    request: BacktestByIdRequest,\n    callback: (error: ServiceError | null, response: BacktestResponse) => void,\n  ): ClientUnaryCall;\n  getBacktestById(\n    request: BacktestByIdRequest,\n    metadata: Metadata,\n    callback: (error: ServiceError | null, response: BacktestResponse) => void,\n  ): ClientUnaryCall;\n  getBacktestById(\n    request: BacktestByIdRequest,\n    metadata: Metadata,\n    options: Partial<CallOptions>,\n    callback: (error: ServiceError | null, response: BacktestResponse) => void,\n  ): ClientUnaryCall;\n  listBacktestsByFlowId(\n    request: BacktestsByFlowIdRequest,\n    callback: (error: ServiceError | null, response: BacktestsListResponse) => void,\n  ): ClientUnaryCall;\n  listBacktestsByFlowId(\n    request: BacktestsByFlowIdRequest,\n    metadata: Metadata,\n    callback: (error: ServiceError | null, response: BacktestsListResponse) => void,\n  ): ClientUnaryCall;\n  listBacktestsByFlowId(\n    request: BacktestsByFlowIdRequest,\n    metadata: Metadata,\n    options: Partial<CallOptions>,\n    callback: (error: ServiceError | null, response: BacktestsListResponse) => void,\n  ): ClientUnaryCall;\n  listBacktestsByStrategyId(\n    request: BacktestsByStrategyIdRequest,\n    callback: (error: ServiceError | null, response: BacktestsListResponse) => void,\n  ): ClientUnaryCall;\n  listBacktestsByStrategyId(\n    request: BacktestsByStrategyIdRequest,\n    metadata: Metadata,\n    callback: (error: ServiceError | null, response: BacktestsListResponse) => void,\n  ): ClientUnaryCall;\n  listBacktestsByStrategyId(\n    request: BacktestsByStrategyIdRequest,\n    metadata: Metadata,\n    options: Partial<CallOptions>,\n    callback: (error: ServiceError | null, response: BacktestsListResponse) => void,\n  ): ClientUnaryCall;\n  listBacktestsByUserId(\n    request: BacktestsByUserIdRequest,\n    callback: (error: ServiceError | null, response: BacktestsListResponse) => void,\n  ): ClientUnaryCall;\n  listBacktestsByUserId(\n    request: BacktestsByUserIdRequest,\n    metadata: Metadata,\n    callback: (error: ServiceError | null, response: BacktestsListResponse) => void,\n  ): ClientUnaryCall;\n  listBacktestsByUserId(\n    request: BacktestsByUserIdRequest,\n    metadata: Metadata,\n    options: Partial<CallOptions>,\n    callback: (error: ServiceError | null, response: BacktestsListResponse) => void,\n  ): ClientUnaryCall;\n}\n\nexport const BacktestsClient = makeGenericClientConstructor(BacktestsService, \"minerva.Backtests\") as unknown as {\n  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BacktestsClient;\n  service: typeof BacktestsService;\n  serviceName: string;\n};\n\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\n\ntype DeepPartial<T> = T extends Builtin ? T\n  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>\n  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\ntype Exact<P, I extends P> = P extends Builtin ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };\n\nfunction toTimestamp(date: Date): Timestamp {\n  const seconds = Math.trunc(date.getTime() / 1_000);\n  const nanos = (date.getTime() % 1_000) * 1_000_000;\n  return { seconds, nanos };\n}\n\nfunction fromTimestamp(t: Timestamp): Date {\n  let millis = (t.seconds || 0) * 1_000;\n  millis += (t.nanos || 0) / 1_000_000;\n  return new globalThis.Date(millis);\n}\n\nfunction fromJsonTimestamp(o: any): Date {\n  if (o instanceof globalThis.Date) {\n    return o;\n  } else if (typeof o === \"string\") {\n    return new globalThis.Date(o);\n  } else {\n    return fromTimestamp(Timestamp.fromJSON(o));\n  }\n}\n\nfunction isObject(value: any): boolean {\n  return typeof value === \"object\" && value !== null;\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n\ninterface MessageFns<T> {\n  encode(message: T, writer?: BinaryWriter): BinaryWriter;\n  decode(input: BinaryReader | Uint8Array, length?: number): T;\n  fromJSON(object: any): T;\n  toJSON(message: T): unknown;\n  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;\n  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;\n}\n"],"names":["BacktestByIdRequest","BacktestResponse","BacktestsByFlowIdRequest","BacktestsByStrategyIdRequest","BacktestsByUserIdRequest","BacktestsClient","BacktestsListResponse","BacktestsService","CreateBacktestRequest","UpdateBacktestRequest","createBaseBacktestResponse","id","startDate","undefined","baseBudget","frequency","runIfOrdersActive","base","quote","broker","createdAt","updatedAt","finishedAt","isFinished","trades","errors","metrics","encode","message","writer","BinaryWriter","uint32","string","Timestamp","toTimestamp","fork","join","double","bool","v","Struct","wrap","decode","input","length","reader","BinaryReader","end","len","pos","tag","fromTimestamp","push","unwrap","skip","fromJSON","object","isSet","globalThis","String","fromJsonTimestamp","Number","Boolean","Array","isArray","isObject","toJSON","obj","toISOString","create","fromPartial","map","e","createBaseBacktestsListResponse","backtests","createBaseBacktestByIdRequest","userId","createBaseBacktestsByFlowIdRequest","flowId","createBaseBacktestsByStrategyIdRequest","strategyId","createBaseBacktestsByUserIdRequest","createBaseCreateBacktestRequest","endDate","createBaseUpdateBacktestRequest","createBacktest","path","requestStream","responseStream","requestSerialize","value","Buffer","from","finish","requestDeserialize","responseSerialize","responseDeserialize","updateBacktest","getBacktestById","listBacktestsByFlowId","listBacktestsByStrategyId","listBacktestsByUserId","makeGenericClientConstructor","date","seconds","Math","trunc","getTime","nanos","t","millis","Date","o"],"mappings":"AAAA,sDAAsD;AACtD,YAAY;AACZ,gCAAgC;AAChC,iCAAiC;AACjC,kDAAkD;AAElD,kBAAkB;;;;;;;;;;;IA8bLA,mBAAmB;eAAnBA;;IA1VAC,gBAAgB;eAAhBA;;IAsaAC,wBAAwB;eAAxBA;;IA4EAC,4BAA4B;eAA5BA;;IA4EAC,wBAAwB;eAAxBA;;IA0jBAC,eAAe;eAAfA;;IA51BAC,qBAAqB;eAArBA;;IA4rBAC,gBAAgB;eAAhBA;;IArVAC,qBAAqB;eAArBA;;IA4MAC,qBAAqB;eAArBA;;;sBAl7B8B;wBAYpC;wBACgB;2BACG;AAiE1B,SAASC;IACP,OAAO;QACLC,IAAI;QACJC,WAAWC;QACXC,YAAY;QACZC,WAAW;QACXC,mBAAmB;QACnBC,MAAM;QACNC,OAAO;QACPC,QAAQ;QACRC,WAAWP;QACXQ,WAAWR;QACXS,YAAYT;QACZU,YAAY;QACZC,QAAQ,EAAE;QACVC,QAAQ,EAAE;QACVC,SAASb;IACX;AACF;AAEO,MAAMZ,mBAAiD;IAC5D0B,QAAOC,OAAyB,EAAEC,SAAuB,IAAIC,kBAAY,EAAE;QACzE,IAAIF,QAAQjB,EAAE,KAAK,IAAI;YACrBkB,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQjB,EAAE;QACrC;QACA,IAAIiB,QAAQhB,SAAS,KAAKC,WAAW;YACnCoB,oBAAS,CAACN,MAAM,CAACO,YAAYN,QAAQhB,SAAS,GAAGiB,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QACjF;QACA,IAAIR,QAAQd,UAAU,KAAK,GAAG;YAC5Be,OAAOE,MAAM,CAAC,IAAIM,MAAM,CAACT,QAAQd,UAAU;QAC7C;QACA,IAAIc,QAAQb,SAAS,KAAK,IAAI;YAC5Bc,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQb,SAAS;QAC5C;QACA,IAAIa,QAAQZ,iBAAiB,KAAK,OAAO;YACvCa,OAAOE,MAAM,CAAC,IAAIO,IAAI,CAACV,QAAQZ,iBAAiB;QAClD;QACA,IAAIY,QAAQX,IAAI,KAAK,IAAI;YACvBY,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQX,IAAI;QACvC;QACA,IAAIW,QAAQV,KAAK,KAAK,IAAI;YACxBW,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQV,KAAK;QACxC;QACA,IAAIU,QAAQT,MAAM,KAAK,IAAI;YACzBU,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQT,MAAM;QACzC;QACA,IAAIS,QAAQR,SAAS,KAAKP,WAAW;YACnCoB,oBAAS,CAACN,MAAM,CAACO,YAAYN,QAAQR,SAAS,GAAGS,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QACjF;QACA,IAAIR,QAAQP,SAAS,KAAKR,WAAW;YACnCoB,oBAAS,CAACN,MAAM,CAACO,YAAYN,QAAQP,SAAS,GAAGQ,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QACjF;QACA,IAAIR,QAAQN,UAAU,KAAKT,WAAW;YACpCoB,oBAAS,CAACN,MAAM,CAACO,YAAYN,QAAQN,UAAU,GAAGO,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QAClF;QACA,IAAIR,QAAQL,UAAU,KAAK,OAAO;YAChCM,OAAOE,MAAM,CAAC,IAAIO,IAAI,CAACV,QAAQL,UAAU;QAC3C;QACA,KAAK,MAAMgB,KAAKX,QAAQJ,MAAM,CAAE;YAC9BgB,cAAM,CAACb,MAAM,CAACa,cAAM,CAACC,IAAI,CAACF,IAAKV,OAAOE,MAAM,CAAC,KAAKI,IAAI,IAAIC,IAAI;QAChE;QACA,KAAK,MAAMG,KAAKX,QAAQH,MAAM,CAAE;YAC9Be,cAAM,CAACb,MAAM,CAACa,cAAM,CAACC,IAAI,CAACF,IAAKV,OAAOE,MAAM,CAAC,KAAKI,IAAI,IAAIC,IAAI;QAChE;QACA,IAAIR,QAAQF,OAAO,KAAKb,WAAW;YACjC2B,cAAM,CAACb,MAAM,CAACa,cAAM,CAACC,IAAI,CAACb,QAAQF,OAAO,GAAGG,OAAOE,MAAM,CAAC,KAAKI,IAAI,IAAIC,IAAI;QAC7E;QACA,OAAOP;IACT;IAEAa,QAAOC,KAAgC,EAAEC,MAAe;QACtD,MAAMC,SAASF,iBAAiBG,kBAAY,GAAGH,QAAQ,IAAIG,kBAAY,CAACH;QACxE,IAAII,MAAMH,WAAW/B,YAAYgC,OAAOG,GAAG,GAAGH,OAAOI,GAAG,GAAGL;QAC3D,MAAMhB,UAAUlB;QAChB,MAAOmC,OAAOI,GAAG,GAAGF,IAAK;YACvB,MAAMG,MAAML,OAAOd,MAAM;YACzB,OAAQmB,QAAQ;gBACd,KAAK;oBAAG;wBACN,IAAIA,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQjB,EAAE,GAAGkC,OAAOb,MAAM;wBAC1B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQhB,SAAS,GAAGuC,cAAclB,oBAAS,CAACS,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACxE;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAImB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQd,UAAU,GAAG+B,OAAOR,MAAM;wBAClC;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIa,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQb,SAAS,GAAG8B,OAAOb,MAAM;wBACjC;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQZ,iBAAiB,GAAG6B,OAAOP,IAAI;wBACvC;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIY,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQX,IAAI,GAAG4B,OAAOb,MAAM;wBAC5B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQV,KAAK,GAAG2B,OAAOb,MAAM;wBAC7B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQT,MAAM,GAAG0B,OAAOb,MAAM;wBAC9B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQR,SAAS,GAAG+B,cAAclB,oBAAS,CAACS,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACxE;oBACF;gBACA,KAAK;oBAAI;wBACP,IAAImB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQP,SAAS,GAAG8B,cAAclB,oBAAS,CAACS,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACxE;oBACF;gBACA,KAAK;oBAAI;wBACP,IAAImB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQN,UAAU,GAAG6B,cAAclB,oBAAS,CAACS,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACzE;oBACF;gBACA,KAAK;oBAAI;wBACP,IAAImB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQL,UAAU,GAAGsB,OAAOP,IAAI;wBAChC;oBACF;gBACA,KAAK;oBAAI;wBACP,IAAIY,QAAQ,KAAK;4BACf;wBACF;wBAEAtB,QAAQJ,MAAM,CAAC4B,IAAI,CAACZ,cAAM,CAACa,MAAM,CAACb,cAAM,CAACE,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACrE;oBACF;gBACA,KAAK;oBAAI;wBACP,IAAImB,QAAQ,KAAK;4BACf;wBACF;wBAEAtB,QAAQH,MAAM,CAAC2B,IAAI,CAACZ,cAAM,CAACa,MAAM,CAACb,cAAM,CAACE,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACrE;oBACF;gBACA,KAAK;oBAAI;wBACP,IAAImB,QAAQ,KAAK;4BACf;wBACF;wBAEAtB,QAAQF,OAAO,GAAGc,cAAM,CAACa,MAAM,CAACb,cAAM,CAACE,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACnE;oBACF;YACF;YACA,IAAI,AAACmB,CAAAA,MAAM,CAAA,MAAO,KAAKA,QAAQ,GAAG;gBAChC;YACF;YACAL,OAAOS,IAAI,CAACJ,MAAM;QACpB;QACA,OAAOtB;IACT;IAEA2B,UAASC,MAAW;QAClB,OAAO;YACL7C,IAAI8C,MAAMD,OAAO7C,EAAE,IAAI+C,WAAWC,MAAM,CAACH,OAAO7C,EAAE,IAAI;YACtDC,WAAW6C,MAAMD,OAAO5C,SAAS,IAAIgD,kBAAkBJ,OAAO5C,SAAS,IAAIC;YAC3EC,YAAY2C,MAAMD,OAAO1C,UAAU,IAAI4C,WAAWG,MAAM,CAACL,OAAO1C,UAAU,IAAI;YAC9EC,WAAW0C,MAAMD,OAAOzC,SAAS,IAAI2C,WAAWC,MAAM,CAACH,OAAOzC,SAAS,IAAI;YAC3EC,mBAAmByC,MAAMD,OAAOxC,iBAAiB,IAAI0C,WAAWI,OAAO,CAACN,OAAOxC,iBAAiB,IAAI;YACpGC,MAAMwC,MAAMD,OAAOvC,IAAI,IAAIyC,WAAWC,MAAM,CAACH,OAAOvC,IAAI,IAAI;YAC5DC,OAAOuC,MAAMD,OAAOtC,KAAK,IAAIwC,WAAWC,MAAM,CAACH,OAAOtC,KAAK,IAAI;YAC/DC,QAAQsC,MAAMD,OAAOrC,MAAM,IAAIuC,WAAWC,MAAM,CAACH,OAAOrC,MAAM,IAAI;YAClEC,WAAWqC,MAAMD,OAAOpC,SAAS,IAAIwC,kBAAkBJ,OAAOpC,SAAS,IAAIP;YAC3EQ,WAAWoC,MAAMD,OAAOnC,SAAS,IAAIuC,kBAAkBJ,OAAOnC,SAAS,IAAIR;YAC3ES,YAAYmC,MAAMD,OAAOlC,UAAU,IAAIsC,kBAAkBJ,OAAOlC,UAAU,IAAIT;YAC9EU,YAAYkC,MAAMD,OAAOjC,UAAU,IAAImC,WAAWI,OAAO,CAACN,OAAOjC,UAAU,IAAI;YAC/EC,QAAQkC,WAAWK,KAAK,CAACC,OAAO,CAACR,0BAAAA,OAAQhC,MAAM,IAAI;mBAAIgC,OAAOhC,MAAM;aAAC,GAAG,EAAE;YAC1EC,QAAQiC,WAAWK,KAAK,CAACC,OAAO,CAACR,0BAAAA,OAAQ/B,MAAM,IAAI;mBAAI+B,OAAO/B,MAAM;aAAC,GAAG,EAAE;YAC1EC,SAASuC,SAAST,OAAO9B,OAAO,IAAI8B,OAAO9B,OAAO,GAAGb;QACvD;IACF;IAEAqD,QAAOtC,OAAyB;YAsC1BA,iBAGAA;QAxCJ,MAAMuC,MAAW,CAAC;QAClB,IAAIvC,QAAQjB,EAAE,KAAK,IAAI;YACrBwD,IAAIxD,EAAE,GAAGiB,QAAQjB,EAAE;QACrB;QACA,IAAIiB,QAAQhB,SAAS,KAAKC,WAAW;YACnCsD,IAAIvD,SAAS,GAAGgB,QAAQhB,SAAS,CAACwD,WAAW;QAC/C;QACA,IAAIxC,QAAQd,UAAU,KAAK,GAAG;YAC5BqD,IAAIrD,UAAU,GAAGc,QAAQd,UAAU;QACrC;QACA,IAAIc,QAAQb,SAAS,KAAK,IAAI;YAC5BoD,IAAIpD,SAAS,GAAGa,QAAQb,SAAS;QACnC;QACA,IAAIa,QAAQZ,iBAAiB,KAAK,OAAO;YACvCmD,IAAInD,iBAAiB,GAAGY,QAAQZ,iBAAiB;QACnD;QACA,IAAIY,QAAQX,IAAI,KAAK,IAAI;YACvBkD,IAAIlD,IAAI,GAAGW,QAAQX,IAAI;QACzB;QACA,IAAIW,QAAQV,KAAK,KAAK,IAAI;YACxBiD,IAAIjD,KAAK,GAAGU,QAAQV,KAAK;QAC3B;QACA,IAAIU,QAAQT,MAAM,KAAK,IAAI;YACzBgD,IAAIhD,MAAM,GAAGS,QAAQT,MAAM;QAC7B;QACA,IAAIS,QAAQR,SAAS,KAAKP,WAAW;YACnCsD,IAAI/C,SAAS,GAAGQ,QAAQR,SAAS,CAACgD,WAAW;QAC/C;QACA,IAAIxC,QAAQP,SAAS,KAAKR,WAAW;YACnCsD,IAAI9C,SAAS,GAAGO,QAAQP,SAAS,CAAC+C,WAAW;QAC/C;QACA,IAAIxC,QAAQN,UAAU,KAAKT,WAAW;YACpCsD,IAAI7C,UAAU,GAAGM,QAAQN,UAAU,CAAC8C,WAAW;QACjD;QACA,IAAIxC,QAAQL,UAAU,KAAK,OAAO;YAChC4C,IAAI5C,UAAU,GAAGK,QAAQL,UAAU;QACrC;QACA,KAAIK,kBAAAA,QAAQJ,MAAM,qBAAdI,gBAAgBgB,MAAM,EAAE;YAC1BuB,IAAI3C,MAAM,GAAGI,QAAQJ,MAAM;QAC7B;QACA,KAAII,kBAAAA,QAAQH,MAAM,qBAAdG,gBAAgBgB,MAAM,EAAE;YAC1BuB,IAAI1C,MAAM,GAAGG,QAAQH,MAAM;QAC7B;QACA,IAAIG,QAAQF,OAAO,KAAKb,WAAW;YACjCsD,IAAIzC,OAAO,GAAGE,QAAQF,OAAO;QAC/B;QACA,OAAOyC;IACT;IAEAE,QAA0DpD,IAAQ;QAChE,OAAOhB,iBAAiBqE,WAAW,CAACrD,eAAAA,OAAS,CAAC;IAChD;IACAqD,aAA+Dd,MAAS;YAcrDA,gBACAA;QAdjB,MAAM5B,UAAUlB;YACH8C;QAAb5B,QAAQjB,EAAE,GAAG6C,CAAAA,aAAAA,OAAO7C,EAAE,YAAT6C,aAAa;YACNA;QAApB5B,QAAQhB,SAAS,GAAG4C,CAAAA,oBAAAA,OAAO5C,SAAS,YAAhB4C,oBAAoB3C;YACnB2C;QAArB5B,QAAQd,UAAU,GAAG0C,CAAAA,qBAAAA,OAAO1C,UAAU,YAAjB0C,qBAAqB;YACtBA;QAApB5B,QAAQb,SAAS,GAAGyC,CAAAA,oBAAAA,OAAOzC,SAAS,YAAhByC,oBAAoB;YACZA;QAA5B5B,QAAQZ,iBAAiB,GAAGwC,CAAAA,4BAAAA,OAAOxC,iBAAiB,YAAxBwC,4BAA4B;YACzCA;QAAf5B,QAAQX,IAAI,GAAGuC,CAAAA,eAAAA,OAAOvC,IAAI,YAAXuC,eAAe;YACdA;QAAhB5B,QAAQV,KAAK,GAAGsC,CAAAA,gBAAAA,OAAOtC,KAAK,YAAZsC,gBAAgB;YACfA;QAAjB5B,QAAQT,MAAM,GAAGqC,CAAAA,iBAAAA,OAAOrC,MAAM,YAAbqC,iBAAiB;YACdA;QAApB5B,QAAQR,SAAS,GAAGoC,CAAAA,oBAAAA,OAAOpC,SAAS,YAAhBoC,oBAAoB3C;YACpB2C;QAApB5B,QAAQP,SAAS,GAAGmC,CAAAA,oBAAAA,OAAOnC,SAAS,YAAhBmC,oBAAoB3C;YACnB2C;QAArB5B,QAAQN,UAAU,GAAGkC,CAAAA,qBAAAA,OAAOlC,UAAU,YAAjBkC,qBAAqB3C;YACrB2C;QAArB5B,QAAQL,UAAU,GAAGiC,CAAAA,qBAAAA,OAAOjC,UAAU,YAAjBiC,qBAAqB;QAC1C5B,QAAQJ,MAAM,GAAGgC,EAAAA,iBAAAA,OAAOhC,MAAM,qBAAbgC,eAAee,GAAG,CAAC,CAACC,IAAMA,OAAM,EAAE;QACnD5C,QAAQH,MAAM,GAAG+B,EAAAA,iBAAAA,OAAO/B,MAAM,qBAAb+B,eAAee,GAAG,CAAC,CAACC,IAAMA,OAAM,EAAE;YACjChB;QAAlB5B,QAAQF,OAAO,GAAG8B,CAAAA,kBAAAA,OAAO9B,OAAO,YAAd8B,kBAAkB3C;QACpC,OAAOe;IACT;AACF;AAEA,SAAS6C;IACP,OAAO;QAAEC,WAAW,EAAE;IAAC;AACzB;AAEO,MAAMpE,wBAA2D;IACtEqB,QAAOC,OAA8B,EAAEC,SAAuB,IAAIC,kBAAY,EAAE;QAC9E,KAAK,MAAMS,KAAKX,QAAQ8C,SAAS,CAAE;YACjCzE,iBAAiB0B,MAAM,CAACY,GAAIV,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QAC5D;QACA,OAAOP;IACT;IAEAa,QAAOC,KAAgC,EAAEC,MAAe;QACtD,MAAMC,SAASF,iBAAiBG,kBAAY,GAAGH,QAAQ,IAAIG,kBAAY,CAACH;QACxE,IAAII,MAAMH,WAAW/B,YAAYgC,OAAOG,GAAG,GAAGH,OAAOI,GAAG,GAAGL;QAC3D,MAAMhB,UAAU6C;QAChB,MAAO5B,OAAOI,GAAG,GAAGF,IAAK;YACvB,MAAMG,MAAML,OAAOd,MAAM;YACzB,OAAQmB,QAAQ;gBACd,KAAK;oBAAG;wBACN,IAAIA,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQ8C,SAAS,CAACtB,IAAI,CAACnD,iBAAiByC,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACpE;oBACF;YACF;YACA,IAAI,AAACmB,CAAAA,MAAM,CAAA,MAAO,KAAKA,QAAQ,GAAG;gBAChC;YACF;YACAL,OAAOS,IAAI,CAACJ,MAAM;QACpB;QACA,OAAOtB;IACT;IAEA2B,UAASC,MAAW;QAClB,OAAO;YACLkB,WAAWhB,WAAWK,KAAK,CAACC,OAAO,CAACR,0BAAAA,OAAQkB,SAAS,IACjDlB,OAAOkB,SAAS,CAACH,GAAG,CAAC,CAACC,IAAWvE,iBAAiBsD,QAAQ,CAACiB,MAC3D,EAAE;QACR;IACF;IAEAN,QAAOtC,OAA8B;YAE/BA;QADJ,MAAMuC,MAAW,CAAC;QAClB,KAAIvC,qBAAAA,QAAQ8C,SAAS,qBAAjB9C,mBAAmBgB,MAAM,EAAE;YAC7BuB,IAAIO,SAAS,GAAG9C,QAAQ8C,SAAS,CAACH,GAAG,CAAC,CAACC,IAAMvE,iBAAiBiE,MAAM,CAACM;QACvE;QACA,OAAOL;IACT;IAEAE,QAA+DpD,IAAQ;QACrE,OAAOX,sBAAsBgE,WAAW,CAACrD,eAAAA,OAAS,CAAC;IACrD;IACAqD,aAAoEd,MAAS;YAEvDA;QADpB,MAAM5B,UAAU6C;QAChB7C,QAAQ8C,SAAS,GAAGlB,EAAAA,oBAAAA,OAAOkB,SAAS,qBAAhBlB,kBAAkBe,GAAG,CAAC,CAACC,IAAMvE,iBAAiBqE,WAAW,CAACE,QAAO,EAAE;QACvF,OAAO5C;IACT;AACF;AAEA,SAAS+C;IACP,OAAO;QAAEC,QAAQ;QAAIjE,IAAI;IAAG;AAC9B;AAEO,MAAMX,sBAAuD;IAClE2B,QAAOC,OAA4B,EAAEC,SAAuB,IAAIC,kBAAY,EAAE;QAC5E,IAAIF,QAAQgD,MAAM,KAAK,IAAI;YACzB/C,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQgD,MAAM;QACzC;QACA,IAAIhD,QAAQjB,EAAE,KAAK,IAAI;YACrBkB,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQjB,EAAE;QACrC;QACA,OAAOkB;IACT;IAEAa,QAAOC,KAAgC,EAAEC,MAAe;QACtD,MAAMC,SAASF,iBAAiBG,kBAAY,GAAGH,QAAQ,IAAIG,kBAAY,CAACH;QACxE,IAAII,MAAMH,WAAW/B,YAAYgC,OAAOG,GAAG,GAAGH,OAAOI,GAAG,GAAGL;QAC3D,MAAMhB,UAAU+C;QAChB,MAAO9B,OAAOI,GAAG,GAAGF,IAAK;YACvB,MAAMG,MAAML,OAAOd,MAAM;YACzB,OAAQmB,QAAQ;gBACd,KAAK;oBAAG;wBACN,IAAIA,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQgD,MAAM,GAAG/B,OAAOb,MAAM;wBAC9B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQjB,EAAE,GAAGkC,OAAOb,MAAM;wBAC1B;oBACF;YACF;YACA,IAAI,AAACkB,CAAAA,MAAM,CAAA,MAAO,KAAKA,QAAQ,GAAG;gBAChC;YACF;YACAL,OAAOS,IAAI,CAACJ,MAAM;QACpB;QACA,OAAOtB;IACT;IAEA2B,UAASC,MAAW;QAClB,OAAO;YACLoB,QAAQnB,MAAMD,OAAOoB,MAAM,IAAIlB,WAAWC,MAAM,CAACH,OAAOoB,MAAM,IAAI;YAClEjE,IAAI8C,MAAMD,OAAO7C,EAAE,IAAI+C,WAAWC,MAAM,CAACH,OAAO7C,EAAE,IAAI;QACxD;IACF;IAEAuD,QAAOtC,OAA4B;QACjC,MAAMuC,MAAW,CAAC;QAClB,IAAIvC,QAAQgD,MAAM,KAAK,IAAI;YACzBT,IAAIS,MAAM,GAAGhD,QAAQgD,MAAM;QAC7B;QACA,IAAIhD,QAAQjB,EAAE,KAAK,IAAI;YACrBwD,IAAIxD,EAAE,GAAGiB,QAAQjB,EAAE;QACrB;QACA,OAAOwD;IACT;IAEAE,QAA6DpD,IAAQ;QACnE,OAAOjB,oBAAoBsE,WAAW,CAACrD,eAAAA,OAAS,CAAC;IACnD;IACAqD,aAAkEd,MAAS;QACzE,MAAM5B,UAAU+C;YACCnB;QAAjB5B,QAAQgD,MAAM,GAAGpB,CAAAA,iBAAAA,OAAOoB,MAAM,YAAbpB,iBAAiB;YACrBA;QAAb5B,QAAQjB,EAAE,GAAG6C,CAAAA,aAAAA,OAAO7C,EAAE,YAAT6C,aAAa;QAC1B,OAAO5B;IACT;AACF;AAEA,SAASiD;IACP,OAAO;QAAED,QAAQ;QAAIE,QAAQ;IAAG;AAClC;AAEO,MAAM5E,2BAAiE;IAC5EyB,QAAOC,OAAiC,EAAEC,SAAuB,IAAIC,kBAAY,EAAE;QACjF,IAAIF,QAAQgD,MAAM,KAAK,IAAI;YACzB/C,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQgD,MAAM;QACzC;QACA,IAAIhD,QAAQkD,MAAM,KAAK,IAAI;YACzBjD,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQkD,MAAM;QACzC;QACA,OAAOjD;IACT;IAEAa,QAAOC,KAAgC,EAAEC,MAAe;QACtD,MAAMC,SAASF,iBAAiBG,kBAAY,GAAGH,QAAQ,IAAIG,kBAAY,CAACH;QACxE,IAAII,MAAMH,WAAW/B,YAAYgC,OAAOG,GAAG,GAAGH,OAAOI,GAAG,GAAGL;QAC3D,MAAMhB,UAAUiD;QAChB,MAAOhC,OAAOI,GAAG,GAAGF,IAAK;YACvB,MAAMG,MAAML,OAAOd,MAAM;YACzB,OAAQmB,QAAQ;gBACd,KAAK;oBAAG;wBACN,IAAIA,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQgD,MAAM,GAAG/B,OAAOb,MAAM;wBAC9B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQkD,MAAM,GAAGjC,OAAOb,MAAM;wBAC9B;oBACF;YACF;YACA,IAAI,AAACkB,CAAAA,MAAM,CAAA,MAAO,KAAKA,QAAQ,GAAG;gBAChC;YACF;YACAL,OAAOS,IAAI,CAACJ,MAAM;QACpB;QACA,OAAOtB;IACT;IAEA2B,UAASC,MAAW;QAClB,OAAO;YACLoB,QAAQnB,MAAMD,OAAOoB,MAAM,IAAIlB,WAAWC,MAAM,CAACH,OAAOoB,MAAM,IAAI;YAClEE,QAAQrB,MAAMD,OAAOsB,MAAM,IAAIpB,WAAWC,MAAM,CAACH,OAAOsB,MAAM,IAAI;QACpE;IACF;IAEAZ,QAAOtC,OAAiC;QACtC,MAAMuC,MAAW,CAAC;QAClB,IAAIvC,QAAQgD,MAAM,KAAK,IAAI;YACzBT,IAAIS,MAAM,GAAGhD,QAAQgD,MAAM;QAC7B;QACA,IAAIhD,QAAQkD,MAAM,KAAK,IAAI;YACzBX,IAAIW,MAAM,GAAGlD,QAAQkD,MAAM;QAC7B;QACA,OAAOX;IACT;IAEAE,QAAkEpD,IAAQ;QACxE,OAAOf,yBAAyBoE,WAAW,CAACrD,eAAAA,OAAS,CAAC;IACxD;IACAqD,aAAuEd,MAAS;QAC9E,MAAM5B,UAAUiD;YACCrB;QAAjB5B,QAAQgD,MAAM,GAAGpB,CAAAA,iBAAAA,OAAOoB,MAAM,YAAbpB,iBAAiB;YACjBA;QAAjB5B,QAAQkD,MAAM,GAAGtB,CAAAA,iBAAAA,OAAOsB,MAAM,YAAbtB,iBAAiB;QAClC,OAAO5B;IACT;AACF;AAEA,SAASmD;IACP,OAAO;QAAEH,QAAQ;QAAII,YAAY;IAAG;AACtC;AAEO,MAAM7E,+BAAyE;IACpFwB,QAAOC,OAAqC,EAAEC,SAAuB,IAAIC,kBAAY,EAAE;QACrF,IAAIF,QAAQgD,MAAM,KAAK,IAAI;YACzB/C,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQgD,MAAM;QACzC;QACA,IAAIhD,QAAQoD,UAAU,KAAK,IAAI;YAC7BnD,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQoD,UAAU;QAC7C;QACA,OAAOnD;IACT;IAEAa,QAAOC,KAAgC,EAAEC,MAAe;QACtD,MAAMC,SAASF,iBAAiBG,kBAAY,GAAGH,QAAQ,IAAIG,kBAAY,CAACH;QACxE,IAAII,MAAMH,WAAW/B,YAAYgC,OAAOG,GAAG,GAAGH,OAAOI,GAAG,GAAGL;QAC3D,MAAMhB,UAAUmD;QAChB,MAAOlC,OAAOI,GAAG,GAAGF,IAAK;YACvB,MAAMG,MAAML,OAAOd,MAAM;YACzB,OAAQmB,QAAQ;gBACd,KAAK;oBAAG;wBACN,IAAIA,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQgD,MAAM,GAAG/B,OAAOb,MAAM;wBAC9B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQoD,UAAU,GAAGnC,OAAOb,MAAM;wBAClC;oBACF;YACF;YACA,IAAI,AAACkB,CAAAA,MAAM,CAAA,MAAO,KAAKA,QAAQ,GAAG;gBAChC;YACF;YACAL,OAAOS,IAAI,CAACJ,MAAM;QACpB;QACA,OAAOtB;IACT;IAEA2B,UAASC,MAAW;QAClB,OAAO;YACLoB,QAAQnB,MAAMD,OAAOoB,MAAM,IAAIlB,WAAWC,MAAM,CAACH,OAAOoB,MAAM,IAAI;YAClEI,YAAYvB,MAAMD,OAAOwB,UAAU,IAAItB,WAAWC,MAAM,CAACH,OAAOwB,UAAU,IAAI;QAChF;IACF;IAEAd,QAAOtC,OAAqC;QAC1C,MAAMuC,MAAW,CAAC;QAClB,IAAIvC,QAAQgD,MAAM,KAAK,IAAI;YACzBT,IAAIS,MAAM,GAAGhD,QAAQgD,MAAM;QAC7B;QACA,IAAIhD,QAAQoD,UAAU,KAAK,IAAI;YAC7Bb,IAAIa,UAAU,GAAGpD,QAAQoD,UAAU;QACrC;QACA,OAAOb;IACT;IAEAE,QAAsEpD,IAAQ;QAC5E,OAAOd,6BAA6BmE,WAAW,CAACrD,eAAAA,OAAS,CAAC;IAC5D;IACAqD,aAA2Ed,MAAS;QAClF,MAAM5B,UAAUmD;YACCvB;QAAjB5B,QAAQgD,MAAM,GAAGpB,CAAAA,iBAAAA,OAAOoB,MAAM,YAAbpB,iBAAiB;YACbA;QAArB5B,QAAQoD,UAAU,GAAGxB,CAAAA,qBAAAA,OAAOwB,UAAU,YAAjBxB,qBAAqB;QAC1C,OAAO5B;IACT;AACF;AAEA,SAASqD;IACP,OAAO;QAAEL,QAAQ;IAAG;AACtB;AAEO,MAAMxE,2BAAiE;IAC5EuB,QAAOC,OAAiC,EAAEC,SAAuB,IAAIC,kBAAY,EAAE;QACjF,IAAIF,QAAQgD,MAAM,KAAK,IAAI;YACzB/C,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQgD,MAAM;QACzC;QACA,OAAO/C;IACT;IAEAa,QAAOC,KAAgC,EAAEC,MAAe;QACtD,MAAMC,SAASF,iBAAiBG,kBAAY,GAAGH,QAAQ,IAAIG,kBAAY,CAACH;QACxE,IAAII,MAAMH,WAAW/B,YAAYgC,OAAOG,GAAG,GAAGH,OAAOI,GAAG,GAAGL;QAC3D,MAAMhB,UAAUqD;QAChB,MAAOpC,OAAOI,GAAG,GAAGF,IAAK;YACvB,MAAMG,MAAML,OAAOd,MAAM;YACzB,OAAQmB,QAAQ;gBACd,KAAK;oBAAG;wBACN,IAAIA,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQgD,MAAM,GAAG/B,OAAOb,MAAM;wBAC9B;oBACF;YACF;YACA,IAAI,AAACkB,CAAAA,MAAM,CAAA,MAAO,KAAKA,QAAQ,GAAG;gBAChC;YACF;YACAL,OAAOS,IAAI,CAACJ,MAAM;QACpB;QACA,OAAOtB;IACT;IAEA2B,UAASC,MAAW;QAClB,OAAO;YAAEoB,QAAQnB,MAAMD,OAAOoB,MAAM,IAAIlB,WAAWC,MAAM,CAACH,OAAOoB,MAAM,IAAI;QAAG;IAChF;IAEAV,QAAOtC,OAAiC;QACtC,MAAMuC,MAAW,CAAC;QAClB,IAAIvC,QAAQgD,MAAM,KAAK,IAAI;YACzBT,IAAIS,MAAM,GAAGhD,QAAQgD,MAAM;QAC7B;QACA,OAAOT;IACT;IAEAE,QAAkEpD,IAAQ;QACxE,OAAOb,yBAAyBkE,WAAW,CAACrD,eAAAA,OAAS,CAAC;IACxD;IACAqD,aAAuEd,MAAS;QAC9E,MAAM5B,UAAUqD;YACCzB;QAAjB5B,QAAQgD,MAAM,GAAGpB,CAAAA,iBAAAA,OAAOoB,MAAM,YAAbpB,iBAAiB;QAClC,OAAO5B;IACT;AACF;AAEA,SAASsD;IACP,OAAO;QACLN,QAAQ;QACRE,QAAQ;QACRlE,WAAWC;QACXsE,SAAStE;QACTC,YAAY;QACZC,WAAW;QACXC,mBAAmB;QACnBC,MAAM;QACNC,OAAO;QACPC,QAAQ;IACV;AACF;AAEO,MAAMX,wBAA2D;IACtEmB,QAAOC,OAA8B,EAAEC,SAAuB,IAAIC,kBAAY,EAAE;QAC9E,IAAIF,QAAQgD,MAAM,KAAK,IAAI;YACzB/C,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQgD,MAAM;QACzC;QACA,IAAIhD,QAAQkD,MAAM,KAAK,IAAI;YACzBjD,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQkD,MAAM;QACzC;QACA,IAAIlD,QAAQhB,SAAS,KAAKC,WAAW;YACnCoB,oBAAS,CAACN,MAAM,CAACO,YAAYN,QAAQhB,SAAS,GAAGiB,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QACjF;QACA,IAAIR,QAAQuD,OAAO,KAAKtE,WAAW;YACjCoB,oBAAS,CAACN,MAAM,CAACO,YAAYN,QAAQuD,OAAO,GAAGtD,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QAC/E;QACA,IAAIR,QAAQd,UAAU,KAAK,GAAG;YAC5Be,OAAOE,MAAM,CAAC,IAAIM,MAAM,CAACT,QAAQd,UAAU;QAC7C;QACA,IAAIc,QAAQb,SAAS,KAAK,IAAI;YAC5Bc,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQb,SAAS;QAC5C;QACA,IAAIa,QAAQZ,iBAAiB,KAAK,OAAO;YACvCa,OAAOE,MAAM,CAAC,IAAIO,IAAI,CAACV,QAAQZ,iBAAiB;QAClD;QACA,IAAIY,QAAQX,IAAI,KAAK,IAAI;YACvBY,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQX,IAAI;QACvC;QACA,IAAIW,QAAQV,KAAK,KAAK,IAAI;YACxBW,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQV,KAAK;QACxC;QACA,IAAIU,QAAQT,MAAM,KAAK,IAAI;YACzBU,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQT,MAAM;QACzC;QACA,OAAOU;IACT;IAEAa,QAAOC,KAAgC,EAAEC,MAAe;QACtD,MAAMC,SAASF,iBAAiBG,kBAAY,GAAGH,QAAQ,IAAIG,kBAAY,CAACH;QACxE,IAAII,MAAMH,WAAW/B,YAAYgC,OAAOG,GAAG,GAAGH,OAAOI,GAAG,GAAGL;QAC3D,MAAMhB,UAAUsD;QAChB,MAAOrC,OAAOI,GAAG,GAAGF,IAAK;YACvB,MAAMG,MAAML,OAAOd,MAAM;YACzB,OAAQmB,QAAQ;gBACd,KAAK;oBAAG;wBACN,IAAIA,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQgD,MAAM,GAAG/B,OAAOb,MAAM;wBAC9B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQkD,MAAM,GAAGjC,OAAOb,MAAM;wBAC9B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQhB,SAAS,GAAGuC,cAAclB,oBAAS,CAACS,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACxE;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAImB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQuD,OAAO,GAAGhC,cAAclB,oBAAS,CAACS,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACtE;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAImB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQd,UAAU,GAAG+B,OAAOR,MAAM;wBAClC;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIa,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQb,SAAS,GAAG8B,OAAOb,MAAM;wBACjC;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQZ,iBAAiB,GAAG6B,OAAOP,IAAI;wBACvC;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIY,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQX,IAAI,GAAG4B,OAAOb,MAAM;wBAC5B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQV,KAAK,GAAG2B,OAAOb,MAAM;wBAC7B;oBACF;gBACA,KAAK;oBAAI;wBACP,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQT,MAAM,GAAG0B,OAAOb,MAAM;wBAC9B;oBACF;YACF;YACA,IAAI,AAACkB,CAAAA,MAAM,CAAA,MAAO,KAAKA,QAAQ,GAAG;gBAChC;YACF;YACAL,OAAOS,IAAI,CAACJ,MAAM;QACpB;QACA,OAAOtB;IACT;IAEA2B,UAASC,MAAW;QAClB,OAAO;YACLoB,QAAQnB,MAAMD,OAAOoB,MAAM,IAAIlB,WAAWC,MAAM,CAACH,OAAOoB,MAAM,IAAI;YAClEE,QAAQrB,MAAMD,OAAOsB,MAAM,IAAIpB,WAAWC,MAAM,CAACH,OAAOsB,MAAM,IAAI;YAClElE,WAAW6C,MAAMD,OAAO5C,SAAS,IAAIgD,kBAAkBJ,OAAO5C,SAAS,IAAIC;YAC3EsE,SAAS1B,MAAMD,OAAO2B,OAAO,IAAIvB,kBAAkBJ,OAAO2B,OAAO,IAAItE;YACrEC,YAAY2C,MAAMD,OAAO1C,UAAU,IAAI4C,WAAWG,MAAM,CAACL,OAAO1C,UAAU,IAAI;YAC9EC,WAAW0C,MAAMD,OAAOzC,SAAS,IAAI2C,WAAWC,MAAM,CAACH,OAAOzC,SAAS,IAAI;YAC3EC,mBAAmByC,MAAMD,OAAOxC,iBAAiB,IAAI0C,WAAWI,OAAO,CAACN,OAAOxC,iBAAiB,IAAI;YACpGC,MAAMwC,MAAMD,OAAOvC,IAAI,IAAIyC,WAAWC,MAAM,CAACH,OAAOvC,IAAI,IAAI;YAC5DC,OAAOuC,MAAMD,OAAOtC,KAAK,IAAIwC,WAAWC,MAAM,CAACH,OAAOtC,KAAK,IAAI;YAC/DC,QAAQsC,MAAMD,OAAOrC,MAAM,IAAIuC,WAAWC,MAAM,CAACH,OAAOrC,MAAM,IAAI;QACpE;IACF;IAEA+C,QAAOtC,OAA8B;QACnC,MAAMuC,MAAW,CAAC;QAClB,IAAIvC,QAAQgD,MAAM,KAAK,IAAI;YACzBT,IAAIS,MAAM,GAAGhD,QAAQgD,MAAM;QAC7B;QACA,IAAIhD,QAAQkD,MAAM,KAAK,IAAI;YACzBX,IAAIW,MAAM,GAAGlD,QAAQkD,MAAM;QAC7B;QACA,IAAIlD,QAAQhB,SAAS,KAAKC,WAAW;YACnCsD,IAAIvD,SAAS,GAAGgB,QAAQhB,SAAS,CAACwD,WAAW;QAC/C;QACA,IAAIxC,QAAQuD,OAAO,KAAKtE,WAAW;YACjCsD,IAAIgB,OAAO,GAAGvD,QAAQuD,OAAO,CAACf,WAAW;QAC3C;QACA,IAAIxC,QAAQd,UAAU,KAAK,GAAG;YAC5BqD,IAAIrD,UAAU,GAAGc,QAAQd,UAAU;QACrC;QACA,IAAIc,QAAQb,SAAS,KAAK,IAAI;YAC5BoD,IAAIpD,SAAS,GAAGa,QAAQb,SAAS;QACnC;QACA,IAAIa,QAAQZ,iBAAiB,KAAK,OAAO;YACvCmD,IAAInD,iBAAiB,GAAGY,QAAQZ,iBAAiB;QACnD;QACA,IAAIY,QAAQX,IAAI,KAAK,IAAI;YACvBkD,IAAIlD,IAAI,GAAGW,QAAQX,IAAI;QACzB;QACA,IAAIW,QAAQV,KAAK,KAAK,IAAI;YACxBiD,IAAIjD,KAAK,GAAGU,QAAQV,KAAK;QAC3B;QACA,IAAIU,QAAQT,MAAM,KAAK,IAAI;YACzBgD,IAAIhD,MAAM,GAAGS,QAAQT,MAAM;QAC7B;QACA,OAAOgD;IACT;IAEAE,QAA+DpD,IAAQ;QACrE,OAAOT,sBAAsB8D,WAAW,CAACrD,eAAAA,OAAS,CAAC;IACrD;IACAqD,aAAoEd,MAAS;QAC3E,MAAM5B,UAAUsD;YACC1B;QAAjB5B,QAAQgD,MAAM,GAAGpB,CAAAA,iBAAAA,OAAOoB,MAAM,YAAbpB,iBAAiB;YACjBA;QAAjB5B,QAAQkD,MAAM,GAAGtB,CAAAA,iBAAAA,OAAOsB,MAAM,YAAbtB,iBAAiB;YACdA;QAApB5B,QAAQhB,SAAS,GAAG4C,CAAAA,oBAAAA,OAAO5C,SAAS,YAAhB4C,oBAAoB3C;YACtB2C;QAAlB5B,QAAQuD,OAAO,GAAG3B,CAAAA,kBAAAA,OAAO2B,OAAO,YAAd3B,kBAAkB3C;YACf2C;QAArB5B,QAAQd,UAAU,GAAG0C,CAAAA,qBAAAA,OAAO1C,UAAU,YAAjB0C,qBAAqB;YACtBA;QAApB5B,QAAQb,SAAS,GAAGyC,CAAAA,oBAAAA,OAAOzC,SAAS,YAAhByC,oBAAoB;YACZA;QAA5B5B,QAAQZ,iBAAiB,GAAGwC,CAAAA,4BAAAA,OAAOxC,iBAAiB,YAAxBwC,4BAA4B;YACzCA;QAAf5B,QAAQX,IAAI,GAAGuC,CAAAA,eAAAA,OAAOvC,IAAI,YAAXuC,eAAe;YACdA;QAAhB5B,QAAQV,KAAK,GAAGsC,CAAAA,gBAAAA,OAAOtC,KAAK,YAAZsC,gBAAgB;YACfA;QAAjB5B,QAAQT,MAAM,GAAGqC,CAAAA,iBAAAA,OAAOrC,MAAM,YAAbqC,iBAAiB;QAClC,OAAO5B;IACT;AACF;AAEA,SAASwD;IACP,OAAO;QAAEzE,IAAI;QAAIiE,QAAQ;QAAItD,YAAYT;QAAWW,QAAQ,EAAE;QAAEC,QAAQ,EAAE;QAAEC,SAASb;IAAU;AACjG;AAEO,MAAMJ,wBAA2D;IACtEkB,QAAOC,OAA8B,EAAEC,SAAuB,IAAIC,kBAAY,EAAE;QAC9E,IAAIF,QAAQjB,EAAE,KAAK,IAAI;YACrBkB,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQjB,EAAE;QACrC;QACA,IAAIiB,QAAQgD,MAAM,KAAK,IAAI;YACzB/C,OAAOE,MAAM,CAAC,IAAIC,MAAM,CAACJ,QAAQgD,MAAM;QACzC;QACA,IAAIhD,QAAQN,UAAU,KAAKT,WAAW;YACpCoB,oBAAS,CAACN,MAAM,CAACO,YAAYN,QAAQN,UAAU,GAAGO,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QAClF;QACA,KAAK,MAAMG,KAAKX,QAAQJ,MAAM,CAAE;YAC9BgB,cAAM,CAACb,MAAM,CAACa,cAAM,CAACC,IAAI,CAACF,IAAKV,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QAC/D;QACA,KAAK,MAAMG,KAAKX,QAAQH,MAAM,CAAE;YAC9Be,cAAM,CAACb,MAAM,CAACa,cAAM,CAACC,IAAI,CAACF,IAAKV,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QAC/D;QACA,IAAIR,QAAQF,OAAO,KAAKb,WAAW;YACjC2B,cAAM,CAACb,MAAM,CAACa,cAAM,CAACC,IAAI,CAACb,QAAQF,OAAO,GAAGG,OAAOE,MAAM,CAAC,IAAII,IAAI,IAAIC,IAAI;QAC5E;QACA,OAAOP;IACT;IAEAa,QAAOC,KAAgC,EAAEC,MAAe;QACtD,MAAMC,SAASF,iBAAiBG,kBAAY,GAAGH,QAAQ,IAAIG,kBAAY,CAACH;QACxE,IAAII,MAAMH,WAAW/B,YAAYgC,OAAOG,GAAG,GAAGH,OAAOI,GAAG,GAAGL;QAC3D,MAAMhB,UAAUwD;QAChB,MAAOvC,OAAOI,GAAG,GAAGF,IAAK;YACvB,MAAMG,MAAML,OAAOd,MAAM;YACzB,OAAQmB,QAAQ;gBACd,KAAK;oBAAG;wBACN,IAAIA,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQjB,EAAE,GAAGkC,OAAOb,MAAM;wBAC1B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQgD,MAAM,GAAG/B,OAAOb,MAAM;wBAC9B;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAIkB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQN,UAAU,GAAG6B,cAAclB,oBAAS,CAACS,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACzE;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAImB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQJ,MAAM,CAAC4B,IAAI,CAACZ,cAAM,CAACa,MAAM,CAACb,cAAM,CAACE,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACrE;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAImB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQH,MAAM,CAAC2B,IAAI,CAACZ,cAAM,CAACa,MAAM,CAACb,cAAM,CAACE,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACrE;oBACF;gBACA,KAAK;oBAAG;wBACN,IAAImB,QAAQ,IAAI;4BACd;wBACF;wBAEAtB,QAAQF,OAAO,GAAGc,cAAM,CAACa,MAAM,CAACb,cAAM,CAACE,MAAM,CAACG,QAAQA,OAAOd,MAAM;wBACnE;oBACF;YACF;YACA,IAAI,AAACmB,CAAAA,MAAM,CAAA,MAAO,KAAKA,QAAQ,GAAG;gBAChC;YACF;YACAL,OAAOS,IAAI,CAACJ,MAAM;QACpB;QACA,OAAOtB;IACT;IAEA2B,UAASC,MAAW;QAClB,OAAO;YACL7C,IAAI8C,MAAMD,OAAO7C,EAAE,IAAI+C,WAAWC,MAAM,CAACH,OAAO7C,EAAE,IAAI;YACtDiE,QAAQnB,MAAMD,OAAOoB,MAAM,IAAIlB,WAAWC,MAAM,CAACH,OAAOoB,MAAM,IAAI;YAClEtD,YAAYmC,MAAMD,OAAOlC,UAAU,IAAIsC,kBAAkBJ,OAAOlC,UAAU,IAAIT;YAC9EW,QAAQkC,WAAWK,KAAK,CAACC,OAAO,CAACR,0BAAAA,OAAQhC,MAAM,IAAI;mBAAIgC,OAAOhC,MAAM;aAAC,GAAG,EAAE;YAC1EC,QAAQiC,WAAWK,KAAK,CAACC,OAAO,CAACR,0BAAAA,OAAQ/B,MAAM,IAAI;mBAAI+B,OAAO/B,MAAM;aAAC,GAAG,EAAE;YAC1EC,SAASuC,SAAST,OAAO9B,OAAO,IAAI8B,OAAO9B,OAAO,GAAGb;QACvD;IACF;IAEAqD,QAAOtC,OAA8B;YAW/BA,iBAGAA;QAbJ,MAAMuC,MAAW,CAAC;QAClB,IAAIvC,QAAQjB,EAAE,KAAK,IAAI;YACrBwD,IAAIxD,EAAE,GAAGiB,QAAQjB,EAAE;QACrB;QACA,IAAIiB,QAAQgD,MAAM,KAAK,IAAI;YACzBT,IAAIS,MAAM,GAAGhD,QAAQgD,MAAM;QAC7B;QACA,IAAIhD,QAAQN,UAAU,KAAKT,WAAW;YACpCsD,IAAI7C,UAAU,GAAGM,QAAQN,UAAU,CAAC8C,WAAW;QACjD;QACA,KAAIxC,kBAAAA,QAAQJ,MAAM,qBAAdI,gBAAgBgB,MAAM,EAAE;YAC1BuB,IAAI3C,MAAM,GAAGI,QAAQJ,MAAM;QAC7B;QACA,KAAII,kBAAAA,QAAQH,MAAM,qBAAdG,gBAAgBgB,MAAM,EAAE;YAC1BuB,IAAI1C,MAAM,GAAGG,QAAQH,MAAM;QAC7B;QACA,IAAIG,QAAQF,OAAO,KAAKb,WAAW;YACjCsD,IAAIzC,OAAO,GAAGE,QAAQF,OAAO;QAC/B;QACA,OAAOyC;IACT;IAEAE,QAA+DpD,IAAQ;QACrE,OAAOR,sBAAsB6D,WAAW,CAACrD,eAAAA,OAAS,CAAC;IACrD;IACAqD,aAAoEd,MAAS;YAK1DA,gBACAA;QALjB,MAAM5B,UAAUwD;YACH5B;QAAb5B,QAAQjB,EAAE,GAAG6C,CAAAA,aAAAA,OAAO7C,EAAE,YAAT6C,aAAa;YACTA;QAAjB5B,QAAQgD,MAAM,GAAGpB,CAAAA,iBAAAA,OAAOoB,MAAM,YAAbpB,iBAAiB;YACbA;QAArB5B,QAAQN,UAAU,GAAGkC,CAAAA,qBAAAA,OAAOlC,UAAU,YAAjBkC,qBAAqB3C;QAC1Ce,QAAQJ,MAAM,GAAGgC,EAAAA,iBAAAA,OAAOhC,MAAM,qBAAbgC,eAAee,GAAG,CAAC,CAACC,IAAMA,OAAM,EAAE;QACnD5C,QAAQH,MAAM,GAAG+B,EAAAA,iBAAAA,OAAO/B,MAAM,qBAAb+B,eAAee,GAAG,CAAC,CAACC,IAAMA,OAAM,EAAE;YACjChB;QAAlB5B,QAAQF,OAAO,GAAG8B,CAAAA,kBAAAA,OAAO9B,OAAO,YAAd8B,kBAAkB3C;QACpC,OAAOe;IACT;AACF;AAGO,MAAMrB,mBAAmB;IAC9B8E,gBAAgB;QACdC,MAAM;QACNC,eAAe;QACfC,gBAAgB;QAChBC,kBAAkB,CAACC,QAAiCC,OAAOC,IAAI,CAACpF,sBAAsBmB,MAAM,CAAC+D,OAAOG,MAAM;QAC1GC,oBAAoB,CAACJ,QAAkBlF,sBAAsBkC,MAAM,CAACgD;QACpEK,mBAAmB,CAACL,QAA4BC,OAAOC,IAAI,CAAC3F,iBAAiB0B,MAAM,CAAC+D,OAAOG,MAAM;QACjGG,qBAAqB,CAACN,QAAkBzF,iBAAiByC,MAAM,CAACgD;IAClE;IACAO,gBAAgB;QACdX,MAAM;QACNC,eAAe;QACfC,gBAAgB;QAChBC,kBAAkB,CAACC,QAAiCC,OAAOC,IAAI,CAACnF,sBAAsBkB,MAAM,CAAC+D,OAAOG,MAAM;QAC1GC,oBAAoB,CAACJ,QAAkBjF,sBAAsBiC,MAAM,CAACgD;QACpEK,mBAAmB,CAACL,QAA4BC,OAAOC,IAAI,CAAC3F,iBAAiB0B,MAAM,CAAC+D,OAAOG,MAAM;QACjGG,qBAAqB,CAACN,QAAkBzF,iBAAiByC,MAAM,CAACgD;IAClE;IACAQ,iBAAiB;QACfZ,MAAM;QACNC,eAAe;QACfC,gBAAgB;QAChBC,kBAAkB,CAACC,QAA+BC,OAAOC,IAAI,CAAC5F,oBAAoB2B,MAAM,CAAC+D,OAAOG,MAAM;QACtGC,oBAAoB,CAACJ,QAAkB1F,oBAAoB0C,MAAM,CAACgD;QAClEK,mBAAmB,CAACL,QAA4BC,OAAOC,IAAI,CAAC3F,iBAAiB0B,MAAM,CAAC+D,OAAOG,MAAM;QACjGG,qBAAqB,CAACN,QAAkBzF,iBAAiByC,MAAM,CAACgD;IAClE;IACAS,uBAAuB;QACrBb,MAAM;QACNC,eAAe;QACfC,gBAAgB;QAChBC,kBAAkB,CAACC,QAAoCC,OAAOC,IAAI,CAAC1F,yBAAyByB,MAAM,CAAC+D,OAAOG,MAAM;QAChHC,oBAAoB,CAACJ,QAAkBxF,yBAAyBwC,MAAM,CAACgD;QACvEK,mBAAmB,CAACL,QAAiCC,OAAOC,IAAI,CAACtF,sBAAsBqB,MAAM,CAAC+D,OAAOG,MAAM;QAC3GG,qBAAqB,CAACN,QAAkBpF,sBAAsBoC,MAAM,CAACgD;IACvE;IACAU,2BAA2B;QACzBd,MAAM;QACNC,eAAe;QACfC,gBAAgB;QAChBC,kBAAkB,CAACC,QACjBC,OAAOC,IAAI,CAACzF,6BAA6BwB,MAAM,CAAC+D,OAAOG,MAAM;QAC/DC,oBAAoB,CAACJ,QAAkBvF,6BAA6BuC,MAAM,CAACgD;QAC3EK,mBAAmB,CAACL,QAAiCC,OAAOC,IAAI,CAACtF,sBAAsBqB,MAAM,CAAC+D,OAAOG,MAAM;QAC3GG,qBAAqB,CAACN,QAAkBpF,sBAAsBoC,MAAM,CAACgD;IACvE;IACAW,uBAAuB;QACrBf,MAAM;QACNC,eAAe;QACfC,gBAAgB;QAChBC,kBAAkB,CAACC,QAAoCC,OAAOC,IAAI,CAACxF,yBAAyBuB,MAAM,CAAC+D,OAAOG,MAAM;QAChHC,oBAAoB,CAACJ,QAAkBtF,yBAAyBsC,MAAM,CAACgD;QACvEK,mBAAmB,CAACL,QAAiCC,OAAOC,IAAI,CAACtF,sBAAsBqB,MAAM,CAAC+D,OAAOG,MAAM;QAC3GG,qBAAqB,CAACN,QAAkBpF,sBAAsBoC,MAAM,CAACgD;IACvE;AACF;AAwGO,MAAMrF,kBAAkBiG,IAAAA,oCAA4B,EAAC/F,kBAAkB;AAkB9E,SAAS2B,YAAYqE,IAAU;IAC7B,MAAMC,UAAUC,KAAKC,KAAK,CAACH,KAAKI,OAAO,KAAK;IAC5C,MAAMC,QAAQ,AAACL,KAAKI,OAAO,KAAK,OAAS;IACzC,OAAO;QAAEH;QAASI;IAAM;AAC1B;AAEA,SAASzD,cAAc0D,CAAY;IACjC,IAAIC,SAAS,AAACD,CAAAA,EAAEL,OAAO,IAAI,CAAA,IAAK;IAChCM,UAAU,AAACD,CAAAA,EAAED,KAAK,IAAI,CAAA,IAAK;IAC3B,OAAO,IAAIlD,WAAWqD,IAAI,CAACD;AAC7B;AAEA,SAASlD,kBAAkBoD,CAAM;IAC/B,IAAIA,aAAatD,WAAWqD,IAAI,EAAE;QAChC,OAAOC;IACT,OAAO,IAAI,OAAOA,MAAM,UAAU;QAChC,OAAO,IAAItD,WAAWqD,IAAI,CAACC;IAC7B,OAAO;QACL,OAAO7D,cAAclB,oBAAS,CAACsB,QAAQ,CAACyD;IAC1C;AACF;AAEA,SAAS/C,SAASyB,KAAU;IAC1B,OAAO,OAAOA,UAAU,YAAYA,UAAU;AAChD;AAEA,SAASjC,MAAMiC,KAAU;IACvB,OAAOA,UAAU,QAAQA,UAAU7E;AACrC"}