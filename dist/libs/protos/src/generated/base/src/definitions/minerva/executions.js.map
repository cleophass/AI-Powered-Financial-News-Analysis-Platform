{"version":3,"sources":["../../../../../../../../../libs/protos/src/generated/base/src/definitions/minerva/executions.ts"],"sourcesContent":["// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.5.0\n//   protoc               v5.29.1\n// source: src/definitions/minerva/executions.proto\n\n/* eslint-disable */\nimport { BinaryReader, BinaryWriter } from \"@bufbuild/protobuf/wire\";\nimport {\n  type CallOptions,\n  ChannelCredentials,\n  Client,\n  type ClientOptions,\n  type ClientUnaryCall,\n  type handleUnaryCall,\n  makeGenericClientConstructor,\n  Metadata,\n  type ServiceError,\n  type UntypedServiceImplementation,\n} from \"@grpc/grpc-js\";\nimport { Struct } from \"../../../google/protobuf/struct\";\n\nexport interface ExecutionResponse {\n  id: string;\n  executionResult: { [key: string]: any } | undefined;\n  createdAt: string;\n}\n\nexport interface CreateExecutionRequest {\n  flowId: string;\n  userId: string;\n  executionResult: { [key: string]: any } | undefined;\n}\n\nfunction createBaseExecutionResponse(): ExecutionResponse {\n  return { id: \"\", executionResult: undefined, createdAt: \"\" };\n}\n\nexport const ExecutionResponse: MessageFns<ExecutionResponse> = {\n  encode(message: ExecutionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.id !== \"\") {\n      writer.uint32(10).string(message.id);\n    }\n    if (message.executionResult !== undefined) {\n      Struct.encode(Struct.wrap(message.executionResult), writer.uint32(18).fork()).join();\n    }\n    if (message.createdAt !== \"\") {\n      writer.uint32(26).string(message.createdAt);\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): ExecutionResponse {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseExecutionResponse();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.id = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n\n          message.executionResult = Struct.unwrap(Struct.decode(reader, reader.uint32()));\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n\n          message.createdAt = reader.string();\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): ExecutionResponse {\n    return {\n      id: isSet(object.id) ? globalThis.String(object.id) : \"\",\n      executionResult: isObject(object.executionResult) ? object.executionResult : undefined,\n      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : \"\",\n    };\n  },\n\n  toJSON(message: ExecutionResponse): unknown {\n    const obj: any = {};\n    if (message.id !== \"\") {\n      obj.id = message.id;\n    }\n    if (message.executionResult !== undefined) {\n      obj.executionResult = message.executionResult;\n    }\n    if (message.createdAt !== \"\") {\n      obj.createdAt = message.createdAt;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<ExecutionResponse>, I>>(base?: I): ExecutionResponse {\n    return ExecutionResponse.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<ExecutionResponse>, I>>(object: I): ExecutionResponse {\n    const message = createBaseExecutionResponse();\n    message.id = object.id ?? \"\";\n    message.executionResult = object.executionResult ?? undefined;\n    message.createdAt = object.createdAt ?? \"\";\n    return message;\n  },\n};\n\nfunction createBaseCreateExecutionRequest(): CreateExecutionRequest {\n  return { flowId: \"\", userId: \"\", executionResult: undefined };\n}\n\nexport const CreateExecutionRequest: MessageFns<CreateExecutionRequest> = {\n  encode(message: CreateExecutionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {\n    if (message.flowId !== \"\") {\n      writer.uint32(10).string(message.flowId);\n    }\n    if (message.userId !== \"\") {\n      writer.uint32(18).string(message.userId);\n    }\n    if (message.executionResult !== undefined) {\n      Struct.encode(Struct.wrap(message.executionResult), writer.uint32(26).fork()).join();\n    }\n    return writer;\n  },\n\n  decode(input: BinaryReader | Uint8Array, length?: number): CreateExecutionRequest {\n    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = createBaseCreateExecutionRequest();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1: {\n          if (tag !== 10) {\n            break;\n          }\n\n          message.flowId = reader.string();\n          continue;\n        }\n        case 2: {\n          if (tag !== 18) {\n            break;\n          }\n\n          message.userId = reader.string();\n          continue;\n        }\n        case 3: {\n          if (tag !== 26) {\n            break;\n          }\n\n          message.executionResult = Struct.unwrap(Struct.decode(reader, reader.uint32()));\n          continue;\n        }\n      }\n      if ((tag & 7) === 4 || tag === 0) {\n        break;\n      }\n      reader.skip(tag & 7);\n    }\n    return message;\n  },\n\n  fromJSON(object: any): CreateExecutionRequest {\n    return {\n      flowId: isSet(object.flowId) ? globalThis.String(object.flowId) : \"\",\n      userId: isSet(object.userId) ? globalThis.String(object.userId) : \"\",\n      executionResult: isObject(object.executionResult) ? object.executionResult : undefined,\n    };\n  },\n\n  toJSON(message: CreateExecutionRequest): unknown {\n    const obj: any = {};\n    if (message.flowId !== \"\") {\n      obj.flowId = message.flowId;\n    }\n    if (message.userId !== \"\") {\n      obj.userId = message.userId;\n    }\n    if (message.executionResult !== undefined) {\n      obj.executionResult = message.executionResult;\n    }\n    return obj;\n  },\n\n  create<I extends Exact<DeepPartial<CreateExecutionRequest>, I>>(base?: I): CreateExecutionRequest {\n    return CreateExecutionRequest.fromPartial(base ?? ({} as any));\n  },\n  fromPartial<I extends Exact<DeepPartial<CreateExecutionRequest>, I>>(object: I): CreateExecutionRequest {\n    const message = createBaseCreateExecutionRequest();\n    message.flowId = object.flowId ?? \"\";\n    message.userId = object.userId ?? \"\";\n    message.executionResult = object.executionResult ?? undefined;\n    return message;\n  },\n};\n\nexport type ExecutionsService = typeof ExecutionsService;\nexport const ExecutionsService = {\n  createExecution: {\n    path: \"/minerva.Executions/CreateExecution\",\n    requestStream: false,\n    responseStream: false,\n    requestSerialize: (value: CreateExecutionRequest) => Buffer.from(CreateExecutionRequest.encode(value).finish()),\n    requestDeserialize: (value: Buffer) => CreateExecutionRequest.decode(value),\n    responseSerialize: (value: ExecutionResponse) => Buffer.from(ExecutionResponse.encode(value).finish()),\n    responseDeserialize: (value: Buffer) => ExecutionResponse.decode(value),\n  },\n} as const;\n\nexport interface ExecutionsServer extends UntypedServiceImplementation {\n  createExecution: handleUnaryCall<CreateExecutionRequest, ExecutionResponse>;\n}\n\nexport interface ExecutionsClient extends Client {\n  createExecution(\n    request: CreateExecutionRequest,\n    callback: (error: ServiceError | null, response: ExecutionResponse) => void,\n  ): ClientUnaryCall;\n  createExecution(\n    request: CreateExecutionRequest,\n    metadata: Metadata,\n    callback: (error: ServiceError | null, response: ExecutionResponse) => void,\n  ): ClientUnaryCall;\n  createExecution(\n    request: CreateExecutionRequest,\n    metadata: Metadata,\n    options: Partial<CallOptions>,\n    callback: (error: ServiceError | null, response: ExecutionResponse) => void,\n  ): ClientUnaryCall;\n}\n\nexport const ExecutionsClient = makeGenericClientConstructor(ExecutionsService, \"minerva.Executions\") as unknown as {\n  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ExecutionsClient;\n  service: typeof ExecutionsService;\n  serviceName: string;\n};\n\ntype Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;\n\ntype DeepPartial<T> = T extends Builtin ? T\n  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>\n  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>\n  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }\n  : Partial<T>;\n\ntype KeysOfUnion<T> = T extends T ? keyof T : never;\ntype Exact<P, I extends P> = P extends Builtin ? P\n  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };\n\nfunction isObject(value: any): boolean {\n  return typeof value === \"object\" && value !== null;\n}\n\nfunction isSet(value: any): boolean {\n  return value !== null && value !== undefined;\n}\n\ninterface MessageFns<T> {\n  encode(message: T, writer?: BinaryWriter): BinaryWriter;\n  decode(input: BinaryReader | Uint8Array, length?: number): T;\n  fromJSON(object: any): T;\n  toJSON(message: T): unknown;\n  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;\n  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;\n}\n"],"names":["CreateExecutionRequest","ExecutionResponse","ExecutionsClient","ExecutionsService","createBaseExecutionResponse","id","executionResult","undefined","createdAt","encode","message","writer","BinaryWriter","uint32","string","Struct","wrap","fork","join","decode","input","length","reader","BinaryReader","end","len","pos","tag","unwrap","skip","fromJSON","object","isSet","globalThis","String","isObject","toJSON","obj","create","base","fromPartial","createBaseCreateExecutionRequest","flowId","userId","createExecution","path","requestStream","responseStream","requestSerialize","value","Buffer","from","finish","requestDeserialize","responseSerialize","responseDeserialize","makeGenericClientConstructor"],"mappings":"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"}