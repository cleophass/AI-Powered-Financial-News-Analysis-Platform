import { PluggableTypeEnum } from '../enums';

export enum OperatorEnum {
  Addition = 'Addition',
  Subtraction = 'Subtraction',
  Multiplication = 'Multiplication',
  Division = 'Division',
  WholeDivision = 'WholeDivision',
  Modulo = 'Modulo',
  Percent = 'Percent',
  Exponentiation = 'Exponentiation',
  Minimum = 'Minimum',
  Maximum = 'Maximum',
  Mean = 'Mean',
  GreaterThan = 'GreaterThan',
  GreaterThanEqual = 'GreaterThanEqual',
  LessThan = 'LessThan',
  LessThanEqual = 'LessThanEqual',
  Equal = 'Equal',
  NotEqual = 'NotEqual',
  And = 'And',
  Or = 'Or',
}

export const OperatorToArgumentType = {
  [OperatorEnum.Addition]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Subtraction]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Multiplication]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Division]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.WholeDivision]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Modulo]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Percent]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Exponentiation]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Minimum]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Maximum]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Mean]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.GreaterThan]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.GreaterThanEqual]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.LessThan]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.LessThanEqual]: [PluggableTypeEnum.Numeric],
  [OperatorEnum.Equal]: [PluggableTypeEnum.Numeric, PluggableTypeEnum.String],
  [OperatorEnum.NotEqual]: [PluggableTypeEnum.Numeric, PluggableTypeEnum.String],
  [OperatorEnum.And]: [PluggableTypeEnum.Boolean],
  [OperatorEnum.Or]: [PluggableTypeEnum.Boolean],
} as const;

export const OperatorToResultType = {
  [OperatorEnum.Addition]: PluggableTypeEnum.Numeric,
  [OperatorEnum.Subtraction]: PluggableTypeEnum.Numeric,
  [OperatorEnum.Multiplication]: PluggableTypeEnum.Numeric,
  [OperatorEnum.Division]: PluggableTypeEnum.Numeric,
  [OperatorEnum.WholeDivision]: PluggableTypeEnum.Numeric,
  [OperatorEnum.Modulo]: PluggableTypeEnum.Numeric,
  [OperatorEnum.Percent]: PluggableTypeEnum.Numeric,
  [OperatorEnum.Exponentiation]: PluggableTypeEnum.Numeric,
  [OperatorEnum.Minimum]: PluggableTypeEnum.Numeric,
  [OperatorEnum.Maximum]: PluggableTypeEnum.Numeric,
  [OperatorEnum.Mean]: PluggableTypeEnum.Numeric,
  [OperatorEnum.GreaterThan]: PluggableTypeEnum.Boolean,
  [OperatorEnum.GreaterThanEqual]: PluggableTypeEnum.Boolean,
  [OperatorEnum.LessThan]: PluggableTypeEnum.Boolean,
  [OperatorEnum.LessThanEqual]: PluggableTypeEnum.Boolean,
  [OperatorEnum.Equal]: PluggableTypeEnum.Boolean,
  [OperatorEnum.NotEqual]: PluggableTypeEnum.Boolean,
  [OperatorEnum.And]: PluggableTypeEnum.Boolean,
  [OperatorEnum.Or]: PluggableTypeEnum.Boolean,
} as const;

export const OperatorToSymbol = {
  [OperatorEnum.Addition]: '+',
  [OperatorEnum.Subtraction]: '-',
  [OperatorEnum.Multiplication]: '*',
  [OperatorEnum.Division]: '/',
  [OperatorEnum.WholeDivision]: '//',
  [OperatorEnum.Modulo]: '%',
  [OperatorEnum.Percent]: '%',
  [OperatorEnum.Exponentiation]: '**',
  [OperatorEnum.Minimum]: 'min',
  [OperatorEnum.Maximum]: 'max',
  [OperatorEnum.Mean]: 'mean',
  [OperatorEnum.GreaterThan]: '>',
  [OperatorEnum.GreaterThanEqual]: '>=',
  [OperatorEnum.LessThan]: '<',
  [OperatorEnum.LessThanEqual]: '<=',
  [OperatorEnum.Equal]: '==',
  [OperatorEnum.NotEqual]: '!=',
  [OperatorEnum.And]: '&&',
  [OperatorEnum.Or]: '||',
} as const;
